#!/usr/bin/env python3
"""
Plot data rates of NS-3 LTE UES
Loads the data generated from the LTE simulation, in a brute force fashion
Run it from directory where the data self.file is located
(C) 2016 Gyeongsang N. University, Makhtar Diouf
$Id$
"""
import os
import sys
import numpy as np
from matplotlib import pyplot as plt
from scipy.interpolate import spline


class Ns3Throughput:

    def __init__(self):

        # Default downlink stats generated by NS-3
        self.file = "DlPdcpStats.txt"
        if len(sys.argv) > 1:
            self.file = sys.argv[1]
        self.stats = self.file.split('.')[0]

        if not os.path.exists(self.file):
            print("Could not find the LTE data stats, verify the path of: ", self.file)
            sys.exit()

        print("Processing data in", self.file, " ...")
        data = np.loadtxt(self.file, dtype=float, comments='%')

        self.plt = plt
        self.inLteDatafile = False
        self.inWlanDatafile = False

        if self.file == "d2d-ltedata.txt":
            # self.IMSI is 'Ue' field
            self.Time, self.IMSI, self.Range, self.RxBytes = data.T
            self.inLteDatafile = True

        elif self.file == "d2d-wlandata.txt":
            self.Time, self.IMSI, self.Range, self.DataRate = data.T
            self.RxBytes = self.DataRate
            self.inWlanDatafile = True

        else:
            # Forced to unpacked all fields
            # Time is 'start' time
            self.Time, end, CellId, self.IMSI, RNTI, LCID, nTxPDUs, TxBytes, nRxPDUs, self.RxBytes, delay, stdDev, minD, maxD, PduSize, stdDev, minD2, maxD2 = data.T

        if not self.inLteDatafile:  # and not self.inWlanDatafile:
            self.plt.subplot(211)

        self.plt.xlabel("Time (s)")
        self.plt.ylabel("Throughput (Mbit/s)")
        self.plt.title("WiFi Rx throughput vs Time")

        # Use self.IMSI if plotting for all self.UES
        self.UES = [2, 4, 6]
        # , 'WiFi'] # [setLegend(i) for i in self.UES]
        self.UESTR = ['WiFi-300m', 'WiFi-110m', 'WiFi-80m' ]

    def plotUe(self, imsi=2):
        ueRate = [0] * len(self.RxBytes)
        times = [0] * len(ueRate)
        i, j = 0, 0

        for rxB in self.RxBytes:
            if self.IMSI[i] == imsi:
                if self.inLteDatafile or self.inWlanDatafile:
                    ueRate[j] = rxB
                else:
                    ueRate[j] = rxB / (1e6 * 0.25)

                times[j] = self.Time[i]
                j += 1
            i += 1

        # Delete remaining empty spots
        ueRate = ueRate[:j - 1]
        times = times[:j - 1]
        #x_sm = np.array(times)
        #y_sm = np.array(ueRate)
        #x_smooth = np.linspace(x_sm.min(), x_sm.max(), 100)
        # y_smooth = spline(times, ueRate) #, x_smooth)

        # Toggle items with negative rate
        #y_smooth[y_smooth < 0] = 0
        #self.plt.plot(x_smooth, y_smooth)
        self.plt.plot(times, ueRate)

    def setLegend(self, i):
        return "UE" + str(i)

    def plotRanges(self, subP2, imsi=2):
        ueRate = [0] * len(self.RxBytes)
        dist = [0] * len(ueRate)
        i, j = 0, 0

        for rxB in self.RxBytes:
            if self.IMSI[i] == imsi:
                ueRate[j] = rxB
                dist[j] = self.Range[i]
                j += 1
            i += 1

        #subP2.xlabel("Range (m)")
        subP2.plot(ueRate, dist)

    def plotDelay(self):
        """ Plot all delays """
        if not self.inLteDatafile:
            subP1 = plt  # subplot(212)
            subP1.xlabel("Time (s)")
            subP1.ylabel("Delay (ms)")
            subP1.title("Delays vs Time")
            # x_sm = np.array(Time)
            # x_smooth = np.linspace(x_sm.min(), x_sm.max(), 200)
            # y_smooth = spline(Time, list(map(lambda x: x*1e3, delay)), x_smooth)
            # subP1.plot(x_smooth, y_smooth)
            subP1.plot(Time, list(map(lambda x: x * 1e3, delay)))
            subP1.savefig(self.stats + "-delays.png")


#### main
r = Ns3Throughput()
for i in r.UES:
    r.plotUe(i)

'''subP2 = r.plt.subplot(212)
for i in r.UES:
    r.plotRanges(subP2, i)'''

#subP2.savefig(r.stats + "self.Range.png")
# subP2.show()

# Formats available: eps, jpeg, jpg, pdf, pgf, png, ps, raw, rgba, svg,
# svgz, tif, tiff
fname = r.stats + ".png"
r.plt.legend(r.UESTR)  # map(setLegend, self.UES))
r.plt.savefig(fname)
r.plt.show()
print("See image", fname)
