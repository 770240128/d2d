
// Note: Code auto-generated by the Adhoc ASN1 converter; courtesy of Makhtar
// Diouf
#include "EUTRA-RRC-Definitions.asn_typedefs.h"
// EUTRA-RRC-Definitions DEFINITIONS AUTOMATIC TAGS ::=
//
// BEGIN
// -- ASN1START
;
BCCHBCHMessage struct { BCCHBCHMessageType message; };
;
MasterInformationBlock BCCHBCHMessageType;
;
;
BCCHDLSCHMessage struct { BCCHDLSCHMessageType message; };
;
BCCHDLSCHMessageType enum {
  enum c1{SystemInformation systemInformation;
          SystemInformationBlockType1 systemInformationBlockType1;};
struct
}
messageClassExtension{};
;
;
struct MCCHMessage {
  MCCHMessageType message;
};
;
MCCHMessageType enum {
  enum c1{MBSFNAreaConfigurationr9 mbsfnAreaConfigurationr9;};
enum later { enum c2{MBMSCountingRequestr10 mbmsCountingRequestr10;};
struct
}
messageClassExtension{};
}
;
;
;
PCCHMessage struct { PCCHMessageType message; };
;
PCCHMessageType enum { enum c1{Paging paging;};
struct
}
messageClassExtension{};
;
;
DLCCCHMessage struct { DLCCCHMessageType message; };
;
DLCCCHMessageType enum {
  enum c1{RRCConnectionReestablishment rrcConnectionReestablishment;
          RRCConnectionReestablishmentReject rrcConnectionReestablishmentReject;
          RRCConnectionReject rrcConnectionReject;
          RRCConnectionSetup rrcConnectionSetup;};
struct
}
messageClassExtension{};
;
;
DLDCCHMessage struct { DLDCCHMessageType message; };
;
DLDCCHMessageType enum {
  enum c1{
      CSFBParametersResponseCDMA2000 csfbParametersResponseCDMA2000;
      DLInformationTransfer dlInformationTransfer;
      HandoverFromEUTRAPreparationRequest handoverFromEUTRAPreparationRequest;
      MobilityFromEUTRACommand mobilityFromEUTRACommand;
      RRCConnectionReconfiguration rrcConnectionReconfiguration;
      RRCConnectionRelease rrcConnectionRelease;
      SecurityModeCommand securityModeCommand;
      UECapabilityEnquiry ueCapabilityEnquiry; CounterCheck counterCheck;
      UEInformationRequestr9 ueInformationRequestr9;
      LoggedMeasurementConfigurationr10 loggedMeasurementConfigurationr10;
      RNReconfigurationr10 rnReconfigurationr10; spare4 typedef;
      spare3 typedef spare2 typedef spare1 typedef;};
struct
}
messageClassExtension{};
;
;
ULCCCHMessage struct { ULCCCHMessageType message; };
;
ULCCCHMessageType enum {
  enum c1{
      RRCConnectionReestablishmentRequest rrcConnectionReestablishmentRequest;
      RRCConnectionRequest rrcConnectionRequest;};
struct
}
messageClassExtension{};
;
;
ULDCCHMessage struct { ULDCCHMessageType message; };
;
ULDCCHMessageType enum {
  enum c1{
      CSFBParametersRequestCDMA2000 csfbParametersRequestCDMA2000;
      MeasurementReport measurementReport;
      RRCConnectionReconfigurationComplete rrcConnectionReconfigurationComplete;
      RRCConnectionReestablishmentComplete rrcConnectionReestablishmentComplete;
      RRCConnectionSetupComplete rrcConnectionSetupComplete;
      SecurityModeComplete securityModeComplete;
      SecurityModeFailure securityModeFailure;
      UECapabilityInformation ueCapabilityInformation;
      ULHandoverPreparationTransfer ulHandoverPreparationTransfer;
      ULInformationTransfer ulInformationTransfer;
      CounterCheckResponse counterCheckResponse;
      UEInformationResponser9 ueInformationResponser9;
      ProximityIndicationr9 proximityIndicationr9;
      RNReconfigurationCompleter10 rnReconfigurationCompleter10;
      MBMSCountingResponser10 mbmsCountingResponser10;
      InterFreqRSTDMeasurementIndicationr10
          interFreqRSTDMeasurementIndicationr10;};
enum messageClassExtension {
  enum c2{UEAssistanceInformationr11 ueAssistanceInformationr11;
          InDeviceCoexIndicationr11 inDeviceCoexIndicationr11;
          MBMSInterestIndicationr11 mbmsInterestIndicationr11;
          SCGFailureInformation scgFailureInformation;
          SidelinkUEInformation sidelinkUEInformation;
          spare11 typedef spare10 typedef;
          spare9 typedef spare8 typedef spare7 typedef;
          spare6 typedef spare5 typedef spare4 typedef;
          spare3 typedef spare2 typedef spare1 typedef;};
struct
}
messageClassExtensionFuturer11{};
}
;
;
;
SCMCCHMessage struct { SCMCCHMessageType message; };
;
;
SCMCCHMessageType enum { enum c1{SCPTMConfiguration scptmConfiguration;};
struct
}
messageClassExtension{};
;
;
struct CounterCheck {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{CounterCheckr8IEs counterCheckr8;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct CounterCheckr8IEs {
  DRBCountMSBInfoList drbCountMSBInfoList;
  CounterCheckv8a0IEs nonCriticalExtension;
};
;
CounterCheckv8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
SEQU DRBCountMSBInfoList;
;
struct DRBCountMSBInfo {
  DRBIdentity drbIdentity;
  int countMSBUplink;
  int countMSBDownlink;
};
;
;
struct CounterCheckResponse {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    CounterCheckResponser8IEs counterCheckResponser8;
    struct
  }
  criticalExtensionsFuture{};
};
;
struct CounterCheckResponser8IEs {
  DRBCountInfoList drbCountInfoList;
  CounterCheckResponsev8a0IEs nonCriticalExtension;
};
;
CounterCheckResponsev8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
SEQU DRBCountInfoList;
;
struct DRBCountInfo {
  DRBIdentity drbIdentity;
  int countUplink;
  int countDownlink;
};
;
;
CSFBParametersRequestCDMA2000 struct {
  enum criticalExtensions {
    CSFBParametersRequestCDMA2000r8IEs csfbParametersRequestCDMA2000r8;
    struct
  }
  criticalExtensionsFuture{};
};
;
CSFBParametersRequestCDMA2000r8IEs struct {
  CSFBParametersRequestCDMA2000v8a0IEs nonCriticalExtension;
};
;
CSFBParametersRequestCDMA2000v8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
CSFBParametersResponseCDMA2000 struct {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    CSFBParametersResponseCDMA2000r8IEs csfbParametersResponseCDMA2000r8;
    struct
  }
  criticalExtensionsFuture{};
};
;
CSFBParametersResponseCDMA2000r8IEs struct {
  RANDCDMA2000 rand;
  MobilityParametersCDMA2000 mobilityParameters;
  CSFBParametersResponseCDMA2000v8a0IEs nonCriticalExtension;
};
;
CSFBParametersResponseCDMA2000v8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
struct DLInformationTransfer {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{DLInformationTransferr8IEs dlInformationTransferr8;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct DLInformationTransferr8IEs {
  enum dedicatedInfoType {
    DedicatedInfoNAS dedicatedInfoNAS;
    DedicatedInfoCDMA2000 dedicatedInfoCDMA20001XRTT;
    DedicatedInfoCDMA2000 dedicatedInfoCDMA2000HRPD;
  };
  DLInformationTransferv8a0IEs nonCriticalExtension;
};
;
DLInformationTransferv8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
HandoverFromEUTRAPreparationRequest struct {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{handoverFromEUTRAPreparationRequestr8;
            HandoverFromEUTRAPreparationRequestr8IEs;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
HandoverFromEUTRAPreparationRequestr8IEs struct {
  CDMA2000Type cdma2000Type;
  //  Cond cdma2000Type      RANDCDMA2000       rand;
  //  Cond cdma2000Type   MobilityParametersCDMA2000    mobilityParameters;
  HandoverFromEUTRAPreparationRequestv890IEs nonCriticalExtension;
};
;
HandoverFromEUTRAPreparationRequestv890IEs struct {
  char T string lateNonCriticalExtension;
  HandoverFromEUTRAPreparationRequestv920IEs nonCriticalExtension;
};
;
HandoverFromEUTRAPreparationRequestv920IEs struct {
  //  Cond cdma2000Type        bool   concurrPrepCDMA2000HRPDr9;
  HandoverFromEUTRAPreparationRequestv1020IEs nonCriticalExtension;
};
;
HandoverFromEUTRAPreparationRequestv1020IEs struct {
  //  Cond cdma20001XRTT ,   enum  true}  dualRxTxRedirectIndicatorr10   {
  //  Cond dualRxTxRedirect    CarrierFreqCDMA2000
  //  redirectCarrierCDMA20001XRTTr10;
  struct
} nonCriticalExtension{};
;
;
struct InDeviceCoexIndicationr11 {
  enum criticalExtensions {
    enum c1{InDeviceCoexIndicationr11IEs inDeviceCoexIndicationr11;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct InDeviceCoexIndicationr11IEs {
  AffectedCarrierFreqListr11 affectedCarrierFreqListr11;
  TDMAssistanceInfor11 tdmAssistanceInfor11;
  char T string lateNonCriticalExtension;
  InDeviceCoexIndicationv11d0IEs nonCriticalExtension;
};
;
struct InDeviceCoexIndicationv11d0IEs {
  struct ulCAAssistanceInfor11 {
    AffectedCarrierFreqCombListr11 affectedCarrierFreqCombListr11;
    VictimSystemTyper11 victimSystemTyper11;
  };
  struct
} nonCriticalExtension{};
;
SEQU AffectedCarrierFreqListr11;
;
struct AffectedCarrierFreqr11 {
  MeasObjectId carrierFreqr11;
  enum spare
} interferenceDirectionr11{

    other};
;
SEQU AffectedCarrierFreqCombListr11;
;
SEQU AffectedCarrierFreqCombr11;
;
enum TDMAssistanceInfor11 {
  struct drxAssistanceInfor11{enum drxCycleLengthr11{

      sf64, sf80, sf128 sf256 spare2 spare1};
                              int drxOffsetr11; enum drxActiveTimer11{

                                  sf30, sf40, sf60 sf100 spare2 spare1};};
IDCSubframePatternListr11 idcSubframePatternListr11;

;
}
;
;
SEQU IDCSubframePatternListr11;
;
IDCSubframePatternr11 enum {
  std::bitset<4> subframePatternFDDr11; enum subframePatternTDDr11{
      std::bitset<70> subframeConfig0r11; std::bitset<10> subframeConfig15r11;
      std::bitset<60> subframeConfig6r11;};

;
}
;
;
VictimSystemTyper11 struct { , enum true } gpsr11 {
  , enum true
}
glonassr11 { , enum true }
bdsr11 { , enum true }
galileor11 { , enum true }
wlanr11 { enum true }
bluetoothr11{};
;
;
struct InterFreqRSTDMeasurementIndicationr10 {
  enum criticalExtensions {
    enum c1{InterFreqRSTDMeasurementIndicationr10IEs
                interFreqRSTDMeasurementIndicationr10;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct InterFreqRSTDMeasurementIndicationr10IEs {
  enum rstdInterFreqIndicationr10 {
    struct start{RSTDInterFreqInfoListr10 rstdInterFreqInfoListr10;};
  typedef stop;
};
char T string lateNonCriticalExtension;
struct
}
nonCriticalExtension{};
;
SEQU RSTDInterFreqInfoListr10;
;
struct RSTDInterFreqInfor10 {
  ARFCNValueEUTRA carrierFreqr10;
  int measPRSOffsetr10;

  ;
  ARFCNValueEUTRAv9e0 carrierFreqv1090;

  ;
};
;
;
struct LoggedMeasurementConfigurationr10 {
  enum criticalExtensions {
    enum c1{
        LoggedMeasurementConfigurationr10IEs loggedMeasurementConfigurationr10;
        spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
;
LoggedMeasurementConfigurationr10IEs struct {
  TraceReferencer10 traceReferencer10;
  char traceRecordingSessionRefr10;
  char tceIdr10;
  AbsoluteTimeInfor10 absoluteTimeInfor10;
  //  Need OR    AreaConfigurationr10   areaConfigurationr10;
  LoggingDurationr10 loggingDurationr10;
  LoggingIntervalr10 loggingIntervalr10;
  LoggedMeasurementConfigurationv1080IEs nonCriticalExtension;
};
;
LoggedMeasurementConfigurationv1080IEs struct {
  char T string lateNonCriticalExtensionr10;
  LoggedMeasurementConfigurationv1130IEs nonCriticalExtension;
};
;
LoggedMeasurementConfigurationv1130IEs struct {
  //  Need OR    PLMNIdentityList3r11   plmnIdentityListr11;
  //  Need OR    AreaConfigurationv1130   areaConfigurationv1130;
  LoggedMeasurementConfigurationv1250IEs nonCriticalExtension;
};
;
LoggedMeasurementConfigurationv1250IEs struct {
  //       TargetMBSFNAreaList targetMBSFNAreaList;
  struct
} nonCriticalExtension{};
;
SEQU TargetMBSFNAreaList;
;
struct TargetMBSFNArea {
  //  Need OR    MBSFNAreaId     mbsfnAreaId;
  ARFCNValueEUTRAr9 carrierFreq;

  ;
};
;
;
struct MasterInformationBlock {
  enum dlBandwidth { n6 n15 n25 n50 n75 n100 };
  PHICHConfig phichConfig;
  std::bitset<8> systemFrameNumber;
  std::bitset<10> spare;
};
;
;
;
struct MBMSCountingRequestr10 {
  CountingRequestListr10 countingRequestListr10;
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
SEQU CountingRequestListr10;
;
struct CountingRequestInfor10 {
  TMGIr9 tmgir10;

  ;
};
;
;
struct MBMSCountingResponser10 {
  enum criticalExtensions {
    enum c1{MBMSCountingResponser10IEs countingResponser10;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct MBMSCountingResponser10IEs {
  int mbsfnAreaIndexr10;
  CountingResponseListr10 countingResponseListr10;
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
SEQU CountingResponseListr10;
;
struct CountingResponseInfor10 {
  int countingResponseServicer10;

  ;
};
;
;
struct MBMSInterestIndicationr11 {
  enum criticalExtensions {
    enum c1{MBMSInterestIndicationr11IEs interestIndicationr11;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct MBMSInterestIndicationr11IEs {
  CarrierFreqListMBMSr11 mbmsFreqListr11;
  , enum true
} mbmsPriorityr11 {
  char T string lateNonCriticalExtension;
  MBMSInterestIndicationIEs nonCriticalExtension;
};
;
struct MBMSInterestIndicationIEs {
  MBMSServiceList mbmsServices;
  struct
} nonCriticalExtension{};
;
;
struct MBSFNAreaConfigurationr9 {
  CommonSFAllocPatternListr9 commonSFAllocr9;
  enum commonSFAllocPeriodr9 { rf4 rf8 rf16 rf32 rf64 rf128 rf256 };
  PMCHInfoListr9 pmchInfoListr9;
  MBSFNAreaConfigurationv930IEs nonCriticalExtension;
};
;
MBSFNAreaConfigurationv930IEs struct {
  char T string lateNonCriticalExtension;
  MBSFNAreaConfigurationv1250IEs nonCriticalExtension;
};
;
MBSFNAreaConfigurationv1250IEs struct {
  //  Need OR      PMCHInfoListExt    pmchInfoListExt;
  struct
} nonCriticalExtension{};
;
SEQU CommonSFAllocPatternListr9;
;
;
struct MeasurementReport {
  enum criticalExtensions {
    enum c1{MeasurementReportr8IEs measurementReportr8; spare7 typedef;
            spare6 typedef spare5 typedef spare4 typedef;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct MeasurementReportr8IEs {
  MeasResults measResults;
  MeasurementReportv8a0IEs nonCriticalExtension;
};
;
MeasurementReportv8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
struct MobilityFromEUTRACommand {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{MobilityFromEUTRACommandr8IEs mobilityFromEUTRACommandr8;
            MobilityFromEUTRACommandr9IEs mobilityFromEUTRACommandr9;
            typedef spare2 typedef spare1;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct MobilityFromEUTRACommandr8IEs {
  bool csFallbackIndicator;
  enum purpose { Handover handover; CellChangeOrder cellChangeOrder; };
  MobilityFromEUTRACommandv8a0IEs nonCriticalExtension;
};
;
MobilityFromEUTRACommandv8a0IEs struct {
  char T string lateNonCriticalExtension;
  MobilityFromEUTRACommandv8d0IEs nonCriticalExtension;
};
;
MobilityFromEUTRACommandv8d0IEs struct {
  //  Cond GERAN     BandIndicatorGERAN      bandIndicator;
  struct
} nonCriticalExtension{};
;
struct MobilityFromEUTRACommandr9IEs {
  bool csFallbackIndicator;
  enum purpose {
    Handover handover;
    CellChangeOrder cellChangeOrder;
    ECSFBr9 eCSFBr9;

    ;
  };
  MobilityFromEUTRACommandv930IEs nonCriticalExtension;
};
;
MobilityFromEUTRACommandv930IEs struct {
  char T string lateNonCriticalExtension;
  MobilityFromEUTRACommandv960IEs nonCriticalExtension;
};
;
MobilityFromEUTRACommandv960IEs struct {
  //  Cond GERAN     BandIndicatorGERAN      bandIndicator;
  struct
} nonCriticalExtension{};
;
struct Handover {
  enum targetRATType {
    utra geran cdma20001XRTT cdma2000HRPD;
    spare3 spare2 spare1
  }
  spare4;
  char T string targetRATMessageContainer;
  //  Cond UTRAGERAN    char    nasSecurityParamFromEUTRA;
  //  Cond PSHO     SIOrPSIGERAN     systemInformation;
};
;
struct CellChangeOrder {
  enum t304 { ms100 ms200 ms500 ms1000; ms2000 ms4000 ms8000 spare1 };
  enum targetRATType {
    struct geran{
        PhysCellIdGERAN physCellId; CarrierFreqGERAN carrierFreq;
        //       std::bitset<2>   networkControlOrder;
        //        SIOrPSIGERAN    systemInformation;
    };

  ;
};
}
;
;
enum SIOrPSIGERAN { SystemInfoListGERAN si; SystemInfoListGERAN psi; };
;
struct ECSFBr9 {
  //        char T  string   messageContCDMA20001XRTTr9;
  enum mobilityCDMA2000HRPDr9 {
    handover redirection;
    //          };
    //  Cond concHO     char T  string   messageContCDMA2000HRPDr9;
    //  Cond concRedir  CarrierFreqCDMA2000 redirectCarrierCDMA2000HRPDr9;
  };
  ;
  ;
  struct Paging {
    //          PagingRecordList    pagingRecordList;
    //    ,      enum  true}   systemInfoModification   {
    //    ,      enum  true}     etwsIndication   {
    Pagingv890IEs nonCriticalExtension;
  };
  ;
  struct Pagingv890IEs {
    char T string lateNonCriticalExtension;
    Pagingv920IEs nonCriticalExtension;
  };
  ;
  struct Pagingv920IEs {
    //    ,      enum  true}    cmasIndicationr9   {
    Pagingv1130IEs nonCriticalExtension;
  };
  ;
  struct Pagingv1130IEs {
    //    ,      enum  true}  eabParamModificationr11   {
    Pagingv13xxIEs nonCriticalExtension;
  };
  ;
  struct Pagingv13xxIEs {
    //   ,      enum  true} redistributionIndication   {
    //    ,      enum  true} systemInfoModificationeDRX   {
    struct
  } nonCriticalExtension{};
  ;
  SEQU PagingRecordList;
  ;
  struct PagingRecord {
    PagingUEIdentity ueIdentity;
    enum cnDomain {

      ;
    };
    ;
    enum PagingUEIdentity {
      STMSI sTMSI;
      IMSI imsi;

      ;
    };
    ;
    SEQU IMSI;
    ;
    int IMSIDigit;
    ;
    ;
    ProximityIndicationr9 struct {
      enum criticalExtensions {
        enum c1{ProximityIndicationr9IEs proximityIndicationr9;
                spare3 typedef spare2 typedef spare1 typedef;};
      struct
    } criticalExtensionsFuture{};
  };
  ;
  ProximityIndicationr9IEs struct {
    enum typer9 {
      enum carrierFreqr9{ARFCNValueEUTRA eutrar9; ARFCNValueUTRA utrar9;

                         ; ARFCNValueEUTRAv9e0 eutra2v9e0;};
    ProximityIndicationv930IEs nonCriticalExtension;
  };
  ;
  ProximityIndicationv930IEs struct {
    char T string lateNonCriticalExtension;
    struct
  } nonCriticalExtension{};
  ;
  ;
  struct RNReconfigurationr10 {
    RRCTransactionIdentifier rrcTransactionIdentifier;
    enum criticalExtensions {
      enum c1{RNReconfigurationr10IEs rnReconfigurationr10;
              spare3 typedef spare2 typedef spare1 typedef;};
    struct
  } criticalExtensionsFuture{};
};
;
struct RNReconfigurationr10IEs {
  //        RNSystemInfor10     rnSystemInfor10;
  //        RNSubframeConfigr10    rnSubframeConfigr10;
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
struct RNSystemInfor10 {
  //       char   systemInformationBlockType1r10;
  //       SystemInformationBlockType2  systemInformationBlockType2r10;

  ;
};
;
;
struct RNReconfigurationCompleter10 {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{RNReconfigurationCompleter10IEs rnReconfigurationCompleter10;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct RNReconfigurationCompleter10IEs {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
struct RRCConnectionReconfiguration {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{RRCConnectionReconfigurationr8IEs rrcConnectionReconfigurationr8;
            spare7 typedef; spare6 typedef spare5 typedef spare4 typedef;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
RRCConnectionReconfigurationr8IEs struct {
  //           MeasConfig       measConfig;
  //  Cond HO      MobilityControlInfo     mobilityControlInfo;
  SEQU dedicatedInfoNASList;
  //  Cond nonHO     DedicatedInfoNAS;
  //  Cond HOtoEUTRA RadioResourceConfigDedicated  radioResourceConfigDedicated;
  //  Cond HO      SecurityConfigHO     securityConfigHO;
  RRCConnectionReconfigurationv890IEs nonCriticalExtension;
};
;
RRCConnectionReconfigurationv890IEs struct {
  char lateNonCriticalExtension;
  RRCConnectionReconfigurationv920IEs nonCriticalExtension;
};
;
//  Late noncritical extensions:;
RRCConnectionReconfigurationv8m0IEs struct {
  //  Following field is only for pre REL10 late noncritical extensions;
  char T string lateNonCriticalExtension;
  RRCConnectionReconfigurationv10i0IEs nonCriticalExtension;
};
;
RRCConnectionReconfigurationv10i0IEs struct {
  //        AntennaInfoDedicatedv10i0  antennaInfoDedicatedPCellv10i0;
  //  Following field is only for late noncritical extensions from REL10;
  struct
} nonCriticalExtension{};
;
//  Regular noncritical extensions:;
RRCConnectionReconfigurationv920IEs struct {
  //          OtherConfigr9      otherConfigr9;
  //  Cond HOReestab ,     enum  true}      fullConfigr9   {
  RRCConnectionReconfigurationv1020IEs nonCriticalExtension;
};
;
RRCConnectionReconfigurationv1020IEs struct {
  //        SCellToReleaseListr10    sCellToReleaseListr10;
  //        SCellToAddModListr10    sCellToAddModListr10;
  RRCConnectionReconfigurationv1130IEs nonCriticalExtension;
};
;
RRCConnectionReconfigurationv1130IEs struct {
  //                         char  systemInfomationBlockType1Dedicatedr11;
  RRCConnectionReconfigurationv1250IEs nonCriticalExtension;
};
;
RRCConnectionReconfigurationv1250IEs struct {
  enum wlanOffloadInfo {
    typedef release;
    struct setup{WLANOffloadConfig wlanOffloadConfigDedicated; enum t350{

        min10, min20, min30
        //  Need OR  min120  min180  spare1};
    };
                 //                       };
                 //  Cond nonFullConfig    SCGConfiguration    scgConfiguration;
                 //        SLSyncTxControl    slSyncTxControl;
                 //         SLDiscConfig     slDiscConfig;
                 //         SLCommConfig     slCommConfig;
                 RRCConnectionReconfigurationv13xyIEs nonCriticalExtension;};
  ;
  RRCConnectionReconfigurationv13xyIEs struct {
    //       SCellToReleaseListExt   sCellToReleaseListExt;
    //       SCellToAddModListExt   sCellToAddModListExt;
    struct
  } nonCriticalExtension{};
  ;
  struct SLSyncTxControl {
    //        enum   off}    networkControlledSyncTx   {
  };
  ;
  struct PSCellToAddMod {
    SCellIndexr10 sCellIndex;
    struct cellIdentification {
      PhysCellId physCellId;
      ARFCNValueEUTRAr9 dlCarrierFreq;
      //  Cond SCellAdd                   };
      //  Cond SCellAdd   RadioResourceConfigCommonPSCell
      //  radioResourceConfigCommonPSCell;
      //  Cond SCellAdd2   RadioResourceConfigDedicatedPSCell
      //  radioResourceConfigDedicatedPSCell;

      ;
      //     AntennaInfoDedicatedv10i0  antennaInfoDedicatedPSCellv1280;

      ;
      //      SCellIndex     sCellIndex;

      ;
    };
    ;
    PowerCoordinationInfo struct {
      int pMeNB;
      int pSeNB;
      int powerControlMode;
    };
    ;
    SEQU SCellToAddModListr10;
    ;
    SEQU SCellToAddModListExt;
    ;
    struct SCellToAddModr10 {
      SCellIndexr10 sCellIndexr10;
      struct cellIdentificationr10 {
        PhysCellId physCellIdr10;
        ARFCNValueEUTRA dlCarrierFreqr10;
        //  Cond SCellAdd                  };
        //  Cond SCellAdd   RadioResourceConfigCommonSCellr10
        //  radioResourceConfigCommonSCellr10;
        //  Cond SCellAdd2   RadioResourceConfigDedicatedSCellr10
        //  radioResourceConfigDedicatedSCellr10;

        ;
        //  Cond EARFCNmax  ARFCNValueEUTRAv9e0    dlCarrierFreqv1090;

        ;
        //     AntennaInfoDedicatedv10i0  antennaInfoDedicatedSCellv10i0;

        ;
      };
      ;
      struct SCellToAddMod {
        SCellIndexv13xy sCellIndexv13xy;
        struct cellIdentification {
          PhysCellId physCellId;
          ARFCNValueEUTRAr9 dlCarrierFreq;
          //  Cond SCellAdd                  };
          //  Cond SCellAdd   RadioResourceConfigCommonSCellr10
          //  radioResourceConfigCommonSCell;
          //  Cond SCellAdd2  RadioResourceConfigDedicatedSCellr10
          //  radioResourceConfigDedicatedSCell;
        };
        ;
        SEQU SCellToReleaseListr10;
        ;
        SEQU SCellToReleaseListExt;
        ;
        enum SCGConfiguration {
          typedef release; struct setup{struct scgConfigPartMCG{
              //         int       scgCounter;
              //      PowerCoordinationInfo   powerCoordinationInfo;

              ;
              //                     };
              //      SCGConfigPartSCG    scgConfigPartSCG;
          };
      };
      ;
      struct SCGConfigPartSCG {
        //      RadioResourceConfigDedicatedSCG radioResourceConfigDedicatedSCG;
        //       SCellToReleaseListr10   sCellToReleaseListSCG;
        //        PSCellToAddMod     pSCellToAddMod;
        //       SCellToAddModListr10   sCellToAddModListSCG;
        //      MobilityControlInfoSCG   mobilityControlInfoSCG;

        ;

        ;
        //       SCellToReleaseListExt   sCellToReleaseListSCGExt;
        //     SCellToAddModListExt    sCellToAddModListSCGExt;

        ;
      };
      ;
      struct SecurityConfigHO {
        enum handoverType {
          struct intraLTE{//  Cond fullConfig    SecurityAlgorithmConfig
                          //  securityAlgorithmConfig;
                          bool keyChangeIndicator;
                          NextHopChainingCount nextHopChainingCount;};
        struct interRAT {
          SecurityAlgorithmConfig securityAlgorithmConfig;
          char nasSecurityParamToEUTRA;
        };
      };

      ;
    };
    ;
    ;
    ;
    RRCConnectionReconfigurationComplete struct {
      RRCTransactionIdentifier rrcTransactionIdentifier;
      enum criticalExtensions {
        rrcConnectionReconfigurationCompleter8;
        RRCConnectionReconfigurationCompleter8IEs;
        struct
      }
      criticalExtensionsFuture{};
    };
    ;
    RRCConnectionReconfigurationCompleter8IEs struct {
      RRCConnectionReconfigurationCompletev8a0IEs nonCriticalExtension;
    };
    ;
    RRCConnectionReconfigurationCompletev8a0IEs struct {
      char T string lateNonCriticalExtension;
      RRCConnectionReconfigurationCompletev1020IEs nonCriticalExtension;
    };
    ;
    RRCConnectionReconfigurationCompletev1020IEs struct {
      , enum true
    } rlfInfoAvailabler10 {
      , enum true
    }
    logMeasAvailabler10 {
      RRCConnectionReconfigurationCompletev1130IEs nonCriticalExtension;
    };
    ;
    RRCConnectionReconfigurationCompletev1130IEs struct {
      , enum true
    } connEstFailInfoAvailabler11 {
      RRCConnectionReconfigurationCompletev1250IEs nonCriticalExtension;
    };
    ;
    RRCConnectionReconfigurationCompletev1250IEs struct {
      , enum true
    } logMeasAvailableMBSFN {
      struct
    }
    nonCriticalExtension{};
    ;
    ;
    struct RRCConnectionReestablishment {
      RRCTransactionIdentifier rrcTransactionIdentifier;
      enum criticalExtensions {
        enum c1{
            RRCConnectionReestablishmentr8IEs rrcConnectionReestablishmentr8;
            spare7 typedef; typedef spare6 typedef spare5 typedef spare4;
            typedef spare3 typedef spare2 typedef spare1;};
      struct
    } criticalExtensionsFuture{};
  };
  ;
  RRCConnectionReestablishmentr8IEs struct {
    RadioResourceConfigDedicated radioResourceConfigDedicated;
    NextHopChainingCount nextHopChainingCount;
    RRCConnectionReestablishmentv8a0IEs nonCriticalExtension;
  };
  ;
  RRCConnectionReestablishmentv8a0IEs struct {
    char T string lateNonCriticalExtension;
    struct
  } nonCriticalExtension{};
  ;
  ;
  RRCConnectionReestablishmentComplete struct {
    RRCTransactionIdentifier rrcTransactionIdentifier;
    enum criticalExtensions {
      rrcConnectionReestablishmentCompleter8;
      RRCConnectionReestablishmentCompleter8IEs;
      struct
    }
    criticalExtensionsFuture{};
  };
  ;
  RRCConnectionReestablishmentCompleter8IEs struct {
    RRCConnectionReestablishmentCompletev920IEs nonCriticalExtension;
  };
  ;
  RRCConnectionReestablishmentCompletev920IEs struct {
    , enum true
  } rlfInfoAvailabler9 {
    RRCConnectionReestablishmentCompletev8a0IEs nonCriticalExtension;
  };
  ;
  RRCConnectionReestablishmentCompletev8a0IEs struct {
    char T string lateNonCriticalExtension;
    RRCConnectionReestablishmentCompletev1020IEs nonCriticalExtension;
  };
  ;
  RRCConnectionReestablishmentCompletev1020IEs struct {
    , enum true
  } logMeasAvailabler10 {
    RRCConnectionReestablishmentCompletev1130IEs nonCriticalExtension;
  };
  ;
  RRCConnectionReestablishmentCompletev1130IEs struct {
    , enum true
  } connEstFailInfoAvailabler11 {
    RRCConnectionReestablishmentCompletev1250IEs nonCriticalExtension;
  };
  ;
  RRCConnectionReestablishmentCompletev1250IEs struct {
    , enum true
  } logMeasAvailableMBSFN {
    struct
  }
  nonCriticalExtension{};
  ;
  ;
  RRCConnectionReestablishmentReject struct {
    enum criticalExtensions {
      rrcConnectionReestablishmentRejectr8;
      RRCConnectionReestablishmentRejectr8IEs;
      struct
    }
    criticalExtensionsFuture{};
  };
  ;
  RRCConnectionReestablishmentRejectr8IEs struct {
    RRCConnectionReestablishmentRejectv8a0IEs nonCriticalExtension;
  };
  ;
  RRCConnectionReestablishmentRejectv8a0IEs struct {
    char T string lateNonCriticalExtension;
    struct
  } nonCriticalExtension{};
  ;
  ;
  RRCConnectionReestablishmentRequest struct {
    enum criticalExtensions {
      rrcConnectionReestablishmentRequestr8;
      RRCConnectionReestablishmentRequestr8IEs;
      struct
    }
    criticalExtensionsFuture{};
  };
  ;
  RRCConnectionReestablishmentRequestr8IEs struct {
    ReestabUEIdentity ueIdentity;
    ReestablishmentCause reestablishmentCause;
    std::bitset<2> spare;
  };
  ;
  struct ReestabUEIdentity {
    CRNTI cRNTI;
    PhysCellId physCellId;
    ShortMACI shortMACI;
  };
  ;
  enum ReestablishmentCause {
    reconfigurationFailure handoverFailure;
    otherFailure spare1
  };
  ;
  ;
  struct RRCConnectionReject {
    enum criticalExtensions {
      enum c1{RRCConnectionRejectr8IEs rrcConnectionRejectr8;
              spare3 typedef spare2 typedef spare1 typedef;};
    struct
  } criticalExtensionsFuture{};
};
;
struct RRCConnectionRejectr8IEs {
  int waitTime;
  RRCConnectionRejectv8a0IEs nonCriticalExtension;
};
;
RRCConnectionRejectv8a0IEs struct {
  char T string lateNonCriticalExtension;
  RRCConnectionRejectv1020IEs nonCriticalExtension;
};
;
struct RRCConnectionRejectv1020IEs {
  //           int     extendedWaitTimer10;
  RRCConnectionRejectv1130IEs nonCriticalExtension;
};
;
struct RRCConnectionRejectv1130IEs {
  struct deprioritisationReqr11 {
    enum deprioritisationTyper11 { enum min30 } deprioritisationTimerr11 {

      min10
          //                       };
          struct
    }
    nonCriticalExtension{};
    ;
    ;
    struct RRCConnectionRelease {
      RRCTransactionIdentifier rrcTransactionIdentifier;
      enum criticalExtensions {
        enum c1{RRCConnectionReleaser8IEs rrcConnectionReleaser8;
                spare3 typedef spare2 typedef spare1 typedef;};
      struct
    } criticalExtensionsFuture{};
  };
  ;
  struct RRCConnectionReleaser8IEs {
    ReleaseCause releaseCause;
    //         RedirectedCarrierInfo    redirectedCarrierInfo;
    //        IdleModeMobilityControlInfo   idleModeMobilityControlInfo;
    RRCConnectionReleasev890IEs nonCriticalExtension;
  };
  ;
  struct RRCConnectionReleasev890IEs {
    char lateNonCriticalExtension;
    RRCConnectionReleasev920IEs nonCriticalExtension;
  };
  ;
  //  Late non critical extensions;
  RRCConnectionReleasev9e0IEs struct {
    //  Cond NoRedirectr8     RedirectedCarrierInfov9e0
    //  redirectedCarrierInfov9e0;
    //  Cond IdleInfoEUTRA   IdleModeMobilityControlInfov9e0
    //  idleModeMobilityControlInfov9e0;
    struct
  } nonCriticalExtension{};
  ;
  //  Regular non critical extensions;
  struct RRCConnectionReleasev920IEs {
    enum cellInfoListr9 {
      CellInfoListGERANr9 geranr9;
      CellInfoListUTRAFDDr9 utraFDDr9;
      CellInfoListUTRATDDr9 utraTDDr9;

      ;
      CellInfoListUTRATDDr10 utraTDDr10;
      //  Cond Redirection                 };
      RRCConnectionReleasev1020IEs nonCriticalExtension;
    };
    ;
    struct RRCConnectionReleasev1020IEs {
      //        int     extendedWaitTimer10;
      struct
    } nonCriticalExtension{};
    ;
    enum ReleaseCause { other csFallbackHighPriorityv1020 spare1 };
    ;
    enum RedirectedCarrierInfo {
      ARFCNValueEUTRA eutra;
      CarrierFreqsGERAN geran;
      ARFCNValueUTRA utraFDD;
      ARFCNValueUTRA utraTDD;
      CarrierFreqCDMA2000 cdma2000HRPD;
      CarrierFreqCDMA2000 cdma20001xRTT;

      ;
      CarrierFreqListUTRATDDr10 utraTDDr10;
    };
    ;
    struct RedirectedCarrierInfov9e0 {
      ARFCNValueEUTRAv9e0 eutrav9e0;
    };
    ;
    SEQU CarrierFreqListUTRATDDr10;
    ;
    struct IdleModeMobilityControlInfo {
      //         FreqPriorityListEUTRA    freqPriorityListEUTRA;
      //         FreqsPriorityListGERAN    freqPriorityListGERAN;
      //        FreqPriorityListUTRAFDD   freqPriorityListUTRAFDD;
      //        FreqPriorityListUTRATDD   freqPriorityListUTRATDD;
      //        BandClassPriorityListHRPD   bandClassPriorityListHRPD;
      //        BandClassPriorityList1XRTT   bandClassPriorityList1XRTT;
      enum t320 {
        min5 min10 min20 min30 min60 min120 min180;
        //  Need OR         spare1};

        ;
        //       FreqPriorityListExtEUTRA  freqPriorityListExtEUTRA;

        ;
        //         FreqPriorityListEUTRAv13xy   freqPriorityListEUTRAv13xy;
        //       FreqPriorityListExtEUTRAv13xy  freqPriorityListExtEUTRAv13xy;

        ;
      };
      ;
      struct IdleModeMobilityControlInfov9e0 {
        SEQU freqPriorityListEUTRAv9e0;
      };
      ;
      SEQU FreqPriorityListEUTRA;
      ;
      SEQU FreqPriorityListExtEUTRA;
      ;
      SEQU FreqPriorityListEUTRAv13xy;
      ;
      SEQU FreqPriorityListExtEUTRAv13xy;
      ;
      struct FreqPriorityEUTRA {
        ARFCNValueEUTRA carrierFreq;
        CellReselectionPriority cellReselectionPriority;
      };
      ;
      struct FreqPriorityEUTRAv9e0 {
        //  Cond EARFCNmax   ARFCNValueEUTRAv9e0     carrierFreqv9e0;
      };
      ;
      struct FreqPriorityEUTRA {
        ARFCNValueEUTRAr9 carrierFreq;
        CellReselectionPriority cellReselectionPriority;
      };
      ;
      struct FreqPriorityEUTRAv13xy {
        //       CellReselectionSubPriority    cellReselectionSubPriority;
      };
      ;
      SEQU FreqsPriorityListGERAN;
      ;
      struct FreqsPriorityGERAN {
        CarrierFreqsGERAN carrierFreqs;
        CellReselectionPriority cellReselectionPriority;
      };
      ;
      SEQU FreqPriorityListUTRAFDD;
      ;
      struct FreqPriorityUTRAFDD {
        ARFCNValueUTRA carrierFreq;
        CellReselectionPriority cellReselectionPriority;
      };
      ;
      SEQU FreqPriorityListUTRATDD;
      ;
      struct FreqPriorityUTRATDD {
        ARFCNValueUTRA carrierFreq;
        CellReselectionPriority cellReselectionPriority;
      };
      ;
      SEQU BandClassPriorityListHRPD;
      ;
      struct BandClassPriorityHRPD {
        BandclassCDMA2000 bandClass;
        CellReselectionPriority cellReselectionPriority;
      };
      ;
      SEQU BandClassPriorityList1XRTT;
      ;
      struct BandClassPriority1XRTT {
        BandclassCDMA2000 bandClass;
        CellReselectionPriority cellReselectionPriority;
      };
      ;
      SEQU CellInfoListGERANr9;
      ;
      struct CellInfoGERANr9 {
        PhysCellIdGERAN physCellIdr9;
        CarrierFreqGERAN carrierFreqr9;
        SystemInfoListGERAN systemInformationr9;
      };
      ;
      SEQU CellInfoListUTRAFDDr9;
      ;
      struct CellInfoUTRAFDDr9 {
        PhysCellIdUTRAFDD physCellIdr9;
        char T string utraBCCHContainerr9;
      };
      ;
      SEQU CellInfoListUTRATDDr9;
      ;
      struct CellInfoUTRATDDr9 {
        PhysCellIdUTRATDD physCellIdr9;
        char T string utraBCCHContainerr9;
      };
      ;
      SEQU CellInfoListUTRATDDr10;
      ;
      struct CellInfoUTRATDDr10 {
        PhysCellIdUTRATDD physCellIdr10;
        ARFCNValueUTRA carrierFreqr10;
        char T string utraBCCHContainerr10;
      };
      ;
      ;
      struct RRCConnectionRequest {
        enum criticalExtensions {
          RRCConnectionRequestr8IEs rrcConnectionRequestr8;
          struct
        }
        criticalExtensionsFuture{};
      };
      ;
      struct RRCConnectionRequestr8IEs {
        InitialUEIdentity ueIdentity;
        EstablishmentCause establishmentCause;
        std::bitset<1> spare;
      };
      ;
      enum InitialUEIdentity { STMSI sTMSI; std::bitset<40> randomValue; };
      ;
      enum EstablishmentCause {
        emergency highPriorityAccess mtAccess moSignalling;
        moData delayTolerantAccessv1020 moVoiceCallv1280 spare1
      };
      ;
      ;
      struct RRCConnectionSetup {
        RRCTransactionIdentifier rrcTransactionIdentifier;
        enum criticalExtensions {
          enum c1{RRCConnectionSetupr8IEs rrcConnectionSetupr8; spare7 typedef;
                  spare6 typedef spare5 typedef spare4 typedef;
                  spare3 typedef spare2 typedef spare1 typedef;};
        struct
      } criticalExtensionsFuture{};
    };
    ;
    struct RRCConnectionSetupr8IEs {
      RadioResourceConfigDedicated radioResourceConfigDedicated;
      RRCConnectionSetupv8a0IEs nonCriticalExtension;
    };
    ;
    RRCConnectionSetupv8a0IEs struct {
      char T string lateNonCriticalExtension;
      struct
    } nonCriticalExtension{};
    ;
    ;
    struct RRCConnectionSetupComplete {
      RRCTransactionIdentifier rrcTransactionIdentifier;
      enum criticalExtensions {
        enum c1{RRCConnectionSetupCompleter8IEs rrcConnectionSetupCompleter8;
                spare3 typedef spare2 typedef spare1 typedef;};
      struct
    } criticalExtensionsFuture{};
  };
  ;
  RRCConnectionSetupCompleter8IEs struct {
    int selectedPLMNIdentity;
    RegisteredMME registeredMME;
    DedicatedInfoNAS dedicatedInfoNAS;
    RRCConnectionSetupCompletev8a0IEs nonCriticalExtension;
  };
  ;
  RRCConnectionSetupCompletev8a0IEs struct {
    char T string lateNonCriticalExtension;
    RRCConnectionSetupCompletev1020IEs nonCriticalExtension;
  };
  ;
  RRCConnectionSetupCompletev1020IEs struct { , enum mapped } gummeiTyper10 {
    , enum true
  }
  rlfInfoAvailabler10 { , enum true }
  logMeasAvailabler10 { , enum notRequired }
  rnSubframeConfigReqr10 {
    RRCConnectionSetupCompletev1130IEs nonCriticalExtension;
  };
  ;
  RRCConnectionSetupCompletev1130IEs struct {
    , enum true
  } connEstFailInfoAvailabler11 {
    RRCConnectionSetupCompletev1250IEs nonCriticalExtension;
  };
  ;
  RRCConnectionSetupCompletev1250IEs struct { , enum spare } mobilityState {

    medium, enum true
  }
  mobilityHistoryAvail { , enum true }
  logMeasAvailableMBSFN { struct }
  nonCriticalExtension{};
  ;
  struct RegisteredMME {
    PLMNIdentity plmnIdentity;
    std::bitset<16> mmegi;
    MMEC mmec;
  };
  ;
  ;
  struct SCGFailureInformation {
    enum criticalExtensions {
      enum c1{SCGFailureInformation // IEs    scgFailureInformation;
              spare3 typedef spare2 typedef spare1 typedef;};
    struct
  } criticalExtensionsFuture{};
};
;
struct SCGFailureInformation // IEs    {
    FailureReportSCG failureReportSCG;
struct
}
nonCriticalExtension{};
;
struct FailureReportSCG {
  enum failureType { rlcMaxNumRetx scgChangeFailure };
  MeasResultServFreqListr10 measResultServFreqList;
  MeasResultList2EUTRAr9 measResultNeighCells;

  ;

  ;
  MeasResultServFreqListExt measResultServFreqListExt;

  ;
};
;
;
struct SCPTMConfiguration {
  SCMTCHInfoList scmtchInfoList;
  SCPTMNeighbourCellList scptmNeighbourCellList;

  ;
};
;
;
struct SecurityModeCommand {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{SecurityModeCommandr8IEs securityModeCommandr8;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct SecurityModeCommandr8IEs {
  SecurityConfigSMC securityConfigSMC;
  SecurityModeCommandv8a0IEs nonCriticalExtension;
};
;
SecurityModeCommandv8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
struct SecurityConfigSMC {
  SecurityAlgorithmConfig securityAlgorithmConfig;

  ;
};
;
;
struct SecurityModeComplete {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    SecurityModeCompleter8IEs securityModeCompleter8;
    struct
  }
  criticalExtensionsFuture{};
};
;
struct SecurityModeCompleter8IEs {
  SecurityModeCompletev8a0IEs nonCriticalExtension;
};
;
SecurityModeCompletev8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
struct SecurityModeFailure {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    SecurityModeFailurer8IEs securityModeFailurer8;
    struct
  }
  criticalExtensionsFuture{};
};
;
struct SecurityModeFailurer8IEs {
  SecurityModeFailurev8a0IEs nonCriticalExtension;
};
;
SecurityModeFailurev8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
struct SidelinkUEInformation {
  enum criticalExtensions {
    enum c1{SidelinkUEInformation // IEs   sidelinkUEInformation;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct SidelinkUEInformation // IEs    {
    ARFCNValueEUTRAr9 commRxInterestedFreq;
SLCommTxResourceReq commTxResourceReq;
, enum true
}
discRxInterest {
  int discTxResourceReq;
  char T string lateNonCriticalExtension;
  SidelinkUEInformationv13x0IEs nonCriticalExtension;
};
;
struct SidelinkUEInformationv13x0IEs {
  SLCommTxResourceReqUC commTxResourceReq121;
  struct commTxResourceInfoReqRelay {
    SLCommTxResourceReqUC commTxResourceReqRelay;
    enum remoteUE
  } ueType{};
  struct discTxResourceReqv13x0 {
    int carrierFreqDiscTx;
    SLDiscTxResourceReqPerFreqList discTxResourceReqAddFreq;
  };
  SLDiscTxResourceReq discTxResourceReqPS;
  SLGapRequest discRxGapReq;
  SLGapRequest discTxGapReq;
  SLSysInfoReportList discSysInfoReportList;
  struct
} nonCriticalExtension{};
;
struct SLCommTxResourceReq {
  ARFCNValueEUTRAr9 carrierFreq;
  SLDestinationInfoList destinationInfoList;
};
;
struct SLCommTxResourceReqUC {
  ARFCNValueEUTRAr9 carrierFreq;
  SLDestinationInfoListUC destinationInfoListUC;
};
;
SEQU SLDiscTxResourceReqPerFreqList;
;
struct SLDiscTxResourceReq {
  ARFCNValueEUTRAr9 carrierFreq;
  int discTxResourceReq;
};
;
SEQU SLDestinationInfoList;
;
std::bitset<24> SLDestinationIdentity;
;
SLDestinationInfoList SLDestinationInfoListUC;
;
SEQU SLSysInfoReportList;
;
;
struct SystemInformation {
  enum criticalExtensions { SystemInformationr8IEs systemInformationr8; struct }
  criticalExtensionsFuture{};
};
struct SystemInformationr8IEs {
  SEQU sibTypeAndInfo;
  SystemInformationBlockType2 sib2;
  SystemInformationBlockType3 sib3;
  SystemInformationBlockType4 sib4;
  SystemInformationBlockType5 sib5;
  SystemInformationBlockType6 sib6;
  SystemInformationBlockType7 sib7;
  SystemInformationBlockType8 sib8;
  SystemInformationBlockType9 sib9;
  SystemInformationBlockType10 sib10;
  SystemInformationBlockType11 sib11;

  ;
  SystemInformationBlockType12r9 sib12v920;
  SystemInformationBlockType13r9 sib13v920;
  SystemInformationBlockType14r11 sib14v1130;
  SystemInformationBlockType15r11 sib15v1130;
  SystemInformationBlockType16r11 sib16v1130;
  SystemInformationBlockType17 sib17v1250;
  SystemInformationBlockType18 sib18v1250;
  SystemInformationBlockType19 sib19v1250;
  SystemInformationBlockType20 sib20v13x0;
};
SystemInformationv8a0IEs nonCriticalExtension;
}
;
;
SystemInformationv8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
struct SystemInformationBlockType1 {
  struct cellAccessRelatedInfo {
    PLMNIdentityList plmnIdentityList;
    TrackingAreaCode trackingAreaCode;
    CellIdentity cellIdentity;
    enum cellBarred {
      enum intraFreqReselection{
          bool csgIndication;
          //  Need OR    CSGIdentity      csgIdentity;
      };
    struct cellSelectionInfo {
      QRxLevMin qRxLevMin;
      //        int      qRxLevMinOffset;
    };
    //             PMax        pMax;
    FreqBandIndicator freqBandIndicator;
    SchedulingInfoList schedulingInfoList;
    //  Cond TDD       TDDConfig       tddConfig;
    enum siWindowLength { ms1 ms2 ms5 ms10 ms15 ms20; ms40 };
    int systemInfoValueTag;
    SystemInformationBlockType1v890IEs nonCriticalExtension;
  };
  ;
  struct SystemInformationBlockType1v890IEs {
    char lateNonCriticalExtension;
    SystemInformationBlockType1v920IEs nonCriticalExtension;
  };
  ;
  //  Late non critical extensions;
  struct SystemInformationBlockType1v8h0IEs {
    //  Need OR    MultiBandInfoList     multiBandInfoList;
    SystemInformationBlockType1v9e0IEs nonCriticalExtension;
  };
  ;
  SystemInformationBlockType1v9e0IEs struct {
    //  Cond FBImax    FreqBandIndicatorv9e0    freqBandIndicatorv9e0;
    //  Cond mFBImax    MultiBandInfoListv9e0    multiBandInfoListv9e0;
    SystemInformationBlockType1v10j0IEs nonCriticalExtension;
  };
  ;
  SystemInformationBlockType1v10j0IEs struct {
    //  Need OR      NSPmaxListr10     freqBandInfor10;
    //  Need OR    MultiBandInfoListv10j0    multiBandInfoListv10j0;
    struct
  } nonCriticalExtension{};
  ;
  //  Regular non critical extensions;
  struct SystemInformationBlockType1v920IEs {
    //  Need OR ,    enum  true}    imsEmergencySupportr9   {
    //  Cond RSRQ    CellSelectionInfov920    cellSelectionInfov920;
    SystemInformationBlockType1v1130IEs nonCriticalExtension;
  };
  ;
  struct SystemInformationBlockType1v1130IEs {
    //  Cond TDDOR     TDDConfigv1130    tddConfigv1130;
    //  Cond WBRSRQ    CellSelectionInfov1130   cellSelectionInfov1130;
    SystemInformationBlockType1v1250IEs nonCriticalExtension;
  };
  ;
  struct SystemInformationBlockType1v1250IEs {
    struct cellAccessRelatedInfov1250 {
      //       enum  true}      category0Allowed    {
    };
    //  Cond RSRQ2    CellSelectionInfov1250     cellSelectionInfov1250;
    //  Cond mFBI ,    enum  true}   freqBandIndicatorPriority   {
    SystemInformationBlockType1v13xyIEs nonCriticalExtension;
  };
  ;
  struct SystemInformationBlockType1v13xyIEs {
    std::bitset<10> hyperSFN;
    , enum true
  } eDRXAllowed {
    struct
  }
  nonCriticalExtension{};
  ;
  SEQU PLMNIdentityList;
  ;
  struct PLMNIdentityInfo {
    PLMNIdentity plmnIdentity;
    enum notReserved
  } cellReservedForOperatorUse{};
  ;
  Sche;
  ;
  struct SchedulingInfo {
    enum siPeriodicity { rf8 rf16 rf32 rf64 rf128 rf256 rf512 };
    SIBMappingInfo sibMappingInfo;
  };
  ;
  SIB;
  ;
  enum SIBType {
    sibType3 sibType4 sibType5 sibType6;
    sibType7 sibType8 sibType9 sibType10;
    sibType11 sibType12v920 sibType13v920;
    sibType14v1130 sibType15v1130;
    sibType16v1130 sibType17v1250 sibType18v1250;

    sibType19v1250 sibType20v13xy
  };
  ;
  struct CellSelectionInfov920 {
    QQualMinr9 qQualMinr9;
    //           int      qQualMinOffsetr9;
  };
  ;
  struct CellSelectionInfov1130 {
    QQualMinr9 qQualMinWBr11;
  };
  ;
  struct CellSelectionInfov1250 {
    QQualMinr9 qQualMinRSRQOnAllSymbols;
  };
  ;
  ;
  struct UEAssistanceInformationr11 {
    enum criticalExtensions {
      enum c1{UEAssistanceInformationr11IEs ueAssistanceInformationr11;
              spare3 typedef spare2 typedef spare1 typedef;};
    struct
  } criticalExtensionsFuture{};
};
;
struct UEAssistanceInformationr11IEs {
  , lowPowerConsumption
} enum powerPrefIndicationr11 { char T string lateNonCriticalExtension; struct }
nonCriticalExtension{};
;
;
struct UECapabilityEnquiry {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{UECapabilityEnquiryr8IEs ueCapabilityEnquiryr8;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct UECapabilityEnquiryr8IEs {
  UECapabilityRequest ueCapabilityRequest;
  UECapabilityEnquiryv8a0IEs nonCriticalExtension;
};
;
UECapabilityEnquiryv8a0IEs struct {
  char T string lateNonCriticalExtension;
  UECapabilityEnquiryv1180IEs nonCriticalExtension;
};
;
UECapabilityEnquiryv1180IEs struct {
  SEQU requestedFrequencyBandsr11;
  UECapabilityEnquiryv13xyIEs nonCriticalExtension;
};
;
UECapabilityEnquiryv13xyIEs struct { , enum true } requestReducedFormat {
  , enum true
}
skipFallbackCombinations {
  int requestedMaxCCsDL;
  int requestedMaxCCsUL;
  struct
}
nonCriticalExtension{};
;
SEQU UECapabilityRequest;
;
;
struct UECapabilityInformation {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{UECapabilityInformationr8IEs ueCapabilityInformationr8;
            spare7 typedef; spare6 typedef spare5 typedef spare4 typedef;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct UECapabilityInformationr8IEs {
  UECapabilityRATContainerList ueCapabilityRATContainerList;
  UECapabilityInformationv8a0IEs nonCriticalExtension;
};
;
UECapabilityInformationv8a0IEs struct {
  char T string lateNonCriticalExtension;
  UECapabilityInformationv1250IEs nonCriticalExtension;
};
;
UECapabilityInformationv1250IEs struct {
  UERadioPagingInfo ueRadioPagingInfo;
  struct
} nonCriticalExtension{};
;
;
struct UEInformationRequestr9 {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{UEInformationRequestr9IEs ueInformationRequestr9;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct UEInformationRequestr9IEs {
  bool rachReportReqr9;
  bool rlfReportReqr9;
  UEInformationRequestv930IEs nonCriticalExtension;
};
;
UEInformationRequestv930IEs struct {
  char T string lateNonCriticalExtension;
  UEInformationRequestv1020IEs nonCriticalExtension;
};
;
struct UEInformationRequestv1020IEs {
  //    ,      enum  true}    logMeasReportReqr10   {
  UEInformationRequestv1130IEs nonCriticalExtension;
};
;
UEInformationRequestv1130IEs struct {
  //    ,      enum  true}   connEstFailReportReqr11   {
  UEInformationRequestv1250IEs nonCriticalExtension;
};
;
UEInformationRequestv1250IEs struct {
  //    ,      enum  true}  mobilityHistoryReportReq   {
  struct
} nonCriticalExtension{};
;
;
struct UEInformationResponser9 {
  RRCTransactionIdentifier rrcTransactionIdentifier;
  enum criticalExtensions {
    enum c1{UEInformationResponser9IEs ueInformationResponser9;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct UEInformationResponser9IEs {
  struct rachReportr9 {
    NumberOfPreamblesSentr11 numberOfPreamblesSentr9;
    bool contentionDetectedr9;
  };
  RLFReportr9 rlfReportr9;
  UEInformationResponsev930IEs nonCriticalExtension;
};
;
//  Late non critical extensions;
UEInformationResponsev9e0IEs struct {
  RLFReportv9e0 rlfReportv9e0;
  struct
} nonCriticalExtension{};
;
//  Regular non critical extensions;
struct UEInformationResponsev930IEs {
  char lateNonCriticalExtension;
  UEInformationResponsev1020IEs nonCriticalExtension;
};
;
UEInformationResponsev1020IEs struct {
  LogMeasReportr10 logMeasReportr10;
  UEInformationResponsev1130IEs nonCriticalExtension;
};
;
UEInformationResponsev1130IEs struct {
  ConnEstFailReportr11 connEstFailReportr11;
  UEInformationResponsev1250IEs nonCriticalExtension;
};
;
UEInformationResponsev1250IEs struct {
  MobilityHistoryReport mobilityHistoryReport;
  struct
} nonCriticalExtension{};
;
struct RLFReportr9 {
  struct measResultLastServCellr9 {
    RSRPRange rsrpResultr9;
    RSRQRange rsrqResultr9;
  };
  struct measResultNeighCellsr9 {
    MeasResultList2EUTRAr9 measResultListEUTRAr9;
    MeasResultList2UTRAr9 measResultListUTRAr9;
    MeasResultListGERAN measResultListGERANr9;
    MeasResultList2CDMA2000r9 measResultsCDMA2000r9;
  };

  ;
  LocationInfor10 locationInfor10;
  enum failedPCellIdr10 {
    CellGlobalIdEUTRA cellGlobalIdr10; struct pciarfcnr10{
        PhysCellId physCellIdr10; ARFCNValueEUTRA carrierFreqr10;};
};
CellGlobalIdEUTRA reestablishmentCellIdr10;
int timeConnFailurer10;
, enum hof
}
connectionFailureTyper10 {
  CellGlobalIdEUTRA previousPCellIdr10;

  ;
  struct failedPCellIdv1090 {
    ARFCNValueEUTRAv9e0 carrierFreqv1090;
  };

  ;
  struct basicFieldsr11 {
    CRNTI cRNTIr11;
    enum rlfCauser11 {
      t310Expiry randomAccessProblem;
      rlcMaxNumRetx t312Expiry
    };
    TimeSinceFailurer11 timeSinceFailurer11;
  };
  struct previousUTRACellIdr11 {
    ARFCNValueUTRA carrierFreqr11;
    enum physCellIdr11 { PhysCellIdUTRAFDD fddr11; PhysCellIdUTRATDD tddr11; };
    CellGlobalIdUTRA cellGlobalIdr11;
  };
  struct selectedUTRACellIdr11 {
    ARFCNValueUTRA carrierFreqr11;
    enum physCellIdr11 { PhysCellIdUTRAFDD fddr11; PhysCellIdUTRATDD tddr11; };
  };

  ;
  struct failedPCellIdv1250 {
    TrackingAreaCode tacFailedPCell;
  };
  RSRQRangev1250 measResultLastServCellv1250;
  RSRQType lastServCellRSRQType;
  MeasResultList2EUTRAv1250 measResultListEUTRAv1250;

  ;
  enum qci1
}
droppedQCI { ; };
;
struct RLFReportv9e0 {
  MeasResultList2EUTRAv9e0 measResultListEUTRAv9e0;
};
;
SEQU MeasResultList2EUTRAr9;
;
SEQU MeasResultList2EUTRAv9e0;
;
SEQU MeasResultList2EUTRAv1250;
;
struct MeasResult2EUTRAr9 {
  ARFCNValueEUTRA carrierFreqr9;
  MeasResultListEUTRA measResultListr9;
};
;
struct MeasResult2EUTRAv9e0 {
  ARFCNValueEUTRAv9e0 carrierFreqv9e0;
};
;
struct MeasResult2EUTRAv1250 {
  RSRQType rsrqType;
};
;
SEQU MeasResultList2UTRAr9;
;
struct MeasResult2UTRAr9 {
  ARFCNValueUTRA carrierFreqr9;
  MeasResultListUTRA measResultListr9;
};
;
SEQU MeasResultList2CDMA2000r9;
;
struct MeasResult2CDMA2000r9 {
  CarrierFreqCDMA2000 carrierFreqr9;
  MeasResultsCDMA2000 measResultListr9;
};
;
struct LogMeasReportr10 {
  AbsoluteTimeInfor10 absoluteTimeStampr10;
  TraceReferencer10 traceReferencer10;
  char traceRecordingSessionRefr10;
  char tceIdr10;
  LogMeasInfoListr10 logMeasInfoListr10;
  , enum true
} logMeasAvailabler10 {

  ;
};
;
SEQU LogMeasInfoListr10;
;
struct LogMeasInfor10 {
  LocationInfor10 locationInfor10;
  int relativeTimeStampr10;
  CellGlobalIdEUTRA servCellIdentityr10;
  struct measResultServCellr10 {
    RSRPRange rsrpResultr10;
    RSRQRange rsrqResultr10;
  };
  struct measResultNeighCellsr10 {
    MeasResultList2EUTRAr9 measResultListEUTRAr10;
    MeasResultList2UTRAr9 measResultListUTRAr10;
    MeasResultList2GERANr10 measResultListGERANr10;
    MeasResultList2CDMA2000r9 measResultListCDMA2000r10;
  };

  ;
  MeasResultList2EUTRAv9e0 measResultListEUTRAv1090;

  ;
  MeasResultListMBSFN measResultListMBSFN;
  RSRQRangev1250 measResultServCellv1250;
  RSRQType servCellRSRQType;
  MeasResultList2EUTRAv1250 measResultListEUTRAv1250;

  ;
  enum true
} inDeviceCoexDetected {

  ;
};
;
SEQU MeasResultListMBSFN;
;
struct MeasResultMBSFN {
  struct mbsfnArea {
    MBSFNAreaId mbsfnAreaId;
    ARFCNValueEUTRAr9 carrierFreq;
  };
  RSRPRange rsrpResultMBSFN;
  MBSFNRSRQRange rsrqResultMBSFN;
  BLERResult signallingBLERResult;
  DataBLERMCHResultList dataBLERMCHResultList;

  ;
};
;
SEQU DataBLERMCHResultList;
;
struct DataBLERMCHResult {
  int mchIndex;
  BLERResult dataBLERResult;
};
;
struct BLERResult {
  BLERRange bler;
  struct blocksReceived {
    std::bitset<3> n;
    std::bitset<8> m;
  };
};
;
int BLERRange;
;
SEQU MeasResultList2GERANr10;
;
struct ConnEstFailReportr11 {
  CellGlobalIdEUTRA failedCellIdr11;
  LocationInfor10 locationInfor11;
  struct measResultFailedCellr11 {
    RSRPRange rsrpResultr11;
    RSRQRange rsrqResultr11;
  };
  struct measResultNeighCellsr11 {
    MeasResultList2EUTRAr9 measResultListEUTRAr11;
    MeasResultList2UTRAr9 measResultListUTRAr11;
    MeasResultListGERAN measResultListGERANr11;
    MeasResultList2CDMA2000r9 measResultsCDMA2000r11;
  };
  NumberOfPreamblesSentr11 numberOfPreamblesSentr11;
  bool contentionDetectedr11;
  bool maxTxPowerReachedr11;
  TimeSinceFailurer11 timeSinceFailurer11;
  MeasResultList2EUTRAv9e0 measResultListEUTRAv1130;

  ;
  RSRQRangev1250 measResultFailedCellv1250;
  RSRQType failedCellRSRQType;
  MeasResultList2EUTRAv1250 measResultListEUTRAv1250;

  ;
};
;
int NumberOfPreamblesSentr11;
;
int TimeSinceFailurer11;
;
VisitedCellInfoList MobilityHistoryReport;
;
;
struct ULHandoverPreparationTransfer {
  enum criticalExtensions {
    enum c1{ULHandoverPreparationTransferr8IEs ulHandoverPreparationTransferr8;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
ULHandoverPreparationTransferr8IEs struct {
  CDMA2000Type cdma2000Type;
  std::bitset<56> meid;
  DedicatedInfoCDMA2000 dedicatedInfo;
  ULHandoverPreparationTransferv8a0IEs nonCriticalExtension;
};
;
ULHandoverPreparationTransferv8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
struct ULInformationTransfer {
  enum criticalExtensions {
    enum c1{ULInformationTransferr8IEs ulInformationTransferr8;
            spare3 typedef spare2 typedef spare1 typedef;};
  struct
} criticalExtensionsFuture{};
}
;
;
struct ULInformationTransferr8IEs {
  enum dedicatedInfoType {
    DedicatedInfoNAS dedicatedInfoNAS;
    DedicatedInfoCDMA2000 dedicatedInfoCDMA20001XRTT;
    DedicatedInfoCDMA2000 dedicatedInfoCDMA2000HRPD;
  };
  ULInformationTransferv8a0IEs nonCriticalExtension;
};
;
ULInformationTransferv8a0IEs struct {
  char T string lateNonCriticalExtension;
  struct
} nonCriticalExtension{};
;
;
struct SystemInformationBlockType2 {
  struct acBarringInfo {
    bool acBarringForEmergency;
    //         ACBarringConfig   acBarringForMOSignalling;
    //        ACBarringConfig    acBarringForMOData;
    //                       };
    RadioResourceConfigCommonSIB radioResourceConfigCommon;
    UETimersAndConstants ueTimersAndConstants;
    struct freqInfo {
      //         ARFCNValueEUTRA      ulCarrierFreq;
      enum n100
    } ulBandwidth {

      n15, n25, n50
          // ;
          AdditionalSpectrumEmission additionalSpectrumEmission;
    };
    //  Need OR     MBSFNSubframeConfigList   mbsfnSubframeConfigList;
    TimeAlignmentTimer timeAlignmentTimerCommon;

    ;
    char lateNonCriticalExtension;
    //         ACBarringConfig  ssacBarringForMMTELVoicer9;
    //        ACBarringConfig  ssacBarringForMMTELVideor9;

    ;
    //       ACBarringConfig    acBarringForCSFBr10;

    ;
    //    ,    enum  true}  acBarringSkipForMMTELVoice
    {
      //    ,    enum  true}  acBarringSkipForMMTELVideo    {
      //    ,    enum  true}   acBarringSkipForSMS    {
      //     ACBarringPerPLMNList   acBarringPerPLMNList;

      ;
      //        enum  true}  voiceServiceCauseIndication
      {

        ;
        //       ACDCBarringForCommon   acdcBarringForCommon;
        //     ACDCBarringPerPLMNList  acdcBarringPerPLMNList;

        ;
      };
      ;
      struct SystemInformationBlockType2v8h0IEs {
        //  Need OR   SEQU    multiBandInfoList;
        SystemInformationBlockType2v9e0IEs nonCriticalExtension;
      };
      ;
      SystemInformationBlockType2v9e0IEs struct {
        //  Cond ulFreqMax    ARFCNValueEUTRAv9e0     ulCarrierFreqv9e0;
        struct
      } nonCriticalExtension{};
      ;
      struct ACBarringConfig {
        enum acBarringFactor {
          p00 p05 p10 p15 p20 p25 p30 p40;
          p50 p60 p70 p75 p80 p85 p90 p95
        };
        enum acBarringTime {

          s8,
          s16,
          s32,
          s64,
          s128,
          s256 std::bitset<5> acBarringForSpecialAC;
        };
        ;
        SEQU MBSFNSubframeConfigList;
        ;
        SEQU ACBarringPerPLMNList;
        ;
        struct ACBarringPerPLMN {
          int plmnIdentityIndex;
          struct acBarringInfo {
            bool acBarringForEmergency;
            //      ACBarringConfig  acBarringForMOSignalling;
            //     ACBarringConfig   acBarringForMOData;
            //                    };
            //    ,   enum  true}  acBarringSkipForMMTELVoice   {
            //    ,   enum  true}  acBarringSkipForMMTELVideo   {
            //    ,   enum  true}   acBarringSkipForSMS   {
            //       ACBarringConfig    acBarringForCSFB;
            //       ACBarringConfig  ssacBarringForMMTELVoice;
            //      ACBarringConfig  ssacBarringForMMTELVideo;
          };
          ;
          struct ACDCBarringForCommon {
            bool acdcHPLMNonly;
            BarringPerACDCCategoryList barringPerACDCCategoryList;
          };
          ;
          SEQU ACDCBarringPerPLMNList;
          ;
          struct ACDCBarringPerPLMN {
            int plmnIdentityIndex;
            bool acdcHPLMNonly;
            BarringPerACDCCategoryList barringPerACDCCategoryList;
          };
          ;
          Barr;
          ;
          BarringPerACDCCategory struct {
            int acdcCatValue;
            struct acdcBarringConfig {
              enum acBarringFactor {
                p00 p05 p10 p15 p20 p25 p30 p40;
                p50 p60 p70 p75 p80 p85 p90 p95
              };
              enum s512
            } acBarringTime{

                s8, s16, s32, s64, s128};
          };
          ;
          ;
          struct SystemInformationBlockType3 {
            struct cellReselectionInfoCommon {
              enum qHyst {
                dB0 dB1 dB2 dB3 dB4 dB5 dB6 dB8 dB10;
                dB12 dB14 dB16 dB18 dB20 dB22 dB24
              };
              struct speedStateReselectionPars {
                MobilityStateParameters mobilityStateParameters;
                struct qHystSF {
                  enum sfMedium { dB6 dB4 dB2 dB0 };
                  enum sfHigh { dB6 dB4 dB2 dB0 };
                };
                //                     };
              };
              struct cellReselectionServingFreqInfo {
                //        ReselectionThreshold     sNonIntraSearch;
                ReselectionThreshold threshServingLow;
                CellReselectionPriority cellReselectionPriority;
              };
              struct intraFreqCellReselectionInfo {
                QRxLevMin qRxLevMin;
                //            PMax        pMax;
                //        ReselectionThreshold      sIntraSearch;
                //        AllowedMeasBandwidth    allowedMeasBandwidth;
                PresenceAntennaPort1 presenceAntennaPort1;
                NeighCellConfig neighCellConfig;
                TReselection tReselectionEUTRA;
                //       SpeedStateScaleFactors    tReselectionEUTRASF;
              };

              ;
              char lateNonCriticalExtension;
              struct sIntraSearchv920 {
                ReselectionThreshold sIntraSearchPr9;
                ReselectionThresholdQr9 sIntraSearchQr9;
                //                      };
                struct sNonIntraSearchv920 {
                  ReselectionThreshold sNonIntraSearchPr9;
                  ReselectionThresholdQr9 sNonIntraSearchQr9;
                  //                      };
                  //          QQualMinr9      qQualMinr9;
                  //      ReselectionThresholdQr9    threshServingLowQr9;

                  ;
                  //  Cond WBRSRQ     QQualMinr9      qQualMinWBr11;

                  ;
                  //  Cond RSRQ       QQualMinr9   qQualMinRSRQOnAllSymbols;

                  ;
                  //       cellReselectionServingFreqInfov13xy
                  //       CellReselectionServingFreqInfov13xy;
                  // Need OR RedistributionServingInfo
                  // redistributionServingInfo;

                  ;
                };
                ;
                struct RedistributionServingInfo {
                  int redistributionFactorServing;
                  //   ,     enum true}  redistributionFactorCell   {
                  enum t360 {

                    min8,
                    min16,
                    min32 spare3 spare2 spare1
                  };
                  //      enum  true}    redistrOnPagingOnly   {
                };
                ;
                struct CellReselectionServingFreqInfov13xy {
                  CellReselectionSubPriority cellReselectionSubPriority;
                };
                ;
                //  Late non critical extensions;
                SystemInformationBlockType3v10j0IEs struct {
                  //  Need OR      NSPmaxListr10     freqBandInfor10;
                  //  Need OR    MultiBandInfoListv10j0 multiBandInfoListv10j0;
                  struct
                } nonCriticalExtension{};
                ;
                ;
                struct SystemInformationBlockType4 {
                  //  Need OR    IntraFreqNeighCellList intraFreqNeighCellList;
                  //  Need OR      IntraFreqBlackCellList
                  //  intraFreqBlackCellList;
                  //  Cond CSG      PhysCellIdRange     csgPhysCellIdRange;

                  ;
                  char T string lateNonCriticalExtension;
                };
                ;
                SEQU IntraFreqNeighCellList;
                ;
                struct IntraFreqNeighCellInfo {
                  PhysCellId physCellId;
                  QOffsetRange qOffsetCell;

                  ;
                };
                ;
                SEQU IntraFreqBlackCellList;
                ;
                ;
                struct SystemInformationBlockType5 {
                  InterFreqCarrierFreqList interFreqCarrierFreqList;

                  ;
        (CON  char T  string     lateNonCriticalExtension;
	//  Need OR    InterFreqCarrierFreqListv1250 interFreqCarrierFreqListv1250;
	//  Need OR  InterFreqCarrierFreqListExt interFreqCarrierFreqListExt;
	 
;
	//  Need OR  InterFreqCarrierFreqListExtv1280 interFreqCarrierFreqListExtv1280;
	 
;
	//  Need OR    InterFreqCarrierFreqListv13xy  interFreqCarrierFreqListv13xy;
	//  Need OR  InterFreqCarrierFreqListExtv13xy interFreqCarrierFreqListExtv13xy;
	 
;
                };
                ;
                struct SystemInformationBlockType5v8h0IEs {
                  //         inte;
                  SystemInformationBlockType5v9e0IEs nonCriticalExtension;
                };
                ;
                struct SystemInformationBlockType5v9e0IEs {
                  //  Need OR      SEQU interFreqCarrierFreqListv9e0;
                  SystemInformationBlockType5v10j0IEs nonCriticalExtension;
                };
                ;
                struct SystemInformationBlockType5v10j0IEs {
                  //  Need OR      SEQU interFreqCarrierFreqListv10j0;
                  struct
                } nonCriticalExtension{};
                ;
                SEQU InterFreqCarrierFreqList;
                ;
                SEQU InterFreqCarrierFreqListv1250;
                ;
                SEQU InterFreqCarrierFreqListExt;
                ;
                SEQU InterFreqCarrierFreqListExtv1280;
                ;
                SEQU InterFreqCarrierFreqListv13xy;
                ;
                SEQU InterFreqCarrierFreqListExtv13xy;
                ;
                struct InterFreqCarrierFreqInfo {
                  ARFCNValueEUTRA dlCarrierFreq;
                  QRxLevMin qRxLevMin;
                  //             PMax        pMax;
                  TReselection tReselectionEUTRA;
                  //         SpeedStateScaleFactors    tReselectionEUTRASF;
                  ReselectionThreshold threshXHigh;
                  ReselectionThreshold threshXLow;
                  AllowedMeasBandwidth allowedMeasBandwidth;
                  PresenceAntennaPort1 presenceAntennaPort1;
                  //         CellReselectionPriority    cellReselectionPriority;
                  NeighCellConfig neighCellConfig;
                  DEFAULT dB0 QOffsetRange qOffsetFreq;
                  //  Need OR      InterFreqNeighCellList
                  //  interFreqNeighCellList;
                  //  Need OR      InterFreqBlackCellList
                  //  interFreqBlackCellList;

                  ;
                  //           QQualMinr9     qQualMinr9;
                  struct threshXQr9 {
                    ReselectionThresholdQr9 threshXHighQr9;
                    ReselectionThresholdQr9 threshXLowQr9;
                    //  Cond RSRQ                  };

                    ;
                    //  Cond WBRSRQ      QQualMinr9     qQualMinWBr11;

                    ;
                  };
                  ;
                  struct InterFreqCarrierFreqInfov8h0 {
                    //  Need OR     MultiBandInfoList     multiBandInfoList;
                  };
                  ;
                  struct InterFreqCarrierFreqInfov9e0 {
                    //  Cond dlFreqMax   ARFCNValueEUTRAv9e0 dlCarrierFreqv9e0;
                    //  Need OR  MultiBandInfoListv9e0    multiBandInfoListv9e0;
                  };
                  ;
                  struct InterFreqCarrierFreqInfov10j0 {
                    //  Need OR      NSPmaxListr10     freqBandInfor10;
                    //  Need OR   MultiBandInfoListv10j0 multiBandInfoListv10j0;
                  };
                  ;
                  struct InterFreqCarrierFreqInfov1250 {
                    //     ,   enum  true}  reducedMeasPerformance   {
                    //  Cond RSRQ2      QQualMinr9 qQualMinRSRQOnAllSymbols;
                  };
                  ;
                  struct InterFreqCarrierFreqInfo {
                    ARFCNValueEUTRAr9 dlCarrierFreq;
                    QRxLevMin qRxLevMin;
                    //             PMax       pMax;
                    TReselection tReselectionEUTRA;
                    //         SpeedStateScaleFactors   tReselectionEUTRASF;
                    ReselectionThreshold threshXHigh;
                    ReselectionThreshold threshXLow;
                    AllowedMeasBandwidth allowedMeasBandwidth;
                    PresenceAntennaPort1 presenceAntennaPort1;
                    //         CellReselectionPriority cellReselectionPriority;
                    NeighCellConfig neighCellConfig;
                    DEFAULT dB0 QOffsetRange qOffsetFreq;
                    //  Need OR      InterFreqNeighCellList
                    //  interFreqNeighCellList;
                    //  Need OR      InterFreqBlackCellList
                    //  interFreqBlackCellList;
                    //           QQualMinr9      qQualMin;
                    struct threshXQ {
                      ReselectionThresholdQr9 threshXHighQ;
                      ReselectionThresholdQr9 threshXLowQ;
                      //  Cond RSRQ                   };
                      //  Cond WBRSRQ       QQualMinr9      qQualMinWB;
                      //  Need OR     MultiBandInfoListr11    multiBandInfoList;
                      //    ,     enum  true}   reducedMeasPerformance   {
                      //  Cond RSRQ2       QQualMinr9  qQualMinRSRQOnAllSymbols;

                      ;
                    };
                    ;
                    struct InterFreqCarrierFreqInfov13xy {
                      //        CellReselectionSubPriority
                      //        cellReselectionSubPriority;
                      //    RedistributionInterFreqInfo
                      //    redistributionInterFreqInfo;
                    };
                    ;
                    SEQU InterFreqNeighCellList;
                    ;
                    struct InterFreqNeighCellInfo {
                      PhysCellId physCellId;
                      QOffsetRange qOffsetCell;
                    };
                    ;
                    SEQU InterFreqBlackCellList;
                    ;
                    struct RedistributionInterFreqInfo {
                      //     RedistributionFactor   redistributionFactorFreq;
                      //     RedistributionNeighCellList
                      //     redistributionNeighCellList;
                    };
                    ;
                    SEQU RedistributionNeighCellList;
                    ;
                    struct RedistributionNeighCell {
                      PhysCellId physCellId;
                      RedistributionFactor redistributionFactorCell;
                    };
                    ;
                    int RedistributionFactor;
                    ;
                    ;
                    struct SystemInformationBlockType6 {
                      //  Need OR      CarrierFreqListUTRAFDD
                      //  carrierFreqListUTRAFDD;
                      //  Need OR      CarrierFreqListUTRATDD
                      //  carrierFreqListUTRATDD;
                      TReselection tReselectionUTRA;
                      //         SpeedStateScaleFactors    tReselectionUTRASF;

                      ;
        (CON  char T  string    lateNonCriticalExtension;
	carr  
;
	//  Cond UTRAFDD    CarrierFreqInfoUTRAv1250;
	carr   ;
	//  Cond UTRATDD    CarrierFreqInfoUTRAv1250;
	//  Cond UTRAFDD CarrierFreqListUTRAFDDExt   carrierFreqListUTRAFDDExt;
	//  Cond UTRATDD  CarrierFreqListUTRATDDExt  carrierFreqListUTRATDDExt;
	 
;
                    };
                    ;
                    struct SystemInformationBlockType6v8h0IEs {
                      //  Cond UTRAFDD carr;
                      nonCriticalExtension;
                      struct
                    } {};
                    ;
                    struct CarrierFreqInfoUTRAv1250 {
                      //        enum  true}  reducedMeasPerformance   {
                    };
                    ;
                    SEQU CarrierFreqListUTRAFDD;
                    ;
                    struct CarrierFreqUTRAFDD {
                      ARFCNValueUTRA carrierFreq;
                      //         CellReselectionPriority
                      //         cellReselectionPriority;
                      ReselectionThreshold threshXHigh;
                      ReselectionThreshold threshXLow;
                      int qRxLevMin;
                      int pMaxUTRA;
                      int qQualMin;

                      ;
                      struct threshXQr9 {
                        ReselectionThresholdQr9 threshXHighQr9;
                        ReselectionThresholdQr9 threshXLowQr9;
                        //  Cond RSRQ                  };

                        ;
                      };
                      ;
                      struct CarrierFreqInfoUTRAFDDv8h0 {
                        //  Need OR     SEQU     multiBandInfoList;
                      };
                      ;
                      SEQU CarrierFreqListUTRAFDDExt;
                      CarrierFreqUTRAFDDExt;
                      ;
                      struct CarrierFreqUTRAFDDExt {
                        ARFCNValueUTRA carrierFreq;
                        //        CellReselectionPriority
                        //        cellReselectionPriority;
                        ReselectionThreshold threshXHigh;
                        ReselectionThreshold threshXLow;
                        int qRxLevMin;
                        int pMaxUTRA;
                        int qQualMin;
                        struct threshXQ {
                          ReselectionThresholdQr9 threshXHighQ;
                          ReselectionThresholdQr9 threshXLowQ;
                          //  Cond RSRQ                   };
                          //  Need OR      SEQU    multiBandInfoList;
                          //    ,     enum  true}   reducedMeasPerformance   {

                          ;
                        };
                        ;
                        SEQU CarrierFreqListUTRATDD;
                        ;
                        struct CarrierFreqUTRATDD {
                          ARFCNValueUTRA carrierFreq;
                          //         CellReselectionPriority
                          //         cellReselectionPriority;
                          ReselectionThreshold threshXHigh;
                          ReselectionThreshold threshXLow;
                          int qRxLevMin;
                          int pMaxUTRA;

                          ;
                        };
                        ;
                        SEQU CarrierFreqListUTRATDDExt;
                        CarrierFreqUTRATDD;
                        ;
                        struct CarrierFreqUTRATDD {
                          ARFCNValueUTRA carrierFreq;
                          //         CellReselectionPriority
                          //         cellReselectionPriority;
                          ReselectionThreshold threshXHigh;
                          ReselectionThreshold threshXLow;
                          int qRxLevMin;
                          int pMaxUTRA;
                          //    ,     enum  true}   reducedMeasPerformance   {

                          ;
                        };
                        ;
                        int FreqBandIndicatorUTRAFDD;
                        ;
                        ;
                        struct SystemInformationBlockType7 {
                          TReselection tReselectionGERAN;
                          //  Need OR      SpeedStateScaleFactors
                          //  tReselectionGERANSF;
                          //  Need OR     CarrierFreqsInfoListGERAN
                          //  carrierFreqsInfoList;

                          ;
                          char T string lateNonCriticalExtension;
                        };
                        ;
                        SEQU CarrierFreqsInfoListGERAN;
                        ;
                        struct CarrierFreqsInfoGERAN {
                          CarrierFreqsGERAN carrierFreqs;
                          struct commonInfo {
                            //        CellReselectionPriority
                            //        cellReselectionPriority;
                            std::bitset<8> nccPermitted;
                            int qRxLevMin;
                            //           int        pMaxGERAN;
                            ReselectionThreshold threshXHigh;
                            ReselectionThreshold threshXLow;
                          };

                          ;
                        };
                        ;
                        ;
                        struct SystemInformationBlockType8 {
                          //  Need OR      SystemTimeInfoCDMA2000
                          //  systemTimeInfo;
                          //  Need OR         int      searchWindowSize;
                          struct parametersHRPD {
                            PreRegistrationInfoHRPD preRegistrationInfoHRPD;
                            //  Need OR CellReselectionParametersCDMA2000
                            //  cellReselectionParametersHRPD;
                            //  Need OR                    };
                            struct parameters1XRTT {
                              //       CSFBRegistrationParam1XRTT
                              //       csfbRegistrationParam1XRTT;
                              //  Need OR     std::bitset<42>
                              //  longCodeState1XRTT;
                              //  Need OR CellReselectionParametersCDMA2000
                              //  cellReselectionParameters1XRTT;
                              //  Need OR                    };

                              ;
                              char T string lateNonCriticalExtension;
                              //  Need OR          bool
                              //  csfbSupportForDualRxUEsr9;
                              //  Cond NCLHRPD
                              //  CellReselectionParametersCDMA2000v920
                              //  cellReselectionParametersHRPDv920;
                              //  Cond NCL1XRTT
                              //  CellReselectionParametersCDMA2000v920
                              //  cellReselectionParameters1XRTTv920;
                              //  Cond REG1XRTT
                              //  CSFBRegistrationParam1XRTTv920
                              //  csfbRegistrationParam1XRTTv920;
                              //  Cond REG1XRTT  ACBarringConfig1XRTTr9
                              //  acBarringConfig1XRTTr9;

                              ;
                              //  Cond REG1XRTT     enum  true}
                              //  csfbDualRxTxSupportr10
                              {

                                ;
                                //  Need OR   SIB8PerPLMNListr11
                                //  sib8PerPLMNListr11;

                                ;
                              };
                              ;
                              CellReselectionParametersCDMA2000 struct {
                                BandClassListCDMA2000 bandClassList;
                                NeighCellListCDMA2000 neighCellList;
                                TReselection tReselectionCDMA2000;
                                //        SpeedStateScaleFactors
                                //        tReselectionCDMA2000SF;
                              };
                              ;
                              CellReselectionParametersCDMA2000r11 struct {
                                BandClassListCDMA2000 bandClassList;
                                SEQU neighCellListr11;
                                TReselection tReselectionCDMA2000;
                                //        SpeedStateScaleFactors
                                //        tReselectionCDMA2000SF;
                              };
                              ;
                              CellReselectionParametersCDMA2000v920 struct {
                                NeighCellListCDMA2000v920 neighCellListv920;
                              };
                              ;
                              SEQU NeighCellListCDMA2000;
                              ;
                              struct NeighCellCDMA2000 {
                                BandclassCDMA2000 bandClass;
                                NeighCellsPerBandclassListCDMA2000
                                    neighCellsPerFreqList;
                              };
                              ;
                              struct NeighCellCDMA2000r11 {
                                BandclassCDMA2000 bandClass;
                                SEQU neighFreqInfoListr11;
                              };
                              ;
                              Neig;
                              ;
                              struct NeighCellsPerBandclassCDMA2000 {
                                ARFCNValueCDMA2000 arfcn;
                                PhysCellIdListCDMA2000 physCellIdList;
                              };
                              ;
                              struct NeighCellsPerBandclassCDMA2000r11 {
                                ARFCNValueCDMA2000 arfcn;
                                SEQU physCellIdListr11;
                              };
                              ;
                              SEQU NeighCellListCDMA2000v920;
                              ;
                              struct NeighCellCDMA2000v920 {
                                NeighCellsPerBandclassListCDMA2000v920
                                    neighCellsPerFreqListv920;
                              };
                              ;
                              Neig;
                              ;
                              struct NeighCellsPerBandclassCDMA2000v920 {
                                PhysCellIdListCDMA2000v920 physCellIdListv920;
                              };
                              ;
                              SEQU PhysCellIdListCDMA2000;
                              ;
                              SEQU PhysCellIdListCDMA2000v920;
                              ;
                              SEQU BandClassListCDMA2000;
                              ;
                              struct BandClassInfoCDMA2000 {
                                BandclassCDMA2000 bandClass;
                                //         CellReselectionPriority
                                //         cellReselectionPriority;
                                int threshXHigh;
                                int threshXLow;

                                ;
                              };
                              ;
                              struct ACBarringConfig1XRTTr9 {
                                int acBarring0to9r9;
                                int acBarring10r9;
                                int acBarring11r9;
                                int acBarring12r9;
                                int acBarring13r9;
                                int acBarring14r9;
                                int acBarring15r9;
                                int acBarringMsgr9;
                                int acBarringRegr9;
                                int acBarringEmgr9;
                              };
                              ;
                              SEQU SIB8PerPLMNListr11;
                              ;
                              struct SIB8PerPLMNr11 {
                                int plmnIdentityr11;
                                enum parametersCDMA2000r11 {
                                  ParametersCDMA2000r11 explicitValue;
                                  typedef defaultValue;
                                };
                              };
                              ;
                              struct ParametersCDMA2000r11 {
                                enum systemTimeInfor11 {
                                  SystemTimeInfoCDMA2000 explicitValue;
                                  typedef defaultValue;
                                  //  Need OR                  };
                                  int searchWindowSizer11;
                                  struct parametersHRPDr11{
                                      PreRegistrationInfoHRPD
                                          preRegistrationInfoHRPDr11;
                                      //  Need OR
                                      //  CellReselectionParametersCDMA2000r11
                                      //  cellReselectionParametersHRPDr11;
                                      //  Need OR    };
                                      struct parameters1XRTTr11{
                                          //      CSFBRegistrationParam1XRTT
                                          //      csfbRegistrationParam1XRTTr11;
                                          //  Cond REG1XRTTPerPLMN
                                          //  CSFBRegistrationParam1XRTTv920
                                          //  csfbRegistrationParam1XRTTExtr11;
                                          //  Cond PerPLMNLC std::bitset<42>
                                          //  longCodeState1XRTTr11;
                                          //  Need OR
                                          //  CellReselectionParametersCDMA2000r11
                                          //  cellReselectionParameters1XRTTr11;
                                          //  Cond REG1XRTTPerPLMN
                                          //  ACBarringConfig1XRTTr9
                                          //  acBarringConfig1XRTTr11;
                                          //  Need OR         bool
                                          //  csfbSupportForDualRxUEsr11;
                                          //  Cond REG1XRTTPerPLMN    enum
                                          //  true}   csfbDualRxTxSupportr11 {
                                          //  Need OR    };

                                          ;};
                                ;
                                ;
                                struct SystemInformationBlockType9 {
                                  //  Need OR     char        hnbName;

                                  ;
                                  char T string lateNonCriticalExtension;
                                };
                                ;
                                ;
                                struct SystemInformationBlockType10 {
                                  std::bitset<16> messageIdentifier;
                                  std::bitset<16> serialNumber;
                                  char warningType;
                                  //        char         dummy;

                                  ;
                                  char T string lateNonCriticalExtension;
                                };
                                ;
                                ;
                                struct SystemInformationBlockType11 {
                                  std::bitset<16> messageIdentifier;
                                  std::bitset<16> serialNumber;
                                  enum warningMessageSegmentType {
                                    int warningMessageSegmentNumber;
                                    char T string warningMessageSegment;
                                    //  Cond Segment1     char dataCodingScheme;

                                    ;
                                    char T string lateNonCriticalExtension;
                                  };
                                  ;
                                  ;
                                  struct SystemInformationBlockType12r9 {
                                    std::bitset<16> messageIdentifierr9;
                                    std::bitset<16> serialNumberr9;
                                    enum warningMessageSegmentTyper9 {
                                      int warningMessageSegmentNumberr9;
                                      char T string warningMessageSegmentr9;
                                      //  Cond Segment1     char
                                      //  dataCodingSchemer9;
                                      char T string lateNonCriticalExtension;

                                      ;
                                    };
                                    ;
                                    ;
                                    struct SystemInformationBlockType13r9 {
                                      MBSFNAreaInfoListr9 mbsfnAreaInfoListr9;
                                      MBMSNotificationConfigr9
                                          notificationConfigr9;
                                      char T string lateNonCriticalExtension;

                                      ;
                                    };
                                    ;
                                    ;
                                    struct SystemInformationBlockType14r11 {
                                      enum eabParamr11 {
                                        EABConfigr11 eabCommonr11;
                                        SEQU eabPerPLMNListr11;
                                        //  Need OR              };
                                        char T string lateNonCriticalExtension;

                                        ;
                                      };
                                      ;
                                      struct EABConfigPLMNr11 {
                                        //  Need OR    EABConfigr11
                                        //  eabConfigr11;
                                      };
                                      ;
                                      struct EABConfigr11 {
                                        enum eabCategoryr11 {

                                          b std::bitset<10> eabBarringBitmapr11;
                                        };
                                        ;
                                        ;
                                        struct SystemInformationBlockType15r11 {
                                          //  Need OR      MBMSSAIListr11
                                          //  mbmsSAIIntraFreqr11;
                                          //  Need OR    MBMSSAIInterFreqListr11
                                          //  mbmsSAIInterFreqListr11;
                                          char T string
                                              lateNonCriticalExtension;

                                          ;
                                          //  Cond InterFreq
                                          //  MBMSSAIInterFreqListv1140
                                          //  mbmsSAIInterFreqListv1140;

                                          ;
                                        };
                                        ;
                                        SEQU MBMSSAIListr11;
                                        ;
                                        int MBMSSAIr11;
                                        ;
                                        SEQU MBMSSAIInterFreqListr11;
                                        ;
                                        SEQU MBMSSAIInterFreqListv1140;
                                        ;
                                        struct MBMSSAIInterFreqr11 {
                                          ARFCNValueEUTRAr9 dlCarrierFreqr11;
                                          MBMSSAIListr11 mbmsSAIListr11;
                                        };
                                        ;
                                        struct MBMSSAIInterFreqv1140 {
                                          //  Need OR    MultiBandInfoListr11
                                          //  multiBandInfoListr11;
                                        };
                                        ;
                                        ;
                                        ;
                                        struct SystemInformationBlockType16r11 {
                                          struct timeInfor11 {
                                            int timeInfoUTCr11;
                                            //  Need OR    std::bitset<2>
                                            //  dayLightSavingTimer11;
                                            //  Need OR      int leapSecondsr11;
                                            //  Need OR     int
                                            //  localTimeOffsetr11;
                                            //  Need OR                   };
                                            char T string
                                                lateNonCriticalExtension;

                                            ;
                                          };
                                          ;
                                          ;
                                          struct SystemInformationBlockType17 {
                                            SEQU wlanOffloadInfoPerPLMNList;
                                            //  Need OR WLANOffloadInfoPerPLMN;
                                            char T string
                                                lateNonCriticalExtension;

                                            ;
                                          };
                                          ;
                                          struct WLANOffloadInfoPerPLMN {
                                            //  Need OR    WLANOffloadConfig
                                            //  wlanOffloadConfigCommon;
                                            //  Need OR     WLANIdList
                                            //  wlanIdList;

                                            ;
                                          };
                                          ;
                                          SEQU WLANIdList;
                                          ;
                                          struct WLANIdentifiers {
                                            //  Need OR     char       ssid;
                                            //  Need OR      char       bssid;
                                            //  Need OR      char       hessid;

                                            ;
                                          };
                                          ;
                                          ;
                                          SystemInformationBlockType18 struct {
                                            struct commConfig {
                                              SLCommRxPoolList commRxPool;
                                              //  Need OR     SLCommTxPoolList
                                              //  commTxPoolNormalCommon;
                                              //  Need OR     SLCommTxPoolList
                                              //  commTxPoolExceptional;
                                              //  Need OR   SLSyncConfigList
                                              //  commSyncConfig;
                                              //  Need OR                    };
                                              char T string
                                                  lateNonCriticalExtension;

                                              ;
                                              //  Need OR   SLCommTxPoolListExt
                                              //  commTxPoolNormalCommonExt;
                                              //  Need OR     enum  true}
                                              //  commTxAllowRelayCommon    {

                                              ;
                                            };
                                            ;
                                            ;
                                            SystemInformationBlockType19 struct
                                                {
                                              struct discConfig {
                                                SLDiscRxPoolList discRxPool;
                                                //  Need OR     SLDiscTxPoolList
                                                //  discTxPoolCommon;
                                                //  Cond Tx
                                                //  SLDiscTxPowerInfoList
                                                //  discTxPowerInfo;
                                                //  Need OR   SLSyncConfigList
                                                //  discSyncConfig;
                                                //  Need OR };
                                                //  Need OR
                                                //  SLCarrierFreqInfoList
                                                //  discInterFreqList;
                                                char T string
                                                    lateNonCriticalExtension;

                                                ;
                                                struct discConfigv13x0 {
                                                  //  Need OR
                                                  //  SLCarrierFreqInfoListv13x0
                                                  //  discInterFreqListv13x0;
                                                  //  Need OR     enum  true}
                                                  //  gapRequestsAllowedCommon {
                                                  //  Need OR };
                                                  struct discConfigRelay {
                                                    //  Need OR       RSRPRange
                                                    //  discThreshHiRelayUE;
                                                    //  Need OR       RSRPRange
                                                    //  discThreshLoRelayUE;
                                                    enum discHystMaxRelayUE {

                                                      dB3, dB6, dB9,
                                                      dB12 enum discHystMinRelayUE{

                                                          dB3, dB6, dB9
                                                          //  Uu threshold;
                                                          //  Need OR
                                                          //  RSRPRange
                                                          //  discThreshHiRemoteUE;
                                                          enum discHystMaxRemoteUE{

                                                              dB3, dB6, dB9
                                                              //  Uu threshold;
                                                              ReselectionInfoRelay
                                                                  reselectionInfoRemoteUEIC;
                                                              //  Need OR };
                                                              struct
                                                              discConfigPS13{
                                                                  SLDiscRxPoolList
                                                                      discRxPoolPS;
                                                                  //  Need OR
                                                                  //  SLDiscTxPoolList
                                                                  //  discTxPoolPSCommon;
                                                                  //  Need OR };

                                                                  ;};
                                                    ;
                                                    SEQU SLCarrierFreqInfoList;
                                                    ;
                                                    SEQU
                                                        SLCarrierFreqInfoListv13x0;
                                                    ;
                                                    struct SLCarrierFreqInfo {
                                                      ARFCNValueEUTRAr9
                                                          carrierFreq;
                                                      //       PLMNIdentityList4
                                                      //       plmnIdentityList;
                                                    };
                                                    ;
                                                    struct
                                                        ReselectionInfoRelay {
                                                      QRxLevMin qRxLevMin;
                                                      //  Note that the mapping
                                                      //  of invidual values may
                                                      //  be different for PC5
                                                      //  but the granularity/;
                                                      //  number of values is
                                                      //  same as for Uu;
                                                      FilterCoefficient
                                                          filterCoefficient;
                                                      enum minHyst {
                                                        //  Need OR  dB6  dB9
                                                        //  dB12  dBinf};
                                                      };
                                                      ;
                                                      struct
                                                          CellSelectionInfoNFreq {
                                                        //  Cell selection
                                                        //  information as in
                                                        //  SIB1;
                                                        QRxLevMin qRxLevMin;
                                                        //         int
                                                        //         qRxLevMinOffset;
                                                        //  Cell reselection
                                                        //  information as in
                                                        //  SIB3;
                                                        enum qHyst {
                                                          dB0 dB1 dB2 dB3 dB4
                                                              dB5 dB6 dB8 dB10;
                                                          dB12 dB14 dB16 dB18
                                                              dB20 dB22 dB24
                                                        };
                                                        //        QRxLevMin
                                                        //        qRxLevMinReselection;
                                                        TReselection
                                                            tReselectionEUTRA;
                                                      };
                                                      ;
                                                      struct
                                                          SLCarrierFreqInfov13x0 {
                                                        //  Need OR
                                                        //  SLDiscRxPoolList
                                                        //  discRxResources;
                                                        //  Need OR
                                                        //  SLDiscRxPoolList
                                                        //  discRxResourcesPS;
                                                        //  Need OR
                                                        //  SLDiscTxResourcesInterFreq
                                                        //  discTxResources;
                                                        //  Need OR
                                                        //  SLDiscTxResourcesInterFreq
                                                        //  discTxResourcesPS;
                                                        //  Cond Tx
                                                        //  SLDiscTxPowerInfoList
                                                        //  discTxPowerInfo;
                                                        //  Need OR ,      enum
                                                        //  pCell}
                                                        //  discTxRefCarrierCommon
                                                        //  {
                                                        //  Need OR
                                                        //  SLSyncConfigListNFreq
                                                        //  discSyncConfig;
                                                        //  Need OR
                                                        //  CellSelectionInfoNFreq
                                                        //  cellSelectionInfo;
                                                      };
                                                      ;
                                                      PLMNIdentityInfo2 SEQU
                                                          PLMNIdentityList4;
                                                      ;
                                                      enum PLMNIdentityInfo2 {
                                                        int plmnIndex;
                                                        PLMNIdentity
                                                            plmnIdentity;
                                                      };
                                                      ;
                                                      enum SLDiscTxResourcesInterFreq {
                                                        typedef acquireSIFromCarrier;
                                                        SLDiscTxPoolList
                                                            discTxPoolCommon;
                                                        typedef requestDedicated;
                                                        typedef noTxOnCarrier;
                                                      };
                                                      ;
                                                      ;
                                                      struct
                                                          SystemInformationBlockType20 {
                                                        enum scmcchRepetionPeriod {

                                                          rf4,
                                                          rf8,
                                                          rf16,
                                                          rf32,
                                                          rf64,
                                                          rf128 int
                                                              scmcchOffset;
                                                          int scmcchSubframe;
                                                          enum scmcchModificationPeriod{

                                                              rf4, rf8, rf16,
                                                              rf32, rf64,
                                                              rf128 rf512
                                                                  rf1024};
                                                          char T string
                                                              lateNonCriticalExtension;

                                                          ;
                                                        };
                                                        ;
                                                        ;
                                                        struct
                                                            AntennaInfoCommon {
                                                          enum spare1
                                                        } antennaPortsCount{

                                                            an2};
                                                        ;
                                                        struct
                                                            AntennaInfoDedicated {
                                                          enum transmissionMode {
                                                            tm1 tm2 tm3 tm4 tm5
                                                                tm6;
                                                            tm7 tm8v920
                                                          };
                                                          enum codebookSubsetRestriction {
                                                            std::bitset<2>
                                                                n2TxAntennatm3;
                                                            std::bitset<4>
                                                                n4TxAntennatm3;
                                                            std::bitset<6>
                                                                n2TxAntennatm4;
                                                            std::bitset<64>
                                                                n4TxAntennatm4;
                                                            std::bitset<4>
                                                                n2TxAntennatm5;
                                                            std::bitset<16>
                                                                n4TxAntennatm5;
                                                            std::bitset<4>
                                                                n2TxAntennatm6;
                                                            std::bitset<16>
                                                                n4TxAntennatm6;
                                                            //  Cond TM };
                                                            enum ueTransmitAntennaSelection{
                                                                typedef release;
                                                                enum openLoop}
                                                          setup{};
                                                        };
                                                        ;
                                                        struct
                                                            AntennaInfoDedicatedv920 {
                                                          enum codebookSubsetRestrictionv920 {
                                                            std::bitset<6>
                                                                n2TxAntennatm8r9;
                                                            std::bitset<32>
                                                                n4TxAntennatm8r9;
                                                            //  Cond TM8 };
                                                          };
                                                          ;
                                                          struct
                                                              AntennaInfoDedicatedr10 {
                                                            enum transmissionModer10 {
                                                              tm1 tm2 tm3 tm4
                                                                  tm5 tm6 tm7
                                                                      tm8v920;
                                                              tm9v1020 tm10v1130
                                                                  spare6 spare5
                                                                      spare4;
                                                              spare3 spare2
                                                                  spare1
                                                            };
                                                            //  Cond TMX
                                                            //  std::bitset<1>
                                                            //  string
                                                            //  codebookSubsetRestrictionr10;
                                                            enum ueTransmitAntennaSelection {
                                                              typedef release;
                                                              enum openLoop
                                                            }
                                                            setup{};
                                                          };
                                                          ;
                                                          struct
                                                              AntennaInfoDedicatedv10i0 {
                                                            //  Need OR    enum
                                                            //  eightLayers}
                                                            //  maxLayersMIMOr10
                                                            //  {
                                                          };
                                                          ;
                                                          struct
                                                              AntennaInfoDedicatedv1250 {
                                                            bool
                                                                alternativeCodebookEnabledFor4TX;
                                                          };
                                                          ;
                                                          ;
                                                          struct
                                                              AntennaInfoULr10 {
                                                            enum transmissionModeULr10 {

                                                              tm2,
                                                              spare6
                                                              //  Need OR
                                                              //  spare4  spare3
                                                              //  spare2
                                                              //  spare1};
                                                              //  Need OR
                                                              //  enum  setup}
                                                              //  fourAntennaPortActivatedr10
                                                              //  {
                                                            };
                                                            ;
                                                            ;
                                                            struct
                                                                CQIReportConfig {
                                                              //  Need OR
                                                              //  CQIReportModeAperiodic
                                                              //  cqiReportModeAperiodic;
                                                              int nomPDSCHRSEPREOffset;
                                                              //        CQIReportPeriodic
                                                              //        cqiReportPeriodic;
                                                            };
                                                            ;
                                                            struct
                                                                CQIReportConfigv920 {
                                                              //  Cond cqiSetup
                                                              //  ,   enum
                                                              //  setup}
                                                              //  cqiMaskr9   {
                                                              //  Cond PMIRI
                                                              //  enum  setup}
                                                              //  pmiRIReportr9
                                                              //  {
                                                            };
                                                            ;
                                                            struct
                                                                CQIReportConfigr10 {
                                                              //        CQIReportAperiodicr10
                                                              //        cqiReportAperiodicr10;
                                                              int nomPDSCHRSEPREOffset;
                                                              //        CQIReportPeriodicr10
                                                              //        cqiReportPeriodicr10;
                                                              //  Cond
                                                              //  PMIRIPCell ,
                                                              //  enum  setup}
                                                              //  pmiRIReportr9
                                                              //  {
                                                              enum csiSubframePatternConfigr10 {
                                                                typedef release;
                                                                struct setup{
                                                                    MeasSubframePatternr10
                                                                        csiMeasSubframeSet1r10;
                                                                    MeasSubframePatternr10
                                                                        csiMeasSubframeSet2r10;};
                                                              //                     };
                                                            };
                                                            ;
                                                            struct
                                                                CQIReportConfigv1130 {
                                                              CQIReportPeriodicv1130
                                                                  cqiReportPeriodicv1130;
                                                              CQIReportBothr11
                                                                  cqiReportBothr11;
                                                            };
                                                            ;
                                                            struct
                                                                CQIReportConfigv1250 {
                                                              enum csiSubframePatternConfig {
                                                                typedef release;
                                                                struct setup{
                                                                    std::bitset<
                                                                        10>
                                                                        csiMeasSubframeSets;};
                                                              //                     };
                                                              //       CQIReportBothv1250
                                                              //       cqiReportBothv1250;
                                                              //       CQIReportAperiodicv1250
                                                              //       cqiReportAperiodicv1250;
                                                              enum altCQITable {
                                                                allSubframes
                                                                    csiSubframeSet1;
                                                                //       csiSubframeSet2
                                                                //       spare1};
                                                              };
                                                              ;
                                                              struct
                                                                  CQIReportConfigv13xy {
                                                                //       CQIReportAperiodicv13xy
                                                                //       cqiReportAperiodicv13xy;
                                                                //       CQIReportPeriodicv13xy
                                                                //       cqiReportPeriodicv13xy;
                                                              };
                                                              ;
                                                              struct
                                                                  CQIReportConfigSCellr10 {
                                                                //  Need OR
                                                                //  CQIReportModeAperiodic
                                                                //  cqiReportModeAperiodicr10;
                                                                int nomPDSCHRSEPREOffsetr10;
                                                                //        CQIReportPeriodicr10
                                                                //        cqiReportPeriodicSCellr10;
                                                                //  Cond
                                                                //  PMIRISCell
                                                                //  enum  setup}
                                                                //  pmiRIReportr10
                                                                //  {
                                                              };
                                                              ;
                                                              struct
                                                                  CQIReportConfigSCellv13x0 {
                                                                CQIReportPeriodicv13xy
                                                                    cqiReportPeriodicSCellv13x0;
                                                              };
                                                              ;
                                                              enum CQIReportPeriodic {
                                                                typedef release;
                                                                struct setup{
                                                                    int cqiPUCCHResourceIndex;
                                                                    int cqipmiConfigIndex;
                                                                    enum cqiFormatIndicatorPeriodic{
                                                                        typedef widebandCQI;
                                                                        struct
                                                                        subbandCQI{
                                                                            int k;};
                                                            };
                                                            //  Need OR
                                                            //  int
                                                            //  riConfigIndex;
                                                            bool
                                                                simultaneousAckNackAndCQI;
                                                          };
                                                        };
                                                        ;
                                                        enum CQIReportPeriodicr10 {
                                                          typedef release;
                                                          struct setup{
                                                              int cqiPUCCHResourceIndexr10;
                                                              //  Need OR
                                                              //  int
                                                              //  cqiPUCCHResourceIndexP1r10;
                                                              int cqipmiConfigIndex;
                                                              enum cqiFormatIndicatorPeriodicr10{
                                                                  struct
                                                                  widebandCQIr10{
                                                                      //  Need
                                                                      //  OR
                                                                      //  enum
                                                                      //  submode2}
                                                                      //  csiReportModer10
                                                                      //  {
                                                                  };
                                                                  struct
                                                                  subbandCQIr10{
                                                                      int k;
                                                                      enum n4}
                                                        periodicityFactorr10{};
                                                      };
                                                      //  Need OR        int
                                                      //  riConfigIndex;
                                                      bool
                                                          simultaneousAckNackAndCQI;
                                                      //  Need OR    ,   enum
                                                      //  setup}      cqiMaskr9
                                                      //  {
                                                      enum csiConfigIndexr10 {
                                                        typedef release;
                                                        struct setup{
                                                            int cqipmiConfigIndex2r10;
                                                            //  Need OR     int
                                                            //  riConfigIndex2r10;
                                                        };
                                                      //                     };
                                                    };
                                                  };
                                                  ;
                                                  ;
                                                  struct
                                                      CQIReportPeriodicv1130 {
                                                    //  Need OR ,   enum  setup}
                                                    //  simultaneousAckNackAndCQIFormat3r11
                                                    //  {
                                                    //      CQIReportPeriodicProcExtToReleaseListr11
                                                    //      cqiReportPeriodicProcExtToReleaseListr11;
                                                    //     CQIReportPeriodicProcExtToAddModListr11
                                                    //     cqiReportPeriodicProcExtToAddModListr11;
                                                  };
                                                  ;
                                                  struct
                                                      CQIReportPeriodicv13xy {
                                                    //         CRIReportConfig
                                                    //         criReportConfig;
                                                    //  Need OR   enum  setup}
                                                    //  simultaneousAckNackAndCQIFormat4Format5
                                                    //  {
                                                  };
                                                  ;
                                                  ;
                                                  SEQU
                                                      CQIReportPeriodicProcExtToAddModListr11;
                                                  ;
                                                  SEQU
                                                      CQIReportPeriodicProcExtToReleaseListr11;
                                                  ;
                                                  struct
                                                      CQIReportPeriodicProcExtr11 {
                                                    CQIReportPeriodicProcExtIdr11
                                                        cqiReportPeriodicProcExtIdr11;
                                                    int cqipmiConfigIndexr11;
                                                    enum cqiFormatIndicatorPeriodicr11 {
                                                      struct widebandCQIr11{
                                                          //  Need OR   enum
                                                          //  submode2}
                                                          //  csiReportModer11 {
                                                      };
                                                      struct subbandCQIr11{
                                                          int k; enum n4}
                                                    periodicityFactorr11{};
                                                  };
                                                  //  Need OR        int
                                                  //  riConfigIndexr11;
                                                  enum csiConfigIndexr11 {
                                                    typedef release;
                                                    struct setup{
                                                        int cqipmiConfigIndex2r11;
                                                        //  Need OR     int
                                                        //  riConfigIndex2r11;
                                                    };
                                                  //                      };

                                                  ;
                                                  //        CRIReportConfig
                                                  //        criReportConfig;

                                                  ;
                                                };
                                                ;
                                                enum CQIReportAperiodicr10 {
                                                  typedef release; struct setup{
                                                      CQIReportModeAperiodic
                                                          cqiReportModeAperiodicr10;
                                                      struct
                                                      aperiodicCSITriggerr10{
                                                          std::bitset<8>
                                                              trigger1r10;
                                                          std::bitset<8>
                                                              trigger2r10;
                                                          //  Need OR };
                                                      };
                                              };
                                              ;
                                              enum CQIReportAperiodicv1250 {
                                                typedef release; struct
                                                setup{struct aperiodicCSITriggerv1250{
                                                    enum triggerSubframeSetIndicator{
                                                        std::bitset<8>
                                                            trigger1SubframeSetIndicator;
                                                        std::bitset<8>
                                                            trigger2SubframeSetIndicator;};
                                            };
                                          };
                                          ;
                                          enum CQIReportAperiodicv13xy {
                                            typedef release; struct setup{
                                                CQIReportModeAperiodic
                                                    cqiReportModeAperiodic;
                                                struct aperiodicCSITriggerv13xy{
                                                    std::bitset<32> trigger1;
                                                    std::bitset<32> trigger2;
                                                    std::bitset<32> trigger3;
                                                    std::bitset<32> trigger4;
                                                    std::bitset<32> trigger5;
                                                    std::bitset<32> trigger6;
                                                    //  Need OR };
                                                    struct aperiodicCSITrigger2{
                                                        std::bitset<32>
                                                            trigger1SubframeSetIndicator;
                                                        std::bitset<32>
                                                            trigger2SubframeSetIndicator;
                                                        std::bitset<32>
                                                            trigger3SubframeSetIndicator;
                                                        std::bitset<32>
                                                            trigger4SubframeSetIndicator;
                                                        std::bitset<32>
                                                            trigger5SubframeSetIndicator;
                                                        std::bitset<32>
                                                            trigger6SubframeSetIndicator;
                                                        //  Need OR };
                                                    };
                                        };
                                        ;
                                        struct CQIReportAperiodicProcr11 {
                                          CQIReportModeAperiodic
                                              cqiReportModeAperiodicr11;
                                          bool trigger01r11;
                                          bool trigger10r11;
                                          bool trigger11r11;
                                        };
                                        ;
                                        struct CQIReportAperiodicProc {
                                          bool trigger001;
                                          bool trigger010;
                                          bool trigger011;
                                          bool trigger100;
                                          bool trigger101;
                                          bool trigger110;
                                          bool
                                        } trigger111;
                                        ;
                                        enum CQIReportModeAperiodic {
                                          rm12 rm20 rm22 rm30 rm31;
                                          rm32v1250 rm10v13xy rm11v13xx;
                                        };
                                        ;
                                        struct CQIReportBothr11 {
                                          //      CSIIMConfigToReleaseListr11
                                          //      csiIMConfigToReleaseListr11;
                                          //      CSIIMConfigToAddModListr11
                                          //      csiIMConfigToAddModListr11;
                                          //      CSIProcessToReleaseListr11
                                          //      csiProcessToReleaseListr11;
                                          //      CSIProcessToAddModListr11
                                          //      csiProcessToAddModListr11;
                                        };
                                        ;
                                        struct CQIReportBothv1250 {
                                          //      CSIIMConfigIdv1250
                                          //      csiIMConfigToReleaseListExt;
                                          //     CSIIMConfigExt
                                          //     csiIMConfigToAddModListExt;
                                        };
                                        ;
                                        SEQU CSIIMConfigToAddModListr11;
                                        ;
                                        SEQU CSIIMConfigToReleaseListr11;
                                        ;
                                        SEQU CSIProcessToAddModListr11;
                                        ;
                                        SEQU CSIProcessToReleaseListr11;
                                        ;
                                        struct CQIReportBothProcr11 {
                                          //  Need OR       CSIProcessIdr11
                                          //  riRefCSIProcessIdr11;
                                          //  Need OR       enum  setup}
                                          //  pmiRIReportr11   {
                                        };
                                        ;
                                        enum CRIReportConfig {
                                          typedef release;
                                          struct setup{enum criConfigIndex{

                                              n2, n4, n8, n16
                                              //  Need OR   enum   n32}
                                              //  criConfigIndex2    {

                                              n2,
                                              n4, n8};};
                                        ;
                                        ;
                                        int CQIReportPeriodicProcExtIdr11;
                                        ;
                                        ;
                                        struct CrossCarrierSchedulingConfigr10 {
                                          enum schedulingCellInfor10 {
                                            //  No cross carrier scheduling
                                            //  struct          ownr10    {
                                            bool cifPresencer10;
                                          };
                                          //  Cross carrier scheduling
                                          //  struct          otherr10    {
                                          ServCellIndexr10 schedulingCellIdr10;
                                          int pdschStartr10;
                                        };
                                      };
                                    };
                                    ;
                                    struct CrossCarrierSchedulingConfig {
                                      enum schedulingCellInfo {
                                        //  No cross carrier scheduling
                                        //  struct          own    {
                                        bool cifPresence;
                                      };
                                      //  Cross carrier scheduling      struct
                                      //  other    {
                                      ServCellIndexFull schedulingCellId;
                                      int pdschStart;
                                      int cifInSchedulingCell;
                                    };
                                  };
                                };
                                ;
                                ;
                                struct CSIIMConfigr11 {
                                  CSIIMConfigIdr11 csiIMConfigIdr11;
                                  int resourceConfigr11;
                                  int subframeConfigr11;

                                  ;
                                };
                                ;
                                struct CSIIMConfigExt {
                                  CSIIMConfigIdv1250 csiIMConfigIdv1250;
                                  int resourceConfig;
                                  int subframeConfig;

                                  ;
                                };
                                ;
                                ;
                                int CSIIMConfigIdr11;
                                int CSIIMConfigId;
                                int CSIIMConfigIdv1250;
                                ;
                                ;
                                struct CSIProcessr11 {
                                  CSIProcessIdr11 csiProcessIdr11;
                                  CSIRSConfigNZPIdr11 csiRSConfigNZPIdr11;
                                  CSIIMConfigIdr11 csiIMConfigIdr11;
                                  SEQU pCAndCBSRListr11;
                                  //  Need OR      CQIReportBothProcr11
                                  //  cqiReportBothProcr11;
                                  //  Need OR      int
                                  //  cqiReportPeriodicProcIdr11;
                                  //  Need OR     CQIReportAperiodicProcr11
                                  //  cqiReportAperiodicProcr11;

                                  ;
                                  //    ,  enum  true}
                                  //    alternativeCodebookEnabledFor4TXProc
                                  {
                                    enum csiIMConfigIdList {
                                      typedef release; SEQU setup;
                                      //                   };
                                      enum cqiReportAperiodicProc2{
                                          typedef release;
                                          CQIReportAperiodicProcr11 setup;
                                          //                  };

                                          ;
                                          //        CQIReportAperiodicProc
                                          //        cqiReportAperiodicProc;
                                          enum cqiReportAperiodicProc2{
                                              typedef release;
                                              CQIReportAperiodicProc setup;
                                              //                    };
                                              enum eMIMOType{
                                                  typedef release; enum setup{
                                                      CSIRSInfoNonPrecoded
                                                          nonPrecoded;
                                                      CSIRSInfoBeamformed
                                                          beamformed;};
                                    //                  };

                                    ;
                                  };
                                  ;
                                  struct PCAndCBSRr11 {
                                    int pCr11;
                                    std::bitset<1> string
                                        codebookSubsetRestrictionr11;
                                  };
                                  ;
                                  struct PCAndCBSR {
                                    struct legacySet {
                                      int pCr11;
                                      std::bitset<1> string
                                          codebookSubsetRestriction1;
                                      //  Cond BeamformedKna              };
                                      //  Cond NonPreCoded    std::bitset<1>
                                      //  string  codebookSubsetRestriction2;
                                      //  Cond BeamformedK1a   std::bitset<1>
                                      //  string  codebookSubsetRestriction3;
                                    };
                                    ;
                                    SEQU PCAndCBSRPerResourceConfig;
                                    ;
                                    ;
                                    int CSIProcessIdr11;
                                    ;
                                    ;
                                    struct CSIRSConfigr10 {
                                      enum csiRSr10 {
                                        typedef release;
                                        struct setup{enum antennaPortsCountr10{

                                            an2, an4 int resourceConfigr10;
                                            int subframeConfigr10; int pCr10;};
                                      //                       };
                                      //         ZeroTxPowerCSIRSConf
                                      //         zeroTxPowerCSIRSr10;
                                    };
                                    ;
                                    struct CSIRSConfigv1250 {
                                      //          ZeroTxPowerCSIRSConf
                                      //          zeroTxPowerCSIRS2;
                                      enum dsZeroTxPowerCSIRS {
                                        typedef release; struct setup{
                                            SEQU zeroTxPowerCSIRSList;};
                                      //                       };
                                    };
                                    ;
                                    struct CSIRSConfigv13x0 {
                                      enum eMIMOType {
                                        typedef release; enum setup{
                                            CSIRSInfoNonPrecoded nonPrecoded;
                                            CSIRSInfoBeamformed beamformed;};
                                      //                  };
                                    };
                                    ;
                                    enum ZeroTxPowerCSIRSConf {
                                      typedef release;
                                      ZeroTxPowerCSIRS setup;
                                    };
                                    ;
                                    struct ZeroTxPowerCSIRS {
                                      std::bitset<16>
                                          zeroTxPowerResourceConfigList;
                                      int zeroTxPowerSubframeConfig;
                                    };
                                    ;
                                    ;
                                    struct CSIRSConfigNZPr11 {
                                      CSIRSConfigNZPIdr11 csiRSConfigNZPIdr11;
                                      enum antennaPortsCountr11 {

                                        an2, an4 int resourceConfigr11;
                                        int subframeConfigr11;
                                        int scramblingIdentityr11;
                                        struct qclCRSInfor11{
                                            int qclScramblingIdentityr11;
                                            enum crsPortsCountr11{

                                                n2,
                                                n4 enum mbsfnSubframeConfigListr11{
                                                    typedef release;
                                                    struct setup{
                                                        MBSFNSubframeConfigList
                                                            subframeConfigList;};
                                      //                    };
                                      //  Need OR                   };

                                      ;
                                      enum eMIMOInfo {
                                        typedef release; struct setup{
                                            SEQU nzpresourceConfigList;
                                            //  Need OR   enum   cdm4}
                                            //  cdmType      {
                                        };
                                      //                    };

                                      ;
                                    };
                                    ;
                                    int ResourceConfig;
                                    ;
                                    ;
                                    int CSIRSConfigNZPIdr11;
                                    ;
                                    ;
                                    struct CSIRSConfigZPr11 {
                                      CSIRSConfigZPIdr11 csiRSConfigZPIdr11;
                                      std::bitset<16> resourceConfigListr11;
                                      int subframeConfigr11;

                                      ;
                                    };
                                    ;
                                    ;
                                    int CSIRSConfigZPIdr11;
                                    ;
                                    ;
                                    struct CSIRSInfoNonPrecoded {
                                      //  Need OR   SEQU      pCAndCBSRList;
                                      enum codebookConfigN1 {

                                        an2, an3,
                                        an4 enum codebookConfigN2{

                                            an2, an3,
                                            an4 enum codebookOverSamplingRateConfigO1{

                                                an4 enum codebookOverSamplingRateConfigO2{

                                                    an4 enum codebookConfig{

                                                        an2, an3
                                                        //  Need OR     enum
                                                        //  on}
                                                        //  interferenceMeasRestriction
                                                        //  {
                                                    };
                                                    ;
                                                    struct CSIRSInfoBeamformed{
                                                        //  Need OR   SEQU
                                                        //  csiRSConfigNZPIdListExt;
                                                        //  Need OR   SEQU
                                                        //  csiIMConfigIdListExt;
                                                        //  Need OR   SEQU
                                                        //  pCAndCBSRPerResourceConfigList;
                                                        //  Need OR ,  enum
                                                        //  true}
                                                        //  alternativeCodebookEnabledBeamformed
                                                        //  {
                                                        //  Need OR     enum
                                                        //  on}
                                                        //  channelMeasRestriction
                                                        //  {
                                                    };
                                                    ; struct CSIIMConfigIdInfo{
                                                        CSIIMConfigIdr11
                                                            csiIMConfigId;
                                                        //  Need OR    enum  on}
                                                        //  interferenceMeasRestriction
                                                        //  {
                                                    };
                                      ;
                                      ;
                                      enum DMRSConfigr11 {
                                        typedef release; struct setup{
                                            int scramblingIdentityr11;
                                            int scramblingIdentity2r11;};
                                    };
                                    struct DMRSConfigv13x0 {
                                      //  Need OR     enum  true}
                                      //  dmrstableAlt    {
                                    };
                                    ;
                                    ;
                                    int DRBIdentity;
                                    ;
                                    ;
                                    struct EPDCCHConfigr11 {
                                      enum configr11 {
                                        typedef release; struct setup{
                                            enum subframePatternConfigr11{
                                                typedef release; struct setup{
                                                    MeasSubframePatternr10
                                                        subframePatternr11;};
                                      //                    };
                                      //           int     startSymbolr11;
                                      //     EPDCCHSetConfigToReleaseListr11
                                      //     setConfigToReleaseListr11;
                                      //     EPDCCHSetConfigToAddModListr11
                                      //     setConfigToAddModListr11;
                                    };
                                  };
                                };
                                ;
                                SEQU EPDCCHSetConfigToAddModListr11;
                                ;
                                SEQU EPDCCHSetConfigToReleaseListr11;
                                ;
                                struct EPDCCHSetConfigr11 {
                                  EPDCCHSetConfigIdr11 setConfigIdr11;
                                  enum transmissionTyper11 {
                                    struct resourceBlockAssignmentr11{
                                        enum numberPRBPairsr11{

                                            n4 std::bitset<438>
                                                resourceBlockAssignmentr11;};
                                  int dmrsScramblingSequenceIntr11;
                                  int pucchResourceStartOffsetr11;
                                  //  Need OR PDSCHREMappingQCLConfigIdr11
                                  //  reMappingQCLConfigIdr11;

                                  ;
                                  enum csiRSConfigZPId2 {
                                    typedef release;
                                    CSIRSConfigZPIdr11 setup;
                                    //                   };

                                    ;
                                  };
                                  ;
                                  int EPDCCHSetConfigIdr11;
                                  ;
                                  enum EIMTAMainConfig {
                                    typedef release; struct setup{
                                        CRNTI eimtaRNTI;
                                        enum eimtaCommandPeriodicity{

                                            sf20, sf40 std::bitset<10>
                                                      eimtaCommandSubframeSet;};
                                };
                                ;
                                enum EIMTAMainConfigServCell {
                                  typedef release; struct setup{
                                      int eimtaULDLConfigIndex;
                                      enum eimtaHARQReferenceConfig{

                                          sa4 enum mbsfnSubframeConfigListv1250{
                                              typedef release; struct setup{
                                                  MBSFNSubframeConfigList
                                                      subframeConfigList;};
                              };
                            };
                          };
                          ;
                          ;
                          struct LogicalChannelConfig {
                            struct ulSpecificParameters {
                              int priority;
                              enum prioritisedBitRate {
                                kBps0 kBps8 kBps16 kBps32 kBps64 kBps128;
                                kBps256 infinity kBps512v1020 kBps1024v1020;
                                kBps2048v1020 spare5 spare4 spare3 spare2;
                                spare1
                              };
                              enum bucketSizeDuration {
                                ms50 ms100 ms150 ms300 ms500 ms1000 spare2;
                                spare1
                              };
                              //  Need OR       int      logicalChannelGroup;
                              //  Cond UL                    };

                              ;
                              //  Cond SRmask     enum  setup}
                              //  logicalChannelSRMaskr9
                              {

                                ;
                                //           bool   logicalChannelSRProhibit;

                                ;
                              };
                              ;
                              ;
                              struct MACMainConfig {
                                struct ulSCHConfig {
                                  enum maxHARQTx {
                                    n1 n2 n3 n4 n5 n6 n7 n8;
                                    n10 n12 n16 n20 n24 n28;
                                    //       spare2  spare1};
                                    //      PeriodicBSRTimer periodicBSRTimer;
                                    RetxBSRTimer retxBSRTimer; bool ttiBundling;
                                    //                     };
                                    //          DRXConfig       drxConfig;
                                    TimeAlignmentTimer
                                        timeAlignmentTimerDedicated;
                                    enum phrConfig{
                                        typedef release; struct setup{
                                            enum periodicPHRTimer{

                                                sf20, sf50,
                                                sf100 sf500 sf1000 infinity};
                                            enum prohibitPHRTimer{

                                                sf10, sf20,
                                                sf50 sf200 sf500 sf1000};
                                            enum infinity}
                                  dlPathlossChange{

                                      dB3};
                                  //                     };

                                  ;
                                  //        int      srProhibitTimerr9;

                                  ;
                                  struct macMainConfigv1020 {
                                    enum sCellDeactivationTimerr10 {
                                      rf2 rf4 rf8 rf16 rf32 rf64 rf128;
                                      //        spare};
                                      //  Need OR ,   enum  setup}
                                      //  extendedBSRSizesr10     {
                                      //  Need OR    enum  setup}
                                      //  extendedPHRr10     {
                                      //                   };

                                      ;
                                      //      STAGToReleaseListr11
                                      //      stagToReleaseListr11;
                                      //      STAGToAddModListr11
                                      //      stagToAddModListr11;
                                      //      DRXConfigv1130     drxConfigv1130;

                                      ;
                                      //           bool      eHARQPattern;
                                      enum dualConnectivityPHR{
                                          typedef release; struct setup{
                                              enum virtual} phrModeOtherCG{};
                                          //                   };
                                          enum logicalChannelSRConfig{
                                              typedef release; struct setup{
                                                  enum spare1} logicalChannelSRProhibitTimer{

                                                  sf40, sf64, sf128, sf512,
                                                  sf1024};
                                              //                    };

                                              ;
                                              //     ,   enum  setup}
                                              //     extendedPHR2
                                              {enum eDRXConfigCycleStartOffset{
                                                  typedef release; setup; enum {
                                                      int sf5120; int sf10240;};
                                    //              };

                                    ;
                                  };
                                  ;
                                  struct MACMainConfigSCellr11 {
                                    //       STAGIdr11       stagIdr11;

                                    ;
                                  };
                                  ;
                                  enum DRXConfig {
                                    typedef release;
                                    struct setup{enum onDurationTimer{
                                        psf1 psf2 psf3 psf4 psf5 psf6;
                                        psf8 psf10 psf20 psf30 psf40;
                                        psf50 psf60 psf80 psf100; psf200};
                                  enum drxInactivityTimer {
                                    psf1 psf2 psf3 psf4 psf5 psf6;
                                    psf8 psf10 psf20 psf30 psf40;
                                    psf50 psf60 psf80 psf100;
                                    psf200 psf300 psf500 psf750;
                                    psf1280 psf1920 psf2560 psf0v1020;
                                    spare9 spare8 spare7 spare6;
                                    spare5 spare4 spare3 spare2;
                                    spare1
                                  };
                                  enum drxRetransmissionTimer {
                                    psf1 psf2 psf4 psf6 psf8 psf16;
                                    psf24 psf33
                                  };
                                  enum longDRXCycleStartOffset {
                                    int sf10;
                                    int sf20;
                                    int sf32;
                                    int sf40;
                                    int sf64;
                                    int sf80;
                                    int sf128;
                                    int sf160;
                                    int sf256;
                                    int sf320;
                                    int sf512;
                                    int sf640;
                                    int sf1024;
                                    int sf1280;
                                    int sf2048;
                                    int sf2560;
                                  };
                                  struct shortDRX {
                                    enum shortDRXCycle {
                                      sf2 sf5 sf8 sf10 sf16 sf20;
                                      sf32 sf40 sf64 sf80 sf128 sf160;
                                      sf256 sf320 sf512 sf640
                                    };
                                    int drxShortCycleTimer;
                                    //  Need OR               };
                                  };
                                };
                                ;
                                struct DRXConfigv1130 {
                                  // Need OR ,  enum  psf0v1130}
                                  // drxRetransmissionTimerv1130   {
                                  enum longDRXCycleStartOffsetv1130 {
                                    int sf60v1130;
                                    int sf70v1130;
                                    // Need OR                  };
                                    // Need OR  sf4v1130}  enum
                                    // shortDRXCyclev1130   {
                                  };
                                  ;
                                  enum PeriodicBSRTimer {
                                    sf5 sf10 sf16 sf20 sf32 sf40 sf64 sf80;
                                    sf128 sf160 sf320 sf640 sf1280 sf2560;
                                    infinity spare1
                                  };
                                  ;
                                  enum RetxBSRTimer {
                                    sf320 sf640 sf1280 sf2560 sf5120;
                                    sf10240 spare2 spare1
                                  };
                                  ;
                                  SEQU STAGToReleaseListr11;
                                  ;
                                  SEQU STAGToAddModListr11;
                                  ;
                                  struct STAGToAddModr11 {
                                    STAGIdr11 stagIdr11;
                                    TimeAlignmentTimer
                                        timeAlignmentTimerSTAGr11;

                                    ;
                                  };
                                  ;
                                  int STAGIdr11;
                                  ;
                                  ;
                                  struct PDCCHConfigSCell {
                                    //  Need OR ,     enum  true}
                                    //  skipMonitoringDCIformat01A   {
                                    //  Need OR   PDCCHCandidateReductions
                                    //  pdcchcandidateReductions;
                                  };
                                  ;
                                  PDCCHCandidateReductionValue enum n100
                                } {

                                  n33;
                                  PDCCHCandidateReductions struct {
                                    PDCCHCandidateReductionValue
                                        pdcchcandidateReductionAL1;
                                    PDCCHCandidateReductionValue
                                        pdcchcandidateReductionAL2;
                                    PDCCHCandidateReductionValue
                                        pdcchcandidateReductionAL3;
                                    PDCCHCandidateReductionValue
                                        pdcchcandidateReductionAL4;
                                    PDCCHCandidateReductionValue
                                        pdcchcandidateReductionAL5;
                                  };
                                  ;
                                  ;
                                  struct PDCPConfig {
                                    enum discardTimer {
                                      ms50 ms100 ms150 ms300 ms500;
                                      ms750 ms1500 infinity;
                                      //  Cond Setup                   };
                                      struct rlcAM{
                                          bool statusReportRequired;
                                          //  Cond RlcAM                   };
                                          struct rlcUM{
                                              enum len12bits} pdcpSNSize{
                                              //  Cond RlcUM };
                                              enum headerCompression{
                                                  typedef notUsed; struct rohc{
                                                      DEFAULT 15 int maxCID;
                                                      struct profiles{
                                                          bool profile0x0001;
                                                          bool profile0x0002;
                                                          bool profile0x0003;
                                                          bool profile0x0004;
                                                          bool profile0x0006;
                                                          bool profile0x0101;
                                                          bool profile0x0102;
                                                          bool profile0x0103;
                                                          bool profile0x0104;};

                                    ;
                                  };
                                };

                                ;
                                //  Cond RN   enum  enabled}
                                //  rnIntegrityProtectionr10
                                {

                                  ;
                                  //  Cond RlcAM2   enum  len15bits}
                                  //  pdcpSNSizev1130
                                  {

                                    ;
                                    //        bool   ulDataSplitDRBViaSCG;
                                    enum tReordering {
                                      ms0 ms20 ms40 ms60 ms80 ms100 ms120 ms140;
                                      ms160 ms180 ms200 ms220 ms240 ms260 ms280
                                          ms300;
                                      ms500 ms750 spare14 spare13 spare12
                                          spare11 spare10;
                                      spare9 spare8 spare7 spare6 spare5 spare4
                                          spare3;
                                      //  Cond SetupS      spare2  spare1};

                                      ; enum ulDataSplitThreshold{
                                          typedef release; enum setup{
                                              b0 b100 b200 b400 b800 b1600 b3200
                                                  b6400 b12800;
                                              b25600 b51200 b102400 b204800
                                                  b409600 b819200;
                                              spare1};
                                    //                     };
                                    //  Cond RlcAM3   enum  len18bits}
                                    //  pdcpSNSizev13xx    {

                                    ;
                                    ;
                                  };
                                  ;
                                  ;
                                  struct PDSCHConfigCommon {
                                    int referenceSignalPower;
                                    int pb;
                                  };
                                  ;
                                  struct PDSCHConfigDedicated {
                                    enum pa {
                                      dB6 dB4dot77 dB3 dB1dot77;
                                      dB0 dB1 dB2 dB3
                                    };
                                  };
                                  ;
                                  struct PDSCHConfigDedicatedv1130 {
                                    //          DMRSConfigr11
                                    //          dmrsConfigPDSCHr11;
                                    //  Need OR ,    enum   typeB}
                                    //  qclOperation   {
                                    //      REMappingQCLConfigToReleaseListr11
                                    //      reMappingQCLConfigToReleaseListr11;
                                    //      REMappingQCLConfigToAddModListr11
                                    //      reMappingQCLConfigToAddModListr11;
                                  };
                                  ;
                                  struct PDSCHConfigDedicatedv1280 {
                                    //  Need OR      enum   a33} tbsIndexAlt   {
                                  };
                                  ;
                                  struct PDSCHConfigDedicatedv13x0 {
                                    //         DMRSConfigv13x0
                                    //         dmrsConfigPDSCHv13x0;
                                  };
                                  ;
                                  SEQU REMappingQCLConfigToAddModListr11;
                                  ;
                                  SEQU REMappingQCLConfigToReleaseListr11;
                                  ;
                                  struct PDSCHREMappingQCLConfigr11 {
                                    PDSCHREMappingQCLConfigIdr11
                                        pdschREMappingQCLConfigIdr11;
                                    struct optionalSetOfFieldsr11 {
                                      enum crsPortsCountr11 {

                                        n2, n4 int crsFreqShiftr11;
                                        enum mbsfnSubframeConfigListr11{
                                            typedef release; struct setup{
                                                MBSFNSubframeConfigList
                                                    subframeConfigList;};
                                      //                      };
                                      enum assigned
                                    } pdschStartr11 {

                                      n1, n2, n3
                                          //                       };
                                          CSIRSConfigZPIdr11 csiRSConfigZPIdr11;
                                      //  Need OR      CSIRSConfigNZPIdr11
                                      //  qclCSIRSConfigNZPIdr11;

                                      ;
                                    };
                                    ;
                                    ;
                                    int PDSCHREMappingQCLConfigIdr11;
                                    ;
                                    ;
                                    struct PHICHConfig {
                                      enum phichDuration {
                                        enum two
                                      } phichResource{

                                          half};
                                      ;
                                      ;
                                      struct PhysicalConfigDedicated {
                                        //         PDSCHConfigDedicated
                                        //         pdschConfigDedicated;
                                        //         PUCCHConfigDedicated
                                        //         pucchConfigDedicated;
                                        //         PUSCHConfigDedicated
                                        //         puschConfigDedicated;
                                        //        UplinkPowerControlDedicated
                                        //        uplinkPowerControlDedicated;
                                        //          TPCPDCCHConfig
                                        //          tpcPDCCHConfigPUCCH;
                                        //          TPCPDCCHConfig
                                        //          tpcPDCCHConfigPUSCH;
                                        //  Cond CQIr8       CQIReportConfig
                                        //  cqiReportConfig;
                                        //       SoundingRSULConfigDedicated
                                        //       soundingRSULConfigDedicated;
                                        enum antennaInfo {
                                          AntennaInfoDedicated explicitValue;
                                          typedef defaultValue;
                                          //  Cond AIr8                   };
                                          //         SchedulingRequestConfig
                                          //         schedulingRequestConfig;

                                          ;
                                          //  Cond CQIr8     CQIReportConfigv920
                                          //  cqiReportConfigv920;
                                          //  Cond AIr8
                                          //  AntennaInfoDedicatedv920
                                          //  antennaInfov920;

                                          ; enum antennaInfor10{
                                              AntennaInfoDedicatedr10
                                                  explicitValuer10;
                                              typedef defaultValue;
                                              //  Cond AIr10                  };
                                              //          AntennaInfoULr10
                                              //          antennaInfoULr10;
                                              //             bool
                                              //             cifPresencer10;
                                              //  Cond CQIr10
                                              //  CQIReportConfigr10
                                              //  cqiReportConfigr10;
                                              //          CSIRSConfigr10
                                              //          csiRSConfigr10;
                                              //        PUCCHConfigDedicatedv1020
                                              //        pucchConfigDedicatedv1020;
                                              //        PUSCHConfigDedicatedv1020
                                              //        puschConfigDedicatedv1020;
                                              //       SchedulingRequestConfigv1020
                                              //       schedulingRequestConfigv1020;
                                              soundingRSULConfigDedicatedv1020;
                                              //        SoundingRSULConfigDedicatedv1020;
                                              soundingRSULConfigDedicatedAperiodicr10;
                                              //      SoundingRSULConfigDedicatedAperiodicr10;
                                              //     UplinkPowerControlDedicatedv1020
                                              //     uplinkPowerControlDedicatedv1020;

                                              ;
                                              enum additionalSpectrumEmissionCAr10{
                                                  typedef release; struct setup{
                                                      AdditionalSpectrumEmission
                                                          additionalSpectrumEmissionPCellr10;};
                                        //       };

                                        ;
                                        //  DL configuration as well as
                                        //  configuration applicable for DL and
                                        //  UL;
                                        //      CSIRSConfigNZPToReleaseListr11
                                        //      csiRSConfigNZPToReleaseListr11;
                                        //      CSIRSConfigNZPToAddModListr11
                                        //      csiRSConfigNZPToAddModListr11;
                                        //      CSIRSConfigZPToReleaseListr11
                                        //      csiRSConfigZPToReleaseListr11;
                                        //      CSIRSConfigZPToAddModListr11
                                        //      csiRSConfigZPToAddModListr11;
                                        //         EPDCCHConfigr11
                                        //         epdcchConfigr11;
                                        //       PDSCHConfigDedicatedv1130
                                        //       pdschConfigDedicatedv1130;
                                        //  UL configuration;
                                        //        CQIReportConfigv1130
                                        //        cqiReportConfigv1130;
                                        //       PUCCHConfigDedicatedv1130
                                        //       pucchConfigDedicatedv1130;
                                        //       PUSCHConfigDedicatedv1130
                                        //       puschConfigDedicatedv1130;
                                        //     UplinkPowerControlDedicatedv1130
                                        //     uplinkPowerControlDedicatedv1130;

                                        ;
                                        //  Cond AIr10
                                        //  AntennaInfoDedicatedv1250
                                        //  antennaInfov1250;
                                        //        EIMTAMainConfig
                                        //        eimtaMainConfig;
                                        //       EIMTAMainConfigServCell
                                        //       eimtaMainConfigPCell;
                                        //       PUCCHConfigDedicatedv1250
                                        //       pucchConfigDedicatedv1250;
                                        //        CQIReportConfigv1250
                                        //        cqiReportConfigPCellv1250;
                                        //      UplinkPowerControlDedicatedv1250
                                        //      uplinkPowerControlDedicatedv1250;
                                        //       PUSCHConfigDedicatedv1250
                                        //       puschConfigDedicatedv1250;
                                        //        CSIRSConfigv1250
                                        //        csiRSConfigv1250;

                                        ;
                                        //      PDSCHConfigDedicatedv1280
                                        //      pdschConfigDedicatedv1280;

                                        ;
                                        //       PDSCHConfigDedicatedv13x0
                                        //       pdschConfigDedicatedv13x0;
                                        //       PUCCHConfigDedicatedv13xy
                                        //       pucchConfigDedicated;
                                        //       PUSCHConfigDedicatedv13xy
                                        //       puschConfigDedicated;
                                        //       CQIReportConfigv13xy
                                        //       cqiReportConfigv13xy;
                                        soundingRSULConfigDedicatedv13x0;
                                        //        SoundingRSULConfigDedicatedv13x0;
                                        soundingRSULConfigDedicatedUpPTsExt;
                                        //        SoundingRSULConfigDedicatedUpPTsExt;
                                        soundingRSULConfigDedicatedAperiodicv13x0;
                                        //      SoundingRSULConfigDedicatedAperiodicv13x0;
                                        soundingRSULConfigDedicatedAperiodicUpPTsExt;
                                        //        SoundingRSULConfigDedicatedAperiodicUpPTsExt;
                                        //        CQIReportConfigv13xy
                                        //        cqiReportConfigPCellv13x0;
                                        //        CSIRSConfigv13x0
                                        //        csiRSConfigv13x0;

                                        ;
                                      };
                                      ;
                                      struct PhysicalConfigDedicatedSCellr10 {
                                        //  DL configuration as well as
                                        //  configuration applicable for DL and
                                        //  UL;
                                        struct nonULConfigurationr10 {
                                          //      AntennaInfoDedicatedr10
                                          //      antennaInfor10;
                                          //      CrossCarrierSchedulingConfigr10
                                          //      crossCarrierSchedulingConfigr10;
                                          //        CSIRSConfigr10
                                          //        csiRSConfigr10;
                                          //      PDSCHConfigDedicated
                                          //      pdschConfigDedicatedr10;
                                          //  Cond SCellAdd                  };
                                          //  UL configuration;
                                          struct ulConfigurationr10 {
                                            //        AntennaInfoULr10
                                            //        antennaInfoULr10;
                                            //       PUSCHConfigDedicatedSCellr10
                                            //       puschConfigDedicatedSCellr10;
                                            //      UplinkPowerControlDedicatedSCellr10
                                            //      uplinkPowerControlDedicatedSCellr10;
                                            //      CQIReportConfigSCellr10
                                            //      cqiReportConfigSCellr10;
                                            //      SoundingRSULConfigDedicated
                                            //      soundingRSULConfigDedicatedr10;
                                            soundingRSULConfigDedicatedv1020;
                                            //       SoundingRSULConfigDedicatedv1020;
                                            soundingRSULConfigDedicatedAperiodicr10;
                                            //     SoundingRSULConfigDedicatedAperiodicr10;
                                            //  Cond CommonUL };

                                            ;
                                            //  DL configuration as well as
                                            //  configuration applicable for DL
                                            //  and UL;
                                            //      CSIRSConfigNZPToReleaseListr11
                                            //      csiRSConfigNZPToReleaseListr11;
                                            //      CSIRSConfigNZPToAddModListr11
                                            //      csiRSConfigNZPToAddModListr11;
                                            //      CSIRSConfigZPToReleaseListr11
                                            //      csiRSConfigZPToReleaseListr11;
                                            //      CSIRSConfigZPToAddModListr11
                                            //      csiRSConfigZPToAddModListr11;
                                            //         EPDCCHConfigr11
                                            //         epdcchConfigr11;
                                            //       PDSCHConfigDedicatedv1130
                                            //       pdschConfigDedicatedv1130;
                                            //  UL configuration;
                                            //        CQIReportConfigv1130
                                            //        cqiReportConfigv1130;
                                            //      PUSCHConfigDedicatedv1130
                                            //      puschConfigDedicatedv1130;
                                            //     UplinkPowerControlDedicatedv1130
                                            //     uplinkPowerControlDedicatedSCellv1130;

                                            ;
                                            //       AntennaInfoDedicatedv1250
                                            //       antennaInfov1250;
                                            //      EIMTAMainConfigServCell
                                            //      eimtaMainConfigSCell;
                                            //        CQIReportConfigv1250
                                            //        cqiReportConfigSCellv1250;
                                            //      UplinkPowerControlDedicatedv1250
                                            //      uplinkPowerControlDedicatedSCellv1250;
                                            //        CSIRSConfigv1250
                                            //        csiRSConfigv1250;

                                            ;
                                            //      PDSCHConfigDedicatedv1280
                                            //      pdschConfigDedicatedv1280;

                                            ;
                                            //       PUCCHConfigDedicated
                                            //       pucchConfigDedicated;
                                            //      PUCCHConfigDedicatedv1020
                                            //      pucchConfigDedicatedExt1;
                                            //      PUCCHConfigDedicatedv1130
                                            //      pucchConfigDedicatedExt2;
                                            //  Cond eimta
                                            //  PUCCHConfigDedicatedv1250
                                            //  pucchConfigDedicatedExt3;
                                            //      PUCCHConfigDedicatedv13xy
                                            //      pucchConfigDedicatedExt4;
                                            //  Cond PUCCH_SCell ,    enum
                                            //  true}      pucchCell    {
                                            //  Cond CrossCarrierConfig
                                            //  CrossCarrierSchedulingConfig
                                            //  crossCarrierSchedulingConfig;
                                            //        SchedulingRequestConfig
                                            //        schedulingRequestConfig;
                                            //      SchedulingRequestConfigv1020
                                            //      schedulingRequestConfigExt;
                                            //  Cond PUCCHSCell
                                            //  TPCPDCCHConfigSCell
                                            //  tpcPDCCHConfigPUCCHSCell;
                                            //  Cond PUSCHSCell
                                            //  PUSCHConfigDedicated
                                            //  puschConfigDedicated;
                                            //  Cond PUSCHSCell
                                            //  PUSCHConfigDedicatedv1020
                                            //  puschConfigDedicatedExt;
                                            //  Cond PUSCHSCell
                                            //  PUSCHConfigDedicatedv13xy
                                            //  puschConfigDedicatedExt2;
                                            //  Cond ULPowerSCell
                                            //  UplinkPowerControlDedicated
                                            //  uplinkPowerControlDedicated;
                                            //  Cond ULPowerSCell
                                            //  UplinkPowerControlDedicatedv1020
                                            //  uplinkPowerControlDedicatedExt;
                                            //       PDCCHConfigSCell
                                            //       pdcchConfigSCell;
                                            //         CQIReportConfigv13xy
                                            //         cqiReportConfigv13xy;
                                            //       PDSCHConfigDedicatedv13x0
                                            //       pdschConfigDedicatedv13x0;
                                            soundingRSULConfigDedicatedv13x0;
                                            //        SoundingRSULConfigDedicatedv13x0;
                                            soundingRSULConfigDedicatedUpPTsExt;
                                            //        SoundingRSULConfigDedicatedUpPTsExt;
                                            soundingRSULConfigDedicatedAperiodicv13x0;
                                            //      SoundingRSULConfigDedicatedAperiodicv13x0;
                                            soundingRSULConfigDedicatedAperiodicUpPTsExt;
                                            //        SoundingRSULConfigDedicatedAperiodicUpPTsExt;
                                            //         CSIRSConfigv13x0
                                            //         csiRSConfigv13x0;
                                            //      LAASCellConfiguration
                                            //      laaSCellConfiguration;

                                            ;
                                          };
                                          ;
                                          struct LAASCellConfiguration {
                                            enum subframeStartPosition {
                                              std::bitset<8>
                                                  laaSCellSubframeConfig;
                                            };
                                            ;
                                            SEQU CSIRSConfigNZPToAddModListr11;
                                            ;
                                            SEQU CSIRSConfigNZPToReleaseListr11;
                                            ;
                                            SEQU CSIRSConfigZPToAddModListr11;
                                            ;
                                            SEQU CSIRSConfigZPToReleaseListr11;
                                            ;
                                            ;
                                            int PMax;
                                            ;
                                            ;
                                            struct PRACHConfigSIB {
                                              int rootSequenceIndex;
                                              PRACHConfigInfo prachConfigInfo;
                                            };
                                            ;
                                            struct PRACHConfig {
                                              int rootSequenceIndex;
                                              //         PRACHConfigInfo
                                              //         prachConfigInfo;
                                            };
                                            ;
                                            struct PRACHConfigSCellr10 {
                                              int prachConfigIndexr10;
                                            };
                                            ;
                                            struct PRACHConfigInfo {
                                              int prachConfigIndex;
                                              bool highSpeedFlag;
                                              int zeroCorrelationZoneConfig;
                                              int prachFreqOffset;
                                            };
                                            ;
                                            ;
                                            bool PresenceAntennaPort1;
                                            ;
                                            ;
                                            struct PUCCHConfigCommon {
                                              enum deltaPUCCHShift {

                                                ds2 int nRBCQI;
                                                int nCSAN;
                                                int n1PUCCHAN;
                                              };
                                              ;
                                              struct PUCCHConfigDedicated {
                                                enum ackNackRepetition {
                                                  typedef release; struct setup{
                                                      enum repetitionFactor{

                                                          n4,
                                                          n6 int n1PUCCHANRep;};
                                              };
                                              //  Cond TDD   enum
                                              //  multiplexing}
                                              //  tddAckNackFeedbackMode   {
                                            };
                                            ;
                                            struct PUCCHConfigDedicatedv1020 {
                                              enum pucchFormatr10 {
                                                struct format3r10{
                                                    //      SEQU
                                                    //      n3PUCCHANListr10;
                                                    enum twoAntennaPortActivatedPUCCHFormat3r10{
                                                        typedef release;
                                                        struct setup{
                                                            SEQU
                                                                n3PUCCHANListP1r10;};
                                              //                    };
                                            };
                                            struct channelSelectionr10 {
                                              enum n1PUCCHANCSr10 {
                                                typedef release; struct setup{
                                                    SEQU n1PUCCHANCSListr10;};
                                              //                    };
                                            };
                                            //  Need OR                    };
                                            //  Need OR ,   enum  true}
                                            //  twoAntennaPortActivatedPUCCHFormat1a1br10
                                            //  {
                                            //  Need OR ,   enum  true}
                                            //  simultaneousPUCCHPUSCHr10   {
                                            //  Need OR    int
                                            //  n1PUCCHANRepP1r10;
                                          };
                                          ;
                                          struct PUCCHConfigDedicatedv1130 {
                                            enum n1PUCCHANCSv1130 {
                                              typedef release; struct setup{
                                                  SEQU n1PUCCHANCSListP1r11;};
                                            //                       };
                                            enum nPUCCHParamr11 {
                                              typedef release; struct setup{
                                                  int nPUCCHIdentityr11;
                                                  int n1PUCCHANr11;};
                                            //                      };
                                          };
                                          ;
                                          struct PUCCHConfigDedicatedv1250 {
                                            enum nkaPUCCHParam {
                                              typedef release;
                                              struct setup{int nkaPUCCHAN;};
                                          };
                                        };
                                        ;
                                        struct PUCCHConfigDedicatedv13xy {
                                          bool spatialBundlingPUCCH;
                                          bool spatialBundlingPUSCH;
                                          bool harqTimingTDD;
                                          int codebooksizeDetermination;
                                          int maximumPayloadCoderate;
                                          enum pucchFormat {
                                            struct format4{
                                                SEQU
                                                    format4resourceConfiguration;
                                                //  Need OR SEQU
                                                //  format4MultiCSIresourceConfiguration;
                                            };
                                          struct format5 {
                                            SEQU format5resourceConfiguration;
                                            //  Need OR SEQU
                                            //  format5MultiCSIresourceConfiguration;
                                            ;
                                          };
                                          //  Need OR                };
                                        };
                                        ;
                                        struct Format4resource {
                                          int startingPRBformat4;
                                          int numberOfPRBformat4;
                                        };
                                        ;
                                        struct Format5resource {
                                          int startingPRBformat5;
                                          int cdmindexformat5;
                                        };
                                        ;
                                        ;
                                        ;
                                        N1PUCCHANCSr10;
                                        ;
                                        ;
                                        struct PUSCHConfigCommon {
                                          struct puschConfigBasic {
                                            int nSB;
                                            enum hoppingMode {
                                              int puschHoppingOffset;
                                              bool enable64QAM;
                                            };
                                            ULReferenceSignalsPUSCH
                                                ulReferenceSignalsPUSCH;
                                          };
                                          ;
                                          struct PUSCHConfigCommonv1270 {
                                            enum true
                                          } enable64QAMv1270{};
                                          ;
                                          struct PUSCHConfigDedicated {
                                            int betaOffsetACKIndex;
                                            int betaOffsetRIIndex;
                                            int betaOffsetCQIIndex;
                                          };
                                          ;
                                          struct PUSCHConfigDedicatedv1020 {
                                            struct betaOffsetMCr10 {
                                              int betaOffsetACKIndexMCr10;
                                              int betaOffsetRIIndexMCr10;
                                              int betaOffsetCQIIndexMCr10;
                                              //  Need OR                    };
                                              //  Need OR ,      enum  true}
                                              //  groupHoppingDisabledr10   {
                                              //  Need OR       enum  true}
                                              //  dmrsWithOCCActivatedr10   {
                                            };
                                            ;
                                            struct PUSCHConfigDedicatedv1130 {
                                              enum puschDMRSr11 {
                                                typedef release; struct setup{
                                                    int nPUSCHIdentityr11;
                                                    int nDMRSCSHIdentityr11;};
                                            };
                                          };
                                          ;
                                          struct PUSCHConfigDedicatedv1250 {
                                            enum uciOnPUSCH {
                                              typedef release; struct setup{
                                                  int betaOffsetACKIndexSubframeSet2;
                                                  int betaOffsetRIIndexSubframeSet2;
                                                  int betaOffsetCQIIndexSubframeSet2;
                                                  struct betaOffsetMC{
                                                      int betaOffsetACKIndexMCSubframeSet2;
                                                      int betaOffsetRIIndexMCSubframeSet2;
                                                      int betaOffsetCQIIndexMCSubframeSet2;
                                                      //  Need OR };
                                                  };
                                          };
                                        };
                                        ;
                                        struct PUSCHConfigDedicatedv13xy {
                                          struct betaOffset {
                                            int betaOffsetACKIndex;
                                            int betaOffset2ACKIndex;
                                            //  Need OR                   };
                                            struct betaOffsetMC {
                                              int betaOffsetACKIndexMC;
                                              int betaOffset2ACKIndexMC;
                                              //  Need OR                   };
                                              struct betaOffsetSubframeset2 {
                                                int betaOffsetACKIndexSubframeSet2;
                                                int betaOffset2ACKIndexSubframeSet2;
                                                //  Need OR                   };
                                                struct
                                                    betaOffsetSubframeset2MC {
                                                  int betaOffsetACKIndexMCSubframeSet2;
                                                  int betaOffset2ACKIndexMCSubframeSet2;
                                                  //  Need OR };
                                                };
                                                ;
                                                struct
                                                    PUSCHConfigDedicatedSCellr10 {
                                                  //  Need OR ,     enum  true}
                                                  //  groupHoppingDisabledr10 {
                                                  //  Need OR      enum  true}
                                                  //  dmrsWithOCCActivatedr10 {
                                                };
                                                ;
                                                struct ULReferenceSignalsPUSCH {
                                                  bool groupHoppingEnabled;
                                                  int groupAssignmentPUSCH;
                                                  bool sequenceHoppingEnabled;
                                                  int cyclicShift;
                                                };
                                                ;
                                                ;
                                                struct RACHConfigCommon {
                                                  struct preambleInfo {
                                                    enum numberOfRAPreambles {
                                                      n4 n8 n12 n16 n20 n24 n28;
                                                      n32 n36 n40 n44 n48 n52
                                                          n56;
                                                      n60 n64
                                                    };
                                                    struct
                                                        preamblesGroupAConfig {
                                                      enum sizeOfRAPreamblesGroupA {
                                                        n4 n8 n12 n16 n20 n24
                                                            n28;
                                                        n32 n36 n40 n44 n48 n52
                                                            n56;
                                                        n60
                                                      };
                                                      enum messageSizeGroupA {

                                                        b144,
                                                        b208 enum messagePowerOffsetGroupB{
                                                            minusinfinity dB0
                                                                dB5 dB8 dB10
                                                                    dB12;
                                                            dB15 dB18};

                                                      ;
                                                      //                   };
                                                    };
                                                    PowerRampingParameters
                                                        powerRampingParameters;
                                                    struct raSupervisionInfo {
                                                      PreambleTransMax
                                                          preambleTransMax;
                                                      enum raResponseWindowSize {
                                                        sf2 sf3 sf4 sf5 sf6 sf7;
                                                        sf8 sf10
                                                      };
                                                      enum macContentionResolutionTimer {
                                                        sf8 sf16 sf24 sf32 sf40
                                                            sf48;
                                                        sf56 sf64
                                                      };
                                                    };
                                                    int maxHARQMsg3Tx;

                                                    ;
                                                  };
                                                  ;
                                                  struct RACHConfigCommonv1250 {
                                                    struct txFailParams {
                                                      enum connEstFailCount {

                                                        n2,
                                                        n3 enum connEstFailOffsetValidity{

                                                            s60, s120 s300 s420
                                                                     s600 s900};
                                                        //       int
                                                        //       connEstFailOffset;
                                                      };
                                                    };
                                                    ;
                                                    struct
                                                        RACHConfigCommonSCellr11 {
                                                      PowerRampingParameters
                                                          powerRampingParametersr11;
                                                      struct
                                                          raSupervisionInfor11 {
                                                        PreambleTransMax
                                                            preambleTransMaxr11;
                                                      };

                                                      ;
                                                    };
                                                    ;
                                                    struct
                                                        PowerRampingParameters {
                                                      enum powerRampingStep {

                                                        dB2,
                                                        dB4 enum preambleInitialReceivedTargetPower{
                                                            dBm120 dBm118 dBm116
                                                                dBm114 dBm112;
                                                            dBm110 dBm108 dBm106
                                                                dBm104 dBm102;
                                                            dBm100 dBm98 dBm96
                                                                dBm94;
                                                            dBm92 dBm90};
                                                    };
                                                    ;
                                                    enum PreambleTransMax {
                                                      n8 n10 n20 n50 n3 n4 n5 n6
                                                          n7;
                                                      n100 n200
                                                    };
                                                    ;
                                                    ;
                                                    struct RACHConfigDedicated {
                                                      int raPreambleIndex;
                                                      int raPRACHMaskIndex;
                                                    };
                                                    ;
                                                    ;
                                                    struct
                                                        RadioResourceConfigCommonSIB {
                                                      RACHConfigCommon
                                                          rachConfigCommon;
                                                      BCCHConfig bcchConfig;
                                                      PCCHConfig pcchConfig;
                                                      PRACHConfigSIB
                                                          prachConfig;
                                                      PDSCHConfigCommon
                                                          pdschConfigCommon;
                                                      PUSCHConfigCommon
                                                          puschConfigCommon;
                                                      PUCCHConfigCommon
                                                          pucchConfigCommon;
                                                      SoundingRSULConfigCommon
                                                          soundingRSULConfigCommon;
                                                      UplinkPowerControlCommon
                                                          uplinkPowerControlCommon;
                                                      ULCyclicPrefixLength
                                                          ulCyclicPrefixLength;

                                                      ;
                                                      //  Need OR
                                                      //  UplinkPowerControlCommonv1020
                                                      //  uplinkPowerControlCommonv1020;

                                                      ;
                                                      //  Need OR
                                                      //  RACHConfigCommonv1250
                                                      //  rachConfigCommonv1250;

                                                      ;
                                                      //  Need OR
                                                      //  PUSCHConfigCommonv1270
                                                      //  puschConfigCommonv1270;

                                                      ;
                                                    };
                                                    ;
                                                    struct
                                                        RadioResourceConfigCommon {
                                                      //          RACHConfigCommon
                                                      //          rachConfigCommon;
                                                      PRACHConfig prachConfig;
                                                      //          PDSCHConfigCommon
                                                      //          pdschConfigCommon;
                                                      PUSCHConfigCommon
                                                          puschConfigCommon;
                                                      //           PHICHConfig
                                                      //           phichConfig;
                                                      //          PUCCHConfigCommon
                                                      //          pucchConfigCommon;
                                                      //        SoundingRSULConfigCommon
                                                      //        soundingRSULConfigCommon;
                                                      //        UplinkPowerControlCommon
                                                      //        uplinkPowerControlCommon;
                                                      //        AntennaInfoCommon
                                                      //        antennaInfoCommon;
                                                      //             PMax pMax;
                                                      //  Cond TDD
                                                      //  TDDConfig tddConfig;
                                                      ULCyclicPrefixLength
                                                          ulCyclicPrefixLength;

                                                      ;
                                                      //      UplinkPowerControlCommonv1020
                                                      //      uplinkPowerControlCommonv1020;

                                                      ;
                                                      //  Cond TDD3
                                                      //  TDDConfigv1130
                                                      //  tddConfigv1130;

                                                      ;
                                                      //  Need OR
                                                      //  PUSCHConfigCommonv1270
                                                      //  puschConfigCommonv1270;

                                                      ;
                                                      //      UplinkPowerControlCommonv13xy
                                                      //      uplinkPowerControlCommonv13xy;

                                                      ;
                                                    };
                                                    ;
                                                    struct
                                                        RadioResourceConfigCommonPSCell {
                                                      RadioResourceConfigCommonSCellr10
                                                          basicFields;
                                                      PUCCHConfigCommon
                                                          pucchConfigCommon;
                                                      RACHConfigCommon
                                                          rachConfigCommon;
                                                      UplinkPowerControlCommonPSCell
                                                          uplinkPowerControlCommonPSCell;

                                                      ;
                                                      //      UplinkPowerControlCommonv13xy
                                                      //      uplinkPowerControlCommonv13xy;

                                                      ;
                                                    };
                                                    ;
                                                    struct
                                                        RadioResourceConfigCommonSCellr10 {
                                                      //  DL configuration as
                                                      //  well as configuration
                                                      //  applicable for DL and
                                                      //  UL;
                                                      struct
                                                          nonULConfigurationr10 {
                                                        //  1: Cell
                                                        //  characteristics;
                                                        enum dlBandwidthr10 {

                                                          n15,
                                                          n25,
                                                          n50,
                                                          n75
                                                          //  2: Physical
                                                          //  configuration
                                                          //  general;
                                                          AntennaInfoCommon
                                                              antennaInfoCommonr10;
                                                          //  Need OR
                                                          //  MBSFNSubframeConfigList
                                                          //  mbsfnSubframeConfigListr10;
                                                          //  3: Physical
                                                          //  configuration
                                                          //  control;
                                                          PHICHConfig
                                                              phichConfigr10;
                                                          //  4: Physical
                                                          //  configuration
                                                          //  physical channels;
                                                          PDSCHConfigCommon
                                                              pdschConfigCommonr10;
                                                          //  Cond TDDSCell
                                                          //  TDDConfig
                                                          //  tddConfigr10;
                                                        };
                                                        //  UL configuration;
                                                        struct
                                                            ulConfigurationr10 {
                                                          struct ulFreqInfor10 {
                                                            //        ARFCNValueEUTRA
                                                            //        ulCarrierFreqr10;
                                                            enum ulBandwidthr10 {
                                                              //      n25  n50
                                                              //      n75 n100};
                                                              AdditionalSpectrumEmission
                                                                  additionalSpectrumEmissionSCellr10;
                                                            };
                                                            //           PMax
                                                            //           pMaxr10;
                                                            UplinkPowerControlCommonSCellr10
                                                                uplinkPowerControlCommonSCellr10;
                                                            //  A special
                                                            //  version of IE
                                                            //  UplinkPowerControlCommon
                                                            //  may be
                                                            //  introduced;
                                                            //  3: Physical
                                                            //  configuration
                                                            //  control;
                                                            SoundingRSULConfigCommon
                                                                soundingRSULConfigCommonr10;
                                                            ULCyclicPrefixLength
                                                                ulCyclicPrefixLengthr10;
                                                            //  4: Physical
                                                            //  configuration
                                                            //  physical
                                                            //  channels;
                                                            //  Cond TDDORNoR11
                                                            //  PRACHConfigSCellr10
                                                            //  prachConfigSCellr10;
                                                            PUSCHConfigCommon
                                                                puschConfigCommonr10;
                                                            //  Need OR };

                                                            ;
                                                            //       ARFCNValueEUTRAv9e0
                                                            //       ulCarrierFreqv1090;

                                                            ;
                                                            //  Cond ULSCell
                                                            //  RACHConfigCommonSCellr11
                                                            //  rachConfigCommonSCellr11;
                                                            //  Cond UL
                                                            //  PRACHConfig
                                                            //  prachConfigSCellr11;
                                                            //  Cond TDD2
                                                            //  TDDConfigv1130
                                                            //  tddConfigv1130;
                                                            uplinkPowerControlCommonSCellv1130;
                                                            //  Cond UL
                                                            //  UplinkPowerControlCommonSCellv1130;

                                                            ;
                                                            //  Need OR
                                                            //  PUSCHConfigCommonv1270
                                                            //  puschConfigCommonv1270;

                                                            ;
                                                            //  Cond UL
                                                            //  PUCCHConfigCommon
                                                            //  pucchConfigCommon;
                                                            //  Cond UL
                                                            //  UplinkPowerControlCommonPSCell
                                                            //  uplinkPowerControlCommonSCellv13xx;

                                                            ;
                                                          };
                                                          ;
                                                          struct BCCHConfig {
                                                            enum n16
                                                          } modificationPeriodCoeff{

                                                              n4};
                                                          ;
                                                          struct PCCHConfig {
                                                            enum defaultPagingCycle {
                                                              rf32 rf64 rf128
                                                                  rf256
                                                            };
                                                            enum nB {
                                                              fourT twoT oneT
                                                                  halfT quarterT
                                                                      oneEighthT;
                                                              oneSixteenthT
                                                                  oneThirtySecondT
                                                            };
                                                          };
                                                          ;
                                                          enum len2
                                                        } ULCyclicPrefixLength {
                                                          ;
                                                          ;
                                                          struct
                                                              RadioResourceConfigDedicated {
                                                            //  Cond HOConn
                                                            //  SRBToAddModList
                                                            //  srbToAddModList;
                                                            //  Cond HOtoEUTRA
                                                            //  DRBToAddModList
                                                            //  drbToAddModList;
                                                            //         DRBToReleaseList
                                                            //         drbToReleaseList;
                                                            enum macMainConfig {
                                                              MACMainConfig
                                                                  explicitValue;
                                                              typedef defaultValue;
                                                              //  Cond
                                                              //  HOtoEUTRA2 };
                                                              //           SPSConfig
                                                              //           spsConfig;
                                                              //        PhysicalConfigDedicated
                                                              //        physicalConfigDedicated;

                                                              ;
                                                              //       RLFTimersAndConstantsr9
                                                              //       rlfTimersAndConstantsr9;

                                                              ;
                                                              //      MeasSubframePatternPCellr10
                                                              //      measSubframePatternPCellr10;

                                                              ;
                                                              //        NeighCellsCRSInfor11
                                                              //        neighCellsCRSInfor11;

                                                              ;
                                                              //       NAICSAssistanceInfo
                                                              //       naicsInfo;

                                                              ;
                                                              //  Cond CRSIM
                                                              //  NeighCellsCRSInfo
                                                              //  neighCellsCRSInfo;

                                                              ;
                                                            };
                                                            ;
                                                            struct
                                                                RadioResourceConfigDedicatedPSCell {
                                                              //  UE specific
                                                              //  configuration
                                                              //  extensions
                                                              //  applicable for
                                                              //  an PSCell;
                                                              //       PhysicalConfigDedicated
                                                              //       physicalConfigDedicatedPSCell;
                                                              //          SPSConfig
                                                              //          spsConfig;
                                                              //      NAICSAssistanceInfo
                                                              //      naicsInfo;

                                                              ;
                                                              //      NeighCellsCRSInfo
                                                              //      neighCellsCRSInfoPSCell;

                                                              ;
                                                            };
                                                            ;
                                                            struct
                                                                RadioResourceConfigDedicatedSCG {
                                                              //        DRBToAddModListSCG
                                                              //        drbToAddModListSCG;
                                                              //          MACMainConfig
                                                              //          macMainConfigSCG;
                                                              //      RLFTimersAndConstantsSCG
                                                              //      rlfTimersAndConstantsSCG;

                                                              ;
                                                            };
                                                            ;
                                                            struct
                                                                RadioResourceConfigDedicatedSCellr10 {
                                                              //  UE specific
                                                              //  configuration
                                                              //  extensions
                                                              //  applicable for
                                                              //  an SCell;
                                                              //      PhysicalConfigDedicatedSCellr10
                                                              //      physicalConfigDedicatedSCellr10;

                                                              ;
                                                              //  Cond SCellAdd
                                                              //  MACMainConfigSCellr11
                                                              //  macMainConfigSCellr11;

                                                              ;
                                                              //      NAICSAssistanceInfo
                                                              //      naicsInfo;

                                                              ;
                                                              //      NeighCellsCRSInfo
                                                              //      neighCellsCRSInfoSCell;

                                                              ;
                                                              ;
                                                            };
                                                            ;
                                                            SEQU
                                                                SRBToAddModList;
                                                            ;
                                                            struct SRBToAddMod {
                                                              int srbIdentity;
                                                              enum rlcConfig {
                                                                RLCConfig
                                                                    explicitValue;
                                                                typedef defaultValue;
                                                                //  Cond Setup
                                                                //  };
                                                                enum logicalChannelConfig{
                                                                    LogicalChannelConfig
                                                                        explicitValue;
                                                                    typedef defaultValue;
                                                                    //  Cond
                                                                    //  Setup };

                                                                    ;};
                                                              ;
                                                              SEQU
                                                                  DRBToAddModList;
                                                              ;
                                                              SEQU
                                                                  DRBToAddModListSCG;
                                                              ;
                                                              struct
                                                                  DRBToAddMod {
                                                                //  Cond
                                                                //  DRBSetup
                                                                //  int
                                                                //  epsBearerIdentity;
                                                                DRBIdentity
                                                                    drbIdentity;
                                                                //  Cond PDCP
                                                                //  PDCPConfig
                                                                //  pdcpConfig;
                                                                //  Cond SetupM
                                                                //  RLCConfig
                                                                //  rlcConfig;
                                                                //  Cond
                                                                //  DRBSetupM
                                                                //  int
                                                                //  logicalChannelIdentity;
                                                                //  Cond SetupM
                                                                //  LogicalChannelConfig
                                                                //  logicalChannelConfig;

                                                                ;
                                                                //     ,  enum
                                                                //     toMCG}
                                                                //     drbTypeChange
                                                                {
                                                                  //       RLCConfigv1250
                                                                  //       rlcConfigv1250;

                                                                  ;
                                                                  //       RLCConfigv13xx
                                                                  //       rlcConfigv13xx;

                                                                  ;
                                                                };
                                                                ;
                                                                struct
                                                                    DRBToAddModSCG {
                                                                  DRBIdentity
                                                                      drbIdentity;
                                                                  enum drbType {
                                                                    typedef split;
                                                                    struct scg{
                                                                        //  Cond
                                                                        //  DRBSetup
                                                                        //  int
                                                                        //  epsBearerIdentity;
                                                                        //  Cond
                                                                        //  PDCPS
                                                                        //  PDCPConfig
                                                                        //  pdcpConfig;
                                                                    };
                                                                    //  Cond
                                                                    //  SetupS2
                                                                    //  };
                                                                    //  Cond
                                                                    //  SetupS
                                                                    //  RLCConfig
                                                                    //  rlcConfigSCG;
                                                                    //        RLCConfigv1250
                                                                    //        rlcConfigv1250;
                                                                    //  Cond
                                                                    //  DRBSetupS
                                                                    //  int
                                                                    //  logicalChannelIdentitySCG;
                                                                    //  Cond
                                                                    //  SetupS
                                                                    //  LogicalChannelConfig
                                                                    //  logicalChannelConfigSCG;

                                                                    ;
                                                                  };
                                                                  ;
                                                                  SEQU
                                                                      DRBToReleaseList;
                                                                  ;
                                                                  enum MeasSubframePatternPCellr10 {
                                                                    typedef release;
                                                                    MeasSubframePatternr10
                                                                        setup;
                                                                  };
                                                                  ;
                                                                  enum NeighCellsCRSInfor11 {
                                                                    typedef release;
                                                                    CRSAssistanceInfoListr11
                                                                        setup;
                                                                  };
                                                                  ;
                                                                  SEQU
                                                                      CRSAssistanceInfoListr11;
                                                                  ;
                                                                  CRSAssistanceInfor11 struct
                                                                  {
                                                                    PhysCellId
                                                                        physCellIdr11;
                                                                    enum antennaPortsCountr11 {

                                                                      an2,
                                                                      an4 MBSFNSubframeConfigList
                                                                          mbsfnSubframeConfigListr11;

                                                                      ;
                                                                    };
                                                                    ;
                                                                    enum NeighCellsCRSInfo {
                                                                      typedef release;
                                                                      CRSAssistanceInfoList
                                                                          setup;
                                                                    };
                                                                    ;
                                                                    SEQU
                                                                        CRSAssistanceInfoList;
                                                                    ;
                                                                    CRSAssistanceInfo struct
                                                                    {
                                                                      PhysCellId
                                                                          physCellId;
                                                                      enum antennaPortsCount {

                                                                        an2,
                                                                        an4
                                                                        //      MBSFNSubframeConfigList  mbsfnSubframeConfigList;

                                                                        ;
                                                                      };
                                                                      ;
                                                                      enum NAICSAssistanceInfo {
                                                                        typedef release;
                                                                        struct
                                                                        setup{
                                                                            //         NeighCellsToReleaseList  neighCellsToReleaseList;
                                                                            //        NeighCellsToAddModList  neighCellsToAddModList;
                                                                            //            Pa     servCellpa;
                                                                        };
                                                                      };
                                                                      ;
                                                                      SEQU
                                                                          NeighCellsToReleaseList;
                                                                      ;
                                                                      SEQU
                                                                          NeighCellsToAddModList;
                                                                      ;
                                                                      struct
                                                                          NeighCellsInfo {
                                                                        PhysCellId
                                                                            physCellId;
                                                                        int pb;
                                                                        enum crsPortsCount {

                                                                          n2,
                                                                          n4
                                                                          //         MBSFNSubframeConfigList  mbsfnSubframeConfig;
                                                                          SEQU
                                                                              paList;
                                                                          std::bitset<
                                                                              8>
                                                                              transmissionModeList;
                                                                          int resAllocGranularity;

                                                                          ;
                                                                        };
                                                                        dB6,
                                                                            dB4dot77,
                                                                            dB3,
                                                                            dB1dot77,
                                                                            Pa enum {
                                                                              dB0 dB1
                                                                                  dB2 dB3
                                                                            };
                                                                        ;
                                                                        ;
                                                                        enum RLCConfig {
                                                                          struct
                                                                          am{ULAMRLC
                                                                                 ulAMRLC;
                                                                             DLAMRLC
                                                                                 dlAMRLC;};
                                                                        struct
                                                                            umBiDirectional {
                                                                          ULUMRLC
                                                                              ulUMRLC;
                                                                          DLUMRLC
                                                                              dlUMRLC;
                                                                        };
                                                                        struct
                                                                            umUniDirectionalUL {
                                                                          ULUMRLC
                                                                              ulUMRLC;
                                                                        };
                                                                        struct
                                                                            umUniDirectionalDL {
                                                                          DLUMRLC
                                                                              dlUMRLC;
                                                                        };

                                                                        ;
                                                                      };
                                                                      ;
                                                                      struct
                                                                          RLCConfigv1250 {
                                                                        bool
                                                                            ulextendedRLCLIField;
                                                                        bool
                                                                            dlextendedRLCLIField;
                                                                      };
                                                                      ;
                                                                      struct
                                                                          RLCConfigv13xx {
                                                                        bool
                                                                            ulextendedRLCAMSN;
                                                                        bool
                                                                            dlextendedRLCAMSN;
                                                                        //  Need
                                                                        //  OR
                                                                        //  PollPDUv13xy
                                                                        //  pollPDUv13xy;
                                                                      };
                                                                      ;
                                                                      struct
                                                                          ULAMRLC {
                                                                        TPollRetransmit
                                                                            tPollRetransmit;
                                                                        PollPDU
                                                                            pollPDU;
                                                                        PollByte
                                                                            pollByte;
                                                                        enum maxRetxThreshold {
                                                                          t1 t2 t3 t4
                                                                              t6 t8 t16
                                                                                  t32
                                                                        };
                                                                      };
                                                                      ;
                                                                      struct
                                                                          DLAMRLC {
                                                                        TReordering
                                                                            tReordering;
                                                                        TStatusProhibit
                                                                            tStatusProhibit;
                                                                      };
                                                                      ;
                                                                      struct
                                                                          ULUMRLC {
                                                                        SNFieldLength
                                                                            snFieldLength;
                                                                      };
                                                                      ;
                                                                      struct
                                                                          DLUMRLC {
                                                                        SNFieldLength
                                                                            snFieldLength;
                                                                        TReordering
                                                                            tReordering;
                                                                      };
                                                                      ;
                                                                      enum size10
                                                                    } SNFieldLength {
                                                                      ;
                                                                      enum TPollRetransmit {
                                                                        ms5 ms10 ms15
                                                                            ms20 ms25 ms30
                                                                                ms35;
                                                                        ms40 ms45 ms50
                                                                            ms55 ms60 ms65
                                                                                ms70;
                                                                        ms75 ms80 ms85
                                                                            ms90 ms95 ms100
                                                                                ms105;
                                                                        ms110 ms115 ms120
                                                                            ms125 ms130
                                                                                ms135;
                                                                        ms140 ms145 ms150
                                                                            ms155 ms160
                                                                                ms165;
                                                                        ms170 ms175 ms180
                                                                            ms185 ms190
                                                                                ms195;
                                                                        ms200 ms205 ms210
                                                                            ms215 ms220
                                                                                ms225;
                                                                        ms230 ms235 ms240
                                                                            ms245 ms250
                                                                                ms300;
                                                                        ms350 ms400 ms450
                                                                            ms500 spare9
                                                                                spare8;
                                                                        spare7 spare6
                                                                            spare5 spare4
                                                                                spare3;
                                                                        spare2
                                                                            spare1
                                                                      };
                                                                      ;
                                                                      enum PollPDU {
                                                                        p4 p8 p16 p32
                                                                            p64 p128
                                                                                p256
                                                                                    pInfinity
                                                                      };
                                                                      ;
                                                                      enum PollPDUv13xy {
                                                                        p512 p1024 p2048
                                                                            p4096 p6144
                                                                                p8192 p12288
                                                                                    p16384
                                                                      };
                                                                      ;
                                                                      enum PollByte {
                                                                        kB25 kB50 kB75 kB100
                                                                            kB125 kB250
                                                                                kB375;
                                                                        kB500 kB750 kB1000
                                                                            kB1250 kB1500
                                                                                kB2000;
                                                                        kB3000 kBinfinity
                                                                            spare1
                                                                      };
                                                                      ;
                                                                      enum TReordering {
                                                                        ms0 ms5 ms10 ms15
                                                                            ms20 ms25 ms30
                                                                                ms35;
                                                                        ms40 ms45 ms50
                                                                            ms55 ms60 ms65
                                                                                ms70;
                                                                        ms75 ms80 ms85
                                                                            ms90 ms95 ms100
                                                                                ms110;
                                                                        ms120 ms130 ms140
                                                                            ms150 ms160
                                                                                ms170;
                                                                        ms180 ms190
                                                                            ms200
                                                                                spare1
                                                                      };
                                                                      ;
                                                                      enum TStatusProhibit {
                                                                        ms0 ms5 ms10 ms15
                                                                            ms20 ms25 ms30
                                                                                ms35;
                                                                        ms40 ms45 ms50
                                                                            ms55 ms60 ms65
                                                                                ms70;
                                                                        ms75 ms80 ms85
                                                                            ms90 ms95 ms100
                                                                                ms105;
                                                                        ms110 ms115 ms120
                                                                            ms125 ms130
                                                                                ms135;
                                                                        ms140 ms145 ms150
                                                                            ms155 ms160
                                                                                ms165;
                                                                        ms170 ms175 ms180
                                                                            ms185 ms190
                                                                                ms195;
                                                                        ms200 ms205 ms210
                                                                            ms215 ms220
                                                                                ms225;
                                                                        ms230 ms235 ms240
                                                                            ms245 ms250
                                                                                ms300;
                                                                        ms350 ms400 ms450
                                                                            ms500 spare8
                                                                                spare7;
                                                                        spare6 spare5
                                                                            spare4 spare3
                                                                                spare2;
                                                                        spare1
                                                                      };
                                                                      ;
                                                                      ;
                                                                      enum RLFTimersAndConstantsr9 {
                                                                        typedef release;
                                                                        struct
                                                                        setup{enum t301r9{
                                                                            ms100 ms200 ms300
                                                                                ms400 ms600 ms1000
                                                                                    ms1500;
                                                                            ms2000};
                                                                      enum t310r9 {
                                                                        ms0 ms50 ms100
                                                                            ms200 ms500
                                                                                ms1000
                                                                                    ms2000
                                                                      };
                                                                      enum n310r9 {
                                                                        n1 n2 n3 n4
                                                                            n6 n8 n10
                                                                                n20
                                                                      };
                                                                      enum t311r9 {
                                                                        ms1000 ms3000
                                                                            ms5000 ms10000
                                                                                ms15000;
                                                                        ms20000
                                                                            ms30000
                                                                      };
                                                                      enum n311r9 {
                                                                        n1 n2 n3 n4
                                                                            n5 n6 n8
                                                                                n10
                                                                      };

                                                                      ;
                                                                    };
                                                                  };
                                                                  ;
                                                                  enum RLFTimersAndConstantsSCG {
                                                                    typedef release;
                                                                    struct
                                                                    setup{
                                                                        enum t313{
                                                                            ms0 ms50 ms100 ms200
                                                                                ms500 ms1000
                                                                                    ms2000};
                                                                        enum n313{
                                                                            n1 n2 n3 n4
                                                                                n6 n8 n10
                                                                                    n20};
                                                                        enum n314{
                                                                            n1 n2 n3 n4
                                                                                n5 n6 n8
                                                                                    n10};

                                                                        ;};
                                                                };
                                                                ;
                                                                ;
                                                                struct
                                                                    RNSubframeConfigr10 {
                                                                  enum subframeConfigPatternr10 {
                                                                    std::bitset<
                                                                        8>
                                                                        subframeConfigPatternFDDr10;
                                                                    int subframeConfigPatternTDDr10;
                                                                    //                      };
                                                                    struct
                                                                    rpdcchConfigr10{
                                                                        enum resourceAllocationTyper10{

                                                                            type1,
                                                                            type2Localized spare4
                                                                                spare3 spare2
                                                                                    spare1};
                                                                        enum resourceBlockAssignmentr10{enum type01r10{
                                                                            std::bitset<
                                                                                6>
                                                                                nrb6r10;
                                                                            std::bitset<
                                                                                8>
                                                                                nrb15r10;
                                                                            std::bitset<
                                                                                13>
                                                                                nrb25r10;
                                                                            std::bitset<
                                                                                17>
                                                                                nrb50r10;
                                                                            std::bitset<
                                                                                19>
                                                                                nrb75r10;
                                                                            std::bitset<
                                                                                25>
                                                                                nrb100r10;};
                                                                  enum type2r10 {
                                                                    std::bitset<
                                                                        5>
                                                                        nrb6r10;
                                                                    std::bitset<
                                                                        7>
                                                                        nrb15r10;
                                                                    std::bitset<
                                                                        9>
                                                                        nrb25r10;
                                                                    std::bitset<
                                                                        11>
                                                                        nrb50r10;
                                                                    std::bitset<
                                                                        12>
                                                                        nrb75r10;
                                                                    std::bitset<
                                                                        13>
                                                                        nrb100r10;
                                                                  };

                                                                  ;
                                                                };
                                                                enum demodulationRSr10 {
                                                                  enum interleavingr10{
                                                                      enum dmrs} noInterleavingr10{};
                                                                  int pdschStartr10;
                                                                  enum pucchConfigr10{
                                                                      enum tdd{
                                                                          struct
                                                                          channelSelectionMultiplexingBundling{
                                                                              SEQU
                                                                                  n1PUCCHANListr10;};
                                                                struct
                                                                    fallbackForFormat3 {
                                                                  int n1PUCCHANP0r10;
                                                                  //  Need OR
                                                                  //  int
                                                                  //  n1PUCCHANP1r10;
                                                                };
                                                              };
                                                              struct fdd {
                                                                int n1PUCCHANP0r10;
                                                                //  Need OR
                                                                //  int
                                                                //  n1PUCCHANP1r10;
                                                              };
                                                            };

                                                            ;
                                                            //                      };

                                                            ;
                                                          };
                                                          ;
                                                          ;
                                                          enum SchedulingRequestConfig {
                                                            typedef release;
                                                            struct setup{
                                                                int srPUCCHResourceIndex;
                                                                int srConfigIndex;
                                                                enum dsrTransMax{
                                                                    n4 n8 n16 n32 n64
                                                                        spare3 spare2
                                                                            spare1};};
                                                        };
                                                        ;
                                                        struct
                                                            SchedulingRequestConfigv1020 {
                                                          //  Need OR      int
                                                          //  srPUCCHResourceIndexP1r10;
                                                        };
                                                        ;
                                                        ;
                                                        enum SoundingRSULConfigCommon {
                                                          typedef release;
                                                          struct
                                                          setup{enum srsBandwidthConfig{

                                                              bw1, bw2, bw3,
                                                              bw4, bw5,
                                                              bw6 enum srsSubframeConfig{
                                                                  sc0 sc1 sc2 sc3
                                                                      sc4 sc5 sc6
                                                                          sc7;
                                                                  sc8 sc9 sc10 sc11
                                                                      sc12 sc13 sc14
                                                                          sc15};
                                                        bool
                                                            ackNackSRSSimultaneousTransmission;
                                                        //  Cond TDD     enum
                                                        //  true}
                                                        //  srsMaxUpPts    {
                                                      };
                                                    };
                                                    ;
                                                    enum SoundingRSULConfigDedicated {
                                                      typedef release; struct
                                                      setup{enum srsBandwidth{

                                                          bw1,
                                                          bw2 enum srsHoppingBandwidth{

                                                              hbw1,
                                                              hbw2 int
                                                                  freqDomainPosition;
                                                              bool duration;
                                                              int srsConfigIndex;
                                                              int transmissionComb;
                                                              enum cs7}
                                                    cyclicShift{

                                                        cs1, cs2, cs3, cs4,
                                                        cs5};
                                                  };
                                                  ;
                                                  struct
                                                      SoundingRSULConfigDedicatedv1020 {
                                                    SRSAntennaPort
                                                        srsAntennaPortr10;
                                                  };
                                                  ;
                                                  enum SoundingRSULConfigDedicatedv13x0 {
                                                    typedef release;
                                                    struct setup{
                                                        //  Need OR       int
                                                        //  transmissionCombv13x0;
                                                        //  Need OR ,  enum
                                                        //  cs11}
                                                        //  cyclicShiftv13x0 {

                                                        cs9
                                                        //  Need OR    enum
                                                        //  n4}
                                                        //  transmissionCombNum
                                                        //  {
                                                    };
                                                  };
                                                  ;
                                                  enum SoundingRSULConfigDedicatedUpPTsExt {
                                                    typedef release; struct
                                                    setup{enum srsUpPtsAdd{enum srsBandwidth{

                                                        bw1,
                                                        bw2 enum srsHoppingBandwidth{

                                                            hbw1,
                                                            hbw2 int
                                                                freqDomainPosition;
                                                            bool duration;
                                                            int srsConfigIndex;
                                                            int transmissionComb;
                                                            enum cyclicShift{

                                                                cs1, cs2, cs3,
                                                                cs4, cs5,
                                                                cs6 cs8 cs9 cs10
                                                                    cs11};
                                                            SRSAntennaPort
                                                                srsAntennaPort;
                                                            enum n4}
                                                  transmissionCombNum{};
                                                };
                                                ;
                                                enum SoundingRSULConfigDedicatedAperiodicr10 {
                                                  typedef release; struct setup{
                                                      int srsConfigIndexApr10;
                                                      //   SEQU
                                                      //   srsConfigApDCIFormat4r10;
                                                      enum srsActivateApr10{
                                                          typedef release;
                                                          struct setup{
                                                              SRSConfigApr10
                                                                  srsConfigApDCIFormat0r10;
                                                              SRSConfigApr10
                                                                  srsConfigApDCIFormat1a2b2cr10;

                                                              ;};
                                                //                     };
                                              };
                                            };
                                            ;
                                            enum SoundingRSULConfigDedicatedAperiodicv13x0 {
                                              typedef release; struct setup{
                                                  //   SEQU
                                                  //   srsConfigApDCIFormat4v13x0;
                                                  enum srsActivateApv13x0{
                                                      typedef release;
                                                      struct setup{
                                                          //      SRSConfigApv13x0
                                                          //      srsConfigApDCIFormat0v13x0;
                                                          //      SRSConfigApv13x0
                                                          //      srsConfigApDCIFormat1a2b2cv13x0;

                                                          ;};
                                            //                     };
                                          };
                                        };
                                        ;
                                        enum SoundingRSULConfigDedicatedAperiodicUpPTsExt {
                                          typedef release;
                                          struct setup{enum srsUpPtsAdd{
                                              int srsConfigIndexAp;
                                              //   SEQU   srsConfigApDCIFormat4;
                                              enum srsActivateAp{
                                                  typedef release; struct setup{
                                                      SRSConfigAp
                                                          srsConfigApDCIFormat0;
                                                      SRSConfigAp
                                                          srsConfigApDCIFormat1a2b2c;

                                                      ;};
                                        //                     };
                                      };
                                    };
                                    ;
                                    SRSConfigApr10 struct {
                                      SRSAntennaPort srsAntennaPortApr10;
                                      enum srsBandwidthApr10 {

                                        bw1,
                                        bw2 int freqDomainPositionApr10;
                                        int transmissionCombApr10;
                                        enum cs7
                                      }
                                      cyclicShiftApr10{

                                          cs1, cs2, cs3, cs4, cs5};
                                      ;
                                      SRSConfigApv13x0 struct {
                                        //  Need OR         int
                                        //  transmissionCombApv13x0;
                                        //  Need OR ,  enum   cs11}
                                        //  cyclicShiftApv13x0   {

                                        cs9
                                        //  Need OR     enum   n4}
                                        //  transmissionCombNum   {
                                      };
                                      ;
                                      SRSConfigAp struct {
                                        SRSAntennaPort srsAntennaPortApr10;
                                        enum srsBandwidthApr10 {

                                          bw1,
                                          bw2 int freqDomainPositionApr10;
                                          int transmissionCombApr10;
                                          enum cyclicShiftApr10{

                                              cs1, cs2, cs3, cs4, cs5,
                                              cs6 cs8 cs9 cs10 cs11};
                                          enum n4
                                        }
                                        transmissionCombNum{};
                                        ;
                                        enum spare1
                                      } SRSAntennaPort {

                                        an2;
                                        ;
                                        struct SPSConfig {
                                          //  Need OR         CRNTI
                                          //  semiPersistSchedCRNTI;
                                          //          SPSConfigDL spsConfigDL;
                                          //         SPSConfigUL spsConfigUL;
                                        };
                                        ;
                                        enum SPSConfigDL {
                                          typedef release; struct setup{
                                              enum semiPersistSchedIntervalDL{
                                                  sf10 sf20 sf32 sf40 sf64 sf80;
                                                  sf128 sf160 sf320 sf640
                                                      spare6;
                                                  spare5 spare4 spare3 spare2;
                                                  spare1};
                                        int numberOfConfSPSProcesses;
                                        N1PUCCHANPersistentList
                                            n1PUCCHANPersistentList;

                                        ;
                                        enum twoAntennaPortActivatedr10 {
                                          typedef release; struct setup{
                                              N1PUCCHANPersistentList
                                                  n1PUCCHANPersistentListP1r10;};
                                        //                    };

                                        ;
                                      };
                                    };
                                    ;
                                    enum SPSConfigUL {
                                      typedef release; struct setup{
                                          enum semiPersistSchedIntervalUL{
                                              sf10 sf20 sf32 sf40 sf64 sf80;
                                              sf128 sf160 sf320 sf640 spare6;
                                              spare5 spare4 spare3 spare2;
                                              spare1};
                                    enum implicitReleaseAfter {

                                      e3,
                                      e4 struct p0Persistent{
                                          int p0NominalPUSCHPersistent;
                                          int p0UEPUSCHPersistent;
                                          //                  };
                                          //  Cond TDD ,    enum  true}
                                          //  twoIntervalsConfig    {

                                          ; enum p0PersistentSubframeSet2{
                                              typedef release; struct setup{
                                                  int p0NominalPUSCHPersistentSubframeSet2;
                                                  int p0UEPUSCHPersistentSubframeSet2;};
                                    //                   };

                                    ;
                                  };
                                };
                                ;
                                SEQU N1PUCCHANPersistentList;
                                ;
                                ;
                                struct TDDConfig {
                                  enum subframeAssignment {
                                    sa0 sa1 sa2 sa3 sa4 sa5 sa6
                                  };
                                  enum specialSubframePatterns {
                                    ssp0 ssp1 ssp2 ssp3 ssp4 ssp5 ssp6 ssp7;
                                    ssp8
                                  };
                                };
                                ;
                                struct TDDConfigv1130 {
                                  enum ssp9
                                } specialSubframePatternsv1130{};
                                ;
                                struct TDDConfigSL {
                                  enum subframeAssignmentSL {
                                    none sa0 sa1 sa2 sa3 sa4 sa5 sa6
                                  };
                                };
                                ;
                                ;
                                enum TimeAlignmentTimer {
                                  sf500 sf750 sf1280 sf1920 sf2560 sf5120;
                                  sf10240 infinity
                                };
                                ;
                                enum TPCPDCCHConfig {
                                  typedef release;
                                  struct setup{std::bitset<16> tpcRNTI;
                                               TPCIndex tpcIndex;};
                              };
                              ;
                              enum TPCPDCCHConfigSCell {
                                typedef release;
                                struct setup{TPCIndex tpcIndexPUCCHSCell;};
                            };
                            ;
                            enum TPCIndex {
                              int indexOfFormat3;
                              int indexOfFormat3A;
                            };
                            ;
                            ;
                            struct UplinkPowerControlCommon {
                              int p0NominalPUSCH;
                              Alpha alpha;
                              int p0NominalPUCCH;
                              DeltaFListPUCCH deltaFListPUCCH;
                              int deltaPreambleMsg3;
                            };
                            ;
                            struct UplinkPowerControlCommonv1020 {
                              enum deltaFPUCCHFormat3r10 {

                                deltaF0,
                                deltaF1 deltaF3 deltaF4 deltaF5 deltaF6
                              };
                              enum spare1
                            } deltaFPUCCHFormat1bCSr10{

                                deltaF2};
                            ;
                            struct UplinkPowerControlCommonv13xy {
                              //  Need OR  ,   enum   deltaFX7}
                              //  deltaFPUCCHFormat4   {

                              deltaFX1, deltaFX2, deltaFX3, deltaFX4, deltaFX5
                                  //  Need OR      enum   deltaFX7}
                                  //  deltaFPUCCHFormat5   {

                                  deltaFX1,
                                  deltaFX2, deltaFX3, deltaFX4, deltaFX5
                            };
                            ;
                            struct UplinkPowerControlCommonPSCell {
                              //  F;
                              enum deltaFPUCCHFormat3 {

                                deltaF0,
                                deltaF1 deltaF3 deltaF4 deltaF5 deltaF6
                              };
                              enum deltaFPUCCHFormat1bCS {

                                deltaF2,
                                spare2 int p0NominalPUCCH;
                                DeltaFListPUCCH deltaFListPUCCH;
                              };
                              ;
                              struct UplinkPowerControlCommonPSCellv13xy {
                                //  F;
                                //  Need OR  ,   enum   deltaFX7}
                                //  deltaFPUCCHFormat4   {

                                deltaFX1, deltaFX2, deltaFX3, deltaFX4, deltaFX5
                                    //  Need OR     enum   deltaFX7}
                                    //  deltaFPUCCHFormat5   {

                                    deltaFX1,
                                    deltaFX2, deltaFX3, deltaFX4, deltaFX5
                              };
                              ;
                              struct UplinkPowerControlCommonSCellr10 {
                                int p0NominalPUSCHr10;
                                Alpha alphar10;
                              };
                              ;
                              struct UplinkPowerControlCommonSCellv1130 {
                                int deltaPreambleMsg3r11;
                              };
                              ;
                              struct UplinkPowerControlDedicated {
                                int p0UEPUSCH;
                                enum deltaMCSEnabled {
                                  bool accumulationEnabled;
                                  int p0UEPUCCH;
                                  int pSRSOffset;
                                  DEFAULT fc4 FilterCoefficient
                                      filterCoefficient;
                                };
                                ;
                                UplinkPowerControlDedicatedv1020 struct {
                                  //  Need OR    DeltaTxDOffsetListPUCCHr10
                                  //  deltaTxDOffsetListPUCCHr10;
                                  //  Need OR        int      pSRSOffsetApr10;
                                };
                                ;
                                struct UplinkPowerControlDedicatedv1130 {
                                  //  Need OR       int       pSRSOffsetv1130;
                                  //  Need OR       int       pSRSOffsetApv1130;
                                  //  Need OR  DeltaTxDOffsetListPUCCHv1130
                                  //  deltaTxDOffsetListPUCCHv1130;
                                };
                                ;
                                struct UplinkPowerControlDedicatedv1250 {
                                  enum set2PowerControlParameter {
                                    typedef release;
                                    struct setup{std::bitset<10> tpcSubframeSet;
                                                 int p0NominalPUSCHSubframeSet2;
                                                 Alpha alphaSubframeSet2;
                                                 int p0UEPUSCHSubframeSet2;};
                                };
                              };
                              ;
                              struct UplinkPowerControlDedicatedSCellr10 {
                                int p0UEPUSCHr10;
                                enum deltaMCSEnabledr10 {
                                  bool accumulationEnabledr10;
                                  int pSRSOffsetr10;
                                  //  Need OR        int      pSRSOffsetApr10;
                                  DEFAULT fc4 FilterCoefficient
                                      filterCoefficientr10;
                                  enum sCell
                                }
                                pathlossReferenceLinkingr10{};
                                ;
                                enum al1
                              } Alpha {

                                al04, al05, al06, al07, al08;
                                struct DeltaFListPUCCH {
                                  enum deltaFPUCCHFormat1 {

                                    deltaF0 enum deltaFPUCCHFormat1b{

                                        deltaF3 enum deltaFPUCCHFormat2{

                                            deltaF0,
                                            deltaF1 enum deltaFPUCCHFormat2a{

                                                deltaF0 enum deltaF2} deltaFPUCCHFormat2b{};
                                            ; struct DeltaTxDOffsetListPUCCHr10{
                                                enum deltaTxDOffsetPUCCHFormat1r10{
                                                    enum deltaTxDOffsetPUCCHFormat1a1br10{
                                                        enum deltaTxDOffsetPUCCHFormat22a2br10{
                                                            enum deltaTxDOffsetPUCCHFormat3r10{

                                                                ;;};
                                  ;
                                  struct DeltaTxDOffsetListPUCCHv1130 {
                                    enum dB1
                                  } deltaTxDOffsetPUCCHFormat1bCSr11{};
                                  ;
                                  int NextHopChainingCount;
                                  ;
                                  ;
                                  struct SecurityAlgorithmConfig {
                                    CipheringAlgorithm cipheringAlgorithm;
                                    enum integrityProtAlgorithm {
                                      eia0v920 eia1 eia2 eia3v1130 spare4
                                          spare3;
                                      spare2 spare1
                                    };
                                  };
                                  ;
                                  enum CipheringAlgorithm {
                                    eea0 eea1 eea2 eea3v1130 spare4 spare3;
                                    spare2 spare1
                                  };
                                  ;
                                  ;
                                  std::bitset<16> ShortMACI;
                                  ;
                                  ;
                                  int AdditionalSpectrumEmission;
                                  ;
                                  ;
                                  int ARFCNValueCDMA2000;
                                  ;
                                  ;
                                  int ARFCNValueEUTRA;
                                  ;
                                  int ARFCNValueEUTRAv9e0;
                                  ;
                                  int ARFCNValueEUTRAr9;
                                  ;
                                  ;
                                  int ARFCNValueGERAN;
                                  ;
                                  ;
                                  int ARFCNValueUTRA;
                                  ;
                                  ;
                                  enum BandclassCDMA2000 {
                                    bc0 bc1 bc2 bc3 bc4 bc5 bc6 bc7 bc8;
                                    bc9 bc10 bc11 bc12 bc13 bc14 bc15 bc16;
                                    bc17 bc18v9a0 bc19v9a0 bc20v9a0 bc21v9a0;
                                    spare10 spare9 spare8 spare7 spare6 spare5
                                        spare4;
                                    spare3 spare2 spare1
                                  };
                                  ;
                                  ;
                                  enum pcs1900
                                } BandIndicatorGERAN {
                                  ;
                                  ;
                                  struct CarrierFreqCDMA2000 {
                                    BandclassCDMA2000 bandClass;
                                    ARFCNValueCDMA2000 arfcn;
                                  };
                                  ;
                                  ;
                                  struct CarrierFreqGERAN {
                                    ARFCNValueGERAN arfcn;
                                    BandIndicatorGERAN bandIndicator;
                                  };
                                  ;
                                  ;
                                  struct CarrierFreqsGERAN {
                                    ARFCNValueGERAN startingARFCN;
                                    BandIndicatorGERAN bandIndicator;
                                    enum followingARFCNs {
                                      ExplicitListOfARFCNs explicitListOfARFCNs;
                                      struct equallySpacedARFCNs{
                                          int arfcnSpacing;
                                          int numberOfFollowingARFCNs;};
                                    char variableBitMapOfARFCNs;
                                  };
                                };
                                ;
                                SEQU ExplicitListOfARFCNs;
                                ;
                                ;
                                SEQU CarrierFreqListMBMSr11;
                                ;
                                ;
                                enum typeHRPD
                              }
                              CDMA2000Type {
                                ;
                                ;
                                std::bitset<28> CellIdentity;
                                ;
                                ;
                                SEQU CellIndexList;
                                ;
                                int CellIndex;
                                ;
                                ;
                                int CellReselectionPriority;
                                ;
                                ;
                                enum oDot8
                              }
                              CellReselectionSubPriority {

                                oDot4;
                                ;
                                struct CSFBRegistrationParam1XRTT {
                                  std::bitset<15> sid;
                                  std::bitset<16> nid;
                                  bool multipleSID;
                                  bool multipleNID;
                                  bool homeReg;
                                  bool foreignSIDReg;
                                  bool foreignNIDReg;
                                  bool parameterReg;
                                  bool powerUpReg;
                                  std::bitset<7> registrationPeriod;
                                  std::bitset<12> registrationZone;
                                  std::bitset<3> totalZone;
                                  std::bitset<3> zoneTimer;
                                };
                                ;
                                struct CSFBRegistrationParam1XRTTv920 {
                                  enum true
                                } powerDownRegr9{};
                                ;
                                ;
                                struct CellGlobalIdEUTRA {
                                  PLMNIdentity plmnIdentity;
                                  CellIdentity cellIdentity;
                                };
                                ;
                                ;
                                struct CellGlobalIdUTRA {
                                  PLMNIdentity plmnIdentity;
                                  std::bitset<28> cellIdentity;
                                };
                                ;
                                ;
                                struct CellGlobalIdGERAN {
                                  PLMNIdentity plmnIdentity;
                                  std::bitset<16> locationAreaCode;
                                  std::bitset<16> cellIdentity;
                                };
                                ;
                                ;
                                enum CellGlobalIdCDMA2000 {
                                  std::bitset<47> cellGlobalId1XRTT;
                                  std::bitset<128> cellGlobalIdHRPD;
                                };
                                ;
                                ;
                                std::bitset<27> CSGIdentity;
                                ;
                                ;
                                int FreqBandIndicator;
                                ;
                                int FreqBandIndicatorv9e0;
                                ;
                                int FreqBandIndicatorr11;
                                ;
                                ;
                                struct MobilityControlInfo {
                                  PhysCellId targetPhysCellId;
                                  //  Cond HOtoEUTRA2       CarrierFreqEUTRA
                                  //  carrierFreq;
                                  //  Cond HOtoEUTRA      CarrierBandwidthEUTRA
                                  //  carrierBandwidth;
                                  //  Cond HOtoEUTRA
                                  //  AdditionalSpectrumEmission
                                  //  additionalSpectrumEmission;
                                  enum t304 {
                                    ms50 ms100 ms150 ms200 ms500 ms1000;
                                    ms2000 spare1
                                  };
                                  CRNTI newUEIdentity;
                                  RadioResourceConfigCommon
                                      radioResourceConfigCommon;
                                  //         RACHConfigDedicated
                                  //         rachConfigDedicated;

                                  ;
                                  //        CarrierFreqEUTRAv9e0
                                  //        carrierFreqv9e0;

                                  ;
                                  //  Cond HO       enum  true}
                                  //  drbContinueROHCr11
                                  { ; };
                                  ;
                                  struct MobilityControlInfoSCG {
                                    enum t307 {
                                      ms50 ms100 ms150 ms200 ms500 ms1000;
                                      ms2000 spare1
                                    };
                                    //  Cond SCGEst          CRNTI
                                    //  ueIdentitySCG;
                                    //        RACHConfigDedicated
                                    //        rachConfigDedicated;
                                    //       CipheringAlgorithm
                                    //       cipheringAlgorithmSCG;

                                    ;
                                  };
                                  ;
                                  struct CarrierBandwidthEUTRA {
                                    enum dlBandwidth {
                                      n6 n15 n25 n50 n75 n100 spare10;
                                      spare9 spare8 spare7 spare6 spare5;
                                      spare4 spare3 spare2 spare1
                                    };
                                    enum ulBandwidth {
                                      n6 n15 n25 n50 n75 n100 spare10;
                                      spare9 spare8 spare7 spare6 spare5;
                                      //    spare4  spare3  spare2  spare1};
                                    };
                                    ;
                                    struct CarrierFreqEUTRA {
                                      ARFCNValueEUTRA dlCarrierFreq;
                                      //  Cond FDD     ARFCNValueEUTRA
                                      //  ulCarrierFreq;
                                    };
                                    ;
                                    struct CarrierFreqEUTRAv9e0 {
                                      ARFCNValueEUTRAr9 dlCarrierFreqv9e0;
                                      //  Cond FDD    ARFCNValueEUTRAr9
                                      //  ulCarrierFreqv9e0;
                                    };
                                    ;
                                    ;
                                    char T string MobilityParametersCDMA2000;
                                    ;
                                    ;
                                    struct MobilityStateParameters {
                                      enum tEvaluation {
                                        s30 s60 s120 s180 s240 spare3 spare2
                                            spare1
                                      };
                                      enum tHystNormal {
                                        s30 s60 s120 s180 s240 spare3 spare2
                                            spare1
                                      };
                                      int nCellChangeMedium;
                                      int nCellChangeHigh;
                                    };
                                    ;
                                    ;
                                    SEQU MultiBandInfoList;
                                    ;
                                    SEQU MultiBandInfoListv9e0;
                                    ;
                                    SEQU MultiBandInfoListv10j0;
                                    ;
                                    SEQU MultiBandInfoListr11;
                                    ;
                                    struct MultiBandInfov9e0 {
                                      //      FreqBandIndicatorv9e0
                                      //      freqBandIndicatorv9e0;
                                    };
                                    ;
                                    ;
                                    SEQU NSPmaxListr10;
                                    ;
                                    struct NSPmaxValuer10 {
                                      //            PMax     additionalPmaxr10;
                                      AdditionalSpectrumEmission
                                          additionalSpectrumEmission;
                                    };
                                    ;
                                    ;
                                    int PhysCellId;
                                    ;
                                    ;
                                    struct PhysCellIdRange {
                                      PhysCellId start;
                                      enum range {
                                        n4 n8 n12 n16 n24 n32 n48 n64 n84;
                                        n96 n128 n168 n252 n504 spare2;
                                        //         spare1};
                                      };
                                      ;
                                      ;
                                      SEQU PhysCellIdRangeUTRAFDDListr9;
                                      ;
                                      struct PhysCellIdRangeUTRAFDDr9 {
                                        PhysCellIdUTRAFDD startr9;
                                        //         int        ranger9;
                                      };
                                      ;
                                      ;
                                      int PhysCellIdCDMA2000;
                                      ;
                                      ;
                                      struct PhysCellIdGERAN {
                                        std::bitset<3> networkColourCode;
                                        std::bitset<3> baseStationColourCode;
                                      };
                                      ;
                                      ;
                                      int PhysCellIdUTRAFDD;
                                      ;
                                      ;
                                      int PhysCellIdUTRATDD;
                                      ;
                                      ;
                                      struct PLMNIdentity {
                                        //  Cond MCC           MCC         mcc;
                                        MNC mnc;
                                      };
                                      ;
                                      SEQU MCC;
                                      MCCMNCDigit;
                                      ;
                                      SEQU MNC;
                                      MCCMNCDigit;
                                      ;
                                      int MCCMNCDigit;
                                      ;
                                      ;
                                      ;
                                      SEQU PLMNIdentityList3r11;
                                      ;
                                      ;
                                      struct PreRegistrationInfoHRPD {
                                        bool preRegistrationAllowed;
                                        //  cond PreRegAllowed
                                        //  PreRegistrationZoneIdHRPD
                                        //  preRegistrationZoneId;
                                        //  Need OR
                                        //  SecondaryPreRegistrationZoneIdListHRPD
                                        //  secondaryPreRegistrationZoneIdList;
                                      };
                                      ;
                                      SEQU
                                          SecondaryPreRegistrationZoneIdListHRPD;
                                      ;
                                      int PreRegistrationZoneIdHRPD;
                                      ;
                                      ;
                                      int QQualMinr9;
                                      ;
                                      ;
                                      int QRxLevMin;
                                      ;
                                      ;
                                      enum QOffsetRange {
                                        dB24 dB22 dB20 dB18 dB16 dB14;
                                        dB12 dB10 dB8 dB6 dB5 dB4 dB3;
                                        dB2 dB1 dB0 dB1 dB2 dB3 dB4 dB5;
                                        dB6 dB8 dB10 dB12 dB14 dB16 dB18;
                                        dB20 dB22 dB24
                                      };
                                      ;
                                      ;
                                      int QOffsetRangeInterRAT;
                                      ;
                                      ;
                                      int ReselectionThreshold;
                                      ;
                                      ;
                                      int ReselectionThresholdQr9;
                                      ;
                                      ;
                                      int SCellIndexr10;
                                      int SCellIndexv13xy;
                                      int SCellIndex;
                                      ;
                                      ;
                                      int ServCellIndexr10;
                                      int ServCellIndexv13xy;
                                      int ServCellIndexFull;
                                      ;
                                      ;
                                      struct SpeedStateScaleFactors {
                                        enum sfMedium {

                                          oDot5,
                                          oDot75 enum lDot0
                                        } sfHigh{

                                            oDot5};
                                        ;
                                        SEQU SystemInfoListGERAN;
                                        char;
                                        ;
                                        ;
                                        struct SystemTimeInfoCDMA2000 {
                                          bool cdmaEUTRASynchronisation;
                                          enum cdmaSystemTime {
                                            std::bitset<39>
                                                synchronousSystemTime;
                                            std::bitset<49>
                                                asynchronousSystemTime;
                                          };
                                        };
                                        ;
                                        ;
                                        std::bitset<16> TrackingAreaCode;
                                        ;
                                        ;
                                        int TReselection;
                                        ;
                                        ;
                                        enum mbw100
                                      } AllowedMeasBandwidth {

                                        mbw15, mbw25, mbw50;
                                        ;
                                        int CSIRSRPRange;
                                        ;
                                        ;
                                        int Hysteresis;
                                        ;
                                        ;
                                        struct LocationInfor10 {
                                          enum locationCoordinatesr10 {
                                            char T string ellipsoidPointr10;
                                            char T string
                                                ellipsoidPointWithAltituder10;

                                            ;
                                            char T string
                                                ellipsoidPointWithUncertaintyCircler11;
                                            char T string
                                                ellipsoidPointWithUncertaintyEllipser11;
                                            char T string
                                                ellipsoidPointWithAltitudeAndUncertaintyEllipsoidr11;
                                            char T string ellipsoidArcr11;
                                            char T string polygonr11;
                                          };
                                          char T string horizontalVelocityr10;
                                          char T string gnssTODmsecr10;

                                          ;
                                        };
                                        ;
                                        ;
                                        int MBSFNRSRQRange;
                                        ;
                                        struct MeasConfig {
                                          //  Measurement objects;
                                          //         MeasObjectToRemoveList
                                          //         measObjectToRemoveList;
                                          //         MeasObjectToAddModList
                                          //         measObjectToAddModList;
                                          //  Reporting configurations;
                                          //        ReportConfigToRemoveList
                                          //        reportConfigToRemoveList;
                                          //        ReportConfigToAddModList
                                          //        reportConfigToAddModList;
                                          //  Measurement identities;
                                          //          MeasIdToRemoveList
                                          //          measIdToRemoveList;
                                          //          MeasIdToAddModList
                                          //          measIdToAddModList;
                                          //  Other parameters;
                                          //           QuantityConfig
                                          //           quantityConfig;
                                          //           MeasGapConfig
                                          //           measGapConfig;
                                          //            RSRPRange sMeasure;
                                          //         PreRegistrationInfoHRPD
                                          //         preRegistrationInfoHRPD;
                                          enum speedStatePars {
                                            typedef release; struct setup{
                                                MobilityStateParameters
                                                    mobilityStateParameters;
                                                SpeedStateScaleFactors
                                                    timeToTriggerSF;};
                                          //                       };

                                          ;
                                          //      MeasObjectToAddModListv9e0
                                          //      measObjectToAddModListv9e0;

                                          ;
                                          //            bool
                                          //            allowInterruptionsr11;

                                          ;
                                          enum measScaleFactor {
                                            typedef release;
                                            MeasScaleFactor setup;
                                            //                     };
                                            //       MeasIdToRemoveListExt
                                            //       measIdToRemoveListExt;
                                            //       MeasIdToAddModListExt
                                            //       measIdToAddModListExt;
                                            //            bool
                                            //            measRSRQOnAllSymbols;

                                            ;
                                            //       ULDelayConfig
                                            //       ulDelayConfig;

                                            ;
                                          };
                                          ;
                                          SEQU MeasIdToRemoveList;
                                          ;
                                          SEQU MeasIdToRemoveListExt;
                                          ;
                                          SEQU MeasObjectToRemoveList;
                                          ;
                                          SEQU ReportConfigToRemoveList;
                                          ;
                                          ;
                                          enum MeasDSConfig {
                                            typedef release;
                                            struct setup{enum dmtcPeriodOffset{
                                                int ms40; int ms80; int ms160;

                                                ;};
                                          enum dsOccasionDuration {
                                            int durationFDD;
                                            int durationTDD;
                                          };
                                          //      MeasCSIRSToRemoveList
                                          //      measCSIRSToRemoveList;
                                          //      MeasCSIRSToAddModList
                                          //      measCSIRSToAddModList;

                                          ;
                                        };
                                      };
                                      ;
                                      SEQU MeasCSIRSToRemoveList;
                                      ;
                                      SEQU MeasCSIRSToAddModList;
                                      ;
                                      int MeasCSIRSId;
                                      ;
                                      struct MeasCSIRSConfig {
                                        MeasCSIRSId measCSIRSId;
                                        int physCellId;
                                        int scramblingIdentity;
                                        int resourceConfig;
                                        int subframeOffset;
                                        QOffsetRange csiRSIndividualOffset;

                                        ;
                                      };
                                      ;
                                      ;
                                      enum MeasGapConfig {
                                        typedef release; struct setup{
                                            enum gapOffset{int gp0; int gp1;

                                                           ;};
                                    };
                                  };
                                  ;
                                  ;
                                  int MeasId;
                                  ;
                                  int MeasIdv1250;
                                  ;
                                  ;
                                  SEQU MeasIdToAddModList;
                                  ;
                                  SEQU MeasIdToAddModListExt;
                                  ;
                                  struct MeasIdToAddMod {
                                    MeasId measId;
                                    MeasObjectId measObjectId;
                                    ReportConfigId reportConfigId;
                                  };
                                  ;
                                  struct MeasIdToAddModExt {
                                    MeasIdv1250 measIdv1250;
                                    MeasObjectId measObjectId;
                                    ReportConfigId reportConfigId;
                                  };
                                  ;
                                  ;
                                  struct MeasObjectCDMA2000 {
                                    CDMA2000Type cdma2000Type;
                                    CarrierFreqCDMA2000 carrierFreq;
                                    //            int      searchWindowSize;
                                    DEFAULT 0 QOffsetRangeInterRAT offsetFreq;
                                    //           CellIndexList
                                    //           cellsToRemoveList;
                                    //        CellsToAddModListCDMA2000
                                    //        cellsToAddModList;
                                    //          PhysCellIdCDMA2000
                                    //          cellForWhichToReportCGI;

                                    ;
                                  };
                                  ;
                                  SEQU CellsToAddModListCDMA2000;
                                  ;
                                  struct CellsToAddModCDMA2000 {
                                    int cellIndex;
                                    PhysCellIdCDMA2000 physCellId;
                                  };
                                  ;
                                  ;
                                  struct MeasObjectEUTRA {
                                    ARFCNValueEUTRA carrierFreq;
                                    AllowedMeasBandwidth allowedMeasBandwidth;
                                    PresenceAntennaPort1 presenceAntennaPort1;
                                    NeighCellConfig neighCellConfig;
                                    DEFAULT dB0 QOffsetRange offsetFreq;
                                    //  Cell list;
                                    //          CellIndexList cellsToRemoveList;
                                    //         CellsToAddModList
                                    //         cellsToAddModList;
                                    //  Black list;
                                    //          CellIndexList
                                    //          blackCellsToRemoveList;
                                    //        BlackCellsToAddModList
                                    //        blackCellsToAddModList;
                                    //           PhysCellId
                                    //           cellForWhichToReportCGI;

                                    ;
                                    //        MeasCycleSCellr10
                                    measCycleSCellr10;
                                    //           MeasSubframePatternConfigNeighr10
                                    //           measSubframePatternConfigNeighr10;

                                    ;
                                    //  Cond WBRSRQ    bool
                                    widebandRSRQMeasr11;

                                    ;
                                    //          CellIndexList
                                    //          altTTTCellsToRemoveList;
                                    //       AltTTTCellsToAddModList
                                    //       altTTTCellsToAddModList;
                                    enum t312 {
                                      typedef release;
                                      enum setup{

                                          ms50, ms100 ms300 ms400 ms500 ms1000};
                                      //                    };
                                      //            bool reducedMeasPerformance;
                                      //        MeasDSConfig    measDSConfig;

                                      ;

                                      ;
                                      //          CellIndexList
                                      //          whiteCellsToRemoveList;
                                      //       WhiteCellsToAddModList
                                      //       whiteCellsToAddModList;
                                      //        MeasRSSIConfig measRSSIConfig;

                                      ;
                                    };
                                    ;
                                    struct MeasObjectEUTRAv9e0 {
                                      ARFCNValueEUTRAv9e0 carrierFreqv9e0;
                                    };
                                    ;
                                    SEQU CellsToAddModList;
                                    ;
                                    struct CellsToAddMod {
                                      int cellIndex;
                                      PhysCellId physCellId;
                                      QOffsetRange cellIndividualOffset;
                                    };
                                    ;
                                    SEQU BlackCellsToAddModList;
                                    ;
                                    struct BlackCellsToAddMod {
                                      int cellIndex;
                                      PhysCellIdRange physCellIdRange;
                                    };
                                    ;
                                    enum MeasCycleSCellr10 {

                                      sf256,
                                      sf320 sf640 sf1024 sf1280 spare1
                                    };
                                    ;
                                    enum MeasSubframePatternConfigNeighr10 {
                                      typedef release; struct setup{
                                          MeasSubframePatternr10
                                              measSubframePatternNeighr10;
                                          //  Cond always
                                          //  MeasSubframeCellListr10
                                          //  measSubframeCellListr10;
                                      };
                                  };
                                  ;
                                  SEQU MeasSubframeCellListr10;
                                  ;
                                  SEQU AltTTTCellsToAddModList;
                                  ;
                                  struct AltTTTCellsToAddMod {
                                    int cellIndex;
                                    PhysCellIdRange physCellIdRange;
                                  };
                                  ;
                                  SEQU WhiteCellsToAddModList;
                                  ;
                                  struct WhiteCellsToAddMod {
                                    int cellIndex;
                                    PhysCellIdRange physCellIdRange;
                                  };
                                  ;
                                  enum MeasRSSIConfig {
                                    typedef release;
                                    struct setup{enum rmtcPeriod{

                                        ms80, ms160, ms320
                                        //            int    rmtcSubframeOffset;
                                        enum sym70} measDuration{

                                        sym14, sym28};};
                                  ;
                                  ;
                                  struct MeasObjectGERAN {
                                    CarrierFreqsGERAN carrierFreqs;
                                    DEFAULT 0 QOffsetRangeInterRAT offsetFreq;
                                    DEFAULT '11111111' B std::bitset<8>
                                        nccPermitted;
                                    //         PhysCellIdGERAN
                                    //         cellForWhichToReportCGI;

                                    ;
                                  };
                                  ;
                                  ;
                                  int MeasObjectId;
                                  ;
                                  ;
                                  SEQU MeasObjectToAddModList;
                                  ;
                                  SEQU MeasObjectToAddModListv9e0;
                                  ;
                                  struct MeasObjectToAddMod {
                                    MeasObjectId measObjectId;
                                    enum measObject {
                                      MeasObjectEUTRA measObjectEUTRA;
                                      MeasObjectUTRA measObjectUTRA;
                                      MeasObjectGERAN measObjectGERAN;
                                      MeasObjectCDMA2000 measObjectCDMA2000;

                                      ;
                                    };
                                  };
                                  ;
                                  struct MeasObjectToAddModv9e0 {
                                    //  Cond eutra   MeasObjectEUTRAv9e0
                                    //  measObjectEUTRAv9e0;
                                  };
                                  ;
                                  ;
                                  struct MeasObjectUTRA {
                                    ARFCNValueUTRA carrierFreq;
                                    DEFAULT 0 QOffsetRangeInterRAT offsetFreq;
                                    //           CellIndexList
                                    //           cellsToRemoveList;
                                    enum cellsToAddModList {
                                      CellsToAddModListUTRAFDD
                                          cellsToAddModListUTRAFDD;
                                      CellsToAddModListUTRATDD
                                          cellsToAddModListUTRATDD;
                                      //                       };
                                      enum cellForWhichToReportCGI{
                                          PhysCellIdUTRAFDD utraFDD;
                                          PhysCellIdUTRATDD utraTDD;
                                          //                     };

                                          ;
                                          //      CSGAllowedReportingCellsr9
                                          //      csgallowedReportingCellsv930;

                                          ;
                                          //         bool
                                          //         reducedMeasPerformance;

                                          ;};
                                    ;
                                    SEQU CellsToAddModListUTRAFDD;
                                    ;
                                    struct CellsToAddModUTRAFDD {
                                      int cellIndex;
                                      PhysCellIdUTRAFDD physCellId;
                                    };
                                    ;
                                    SEQU CellsToAddModListUTRATDD;
                                    ;
                                    struct CellsToAddModUTRATDD {
                                      int cellIndex;
                                      PhysCellIdUTRATDD physCellId;
                                    };
                                    ;
                                    struct CSGAllowedReportingCellsr9 {
                                      //  Need OR  PhysCellIdRangeUTRAFDDListr9
                                      //  physCellIdRangeUTRAFDDListr9;
                                    };
                                    ;
                                    struct MeasResults {
                                      MeasId measId;
                                      struct measResultPCell {
                                        RSRPRange rsrpResult;
                                        RSRQRange rsrqResult;
                                      };
                                      enum measResultNeighCells {
                                        MeasResultListEUTRA measResultListEUTRA;
                                        MeasResultListUTRA measResultListUTRA;
                                        MeasResultListGERAN measResultListGERAN;
                                        MeasResultsCDMA2000 measResultsCDMA2000;

                                        ;
                                      };

                                      ;
                                      MeasResultForECIDr9 measResultForECIDr9;

                                      ;
                                      LocationInfor10 locationInfor10;
                                      MeasResultServFreqListr10
                                          measResultServFreqListr10;

                                      ;
                                      MeasIdv1250 measIdv1250;
                                      RSRQRangev1250 measResultPCellv1250;
                                      MeasResultCSIRSList measResultCSIRSList;

                                      ;
                                      MeasResultForRSSI measResultForRSSI;
                                      MeasResultServFreqListExt
                                          measResultServFreqListExt;
                                      MeasResultSSTD measResultSSTD;
                                      struct measResultPCellv13xy {
                                        RSSINRRange rssinrResult;
                                      };
                                      ULPDCPDelayResultList
                                          ulPDCPDelayResultList;

                                      ;
                                      ;
                                    };
                                    ;
                                    SEQU MeasResultListEUTRA;
                                    ;
                                    struct MeasResultEUTRA {
                                      PhysCellId physCellId;
                                      struct cgiInfo {
                                        CellGlobalIdEUTRA cellGlobalId;
                                        TrackingAreaCode trackingAreaCode;
                                        PLMNIdentityList2 plmnIdentityList;
                                      };
                                      struct measResult {
                                        RSRPRange rsrpResult;
                                        RSRQRange rsrqResult;

                                        ;
                                        AdditionalSIInfor9 additionalSIInfor9;

                                        ;
                                        , enum true
                                      } primaryPLMNSuitable {
                                        RSRQRangev1250 measResultv1250;

                                        ;
                                        RSSINRRange rssinrResult;

                                        ;
                                      };
                                    };
                                    ;
                                    SEQU MeasResultServFreqListr10;
                                    ;
                                    SEQU MeasResultServFreqListExt;
                                    ;
                                    struct MeasResultServFreqr10 {
                                      ServCellIndexr10 servFreqIdr10;
                                      struct measResultSCellr10 {
                                        RSRPRange rsrpResultSCellr10;
                                        RSRQRange rsrqResultSCellr10;
                                      };
                                      struct measResultBestNeighCellr10 {
                                        PhysCellId physCellIdr10;
                                        RSRPRange rsrpResultNCellr10;
                                        RSRQRange rsrqResultNCellr10;
                                      };

                                      ;
                                      RSRQRangev1250 measResultSCellv1250;
                                      RSRQRangev1250
                                          measResultBestNeighCellv1250;

                                      ;
                                      struct measResultSCellv13xy {
                                        RSSINRRange rssinrResult;
                                      };
                                      struct measResultBestNeighCellv13xy {
                                        RSSINRRange rssinrResult;
                                      };

                                      ;
                                    };
                                    ;
                                    struct MeasResultServFreq {
                                      ServCellIndexFull servFreqId;
                                      struct measResultSCell {
                                        RSRPRange rsrpResultSCell;
                                        RSRQRangev13xx rsrqResultSCell;
                                        RSSINRRange rssinrResult;
                                      };
                                      struct measResultBestNeighCell {
                                        PhysCellId physCellId;
                                        RSRPRange rsrpResultNCellr10;
                                        RSRQRangev13xx rsrqResultNCell;
                                        RSSINRRange rssinrResult;
                                      };

                                      ;
                                    };
                                    ;
                                    SEQU MeasResultCSIRSList;
                                    ;
                                    struct MeasResultCSIRS {
                                      MeasCSIRSId measCSIRSId;
                                      CSIRSRPRange csiRSRPResult;

                                      ;
                                    };
                                    ;
                                    SEQU MeasResultListUTRA;
                                    ;
                                    struct MeasResultUTRA {
                                      enum physCellId {
                                        PhysCellIdUTRAFDD fdd;
                                        PhysCellIdUTRATDD tdd;
                                      };
                                      struct cgiInfo {
                                        CellGlobalIdUTRA cellGlobalId;
                                        std::bitset<16> locationAreaCode;
                                        std::bitset<8> routingAreaCode;
                                        PLMNIdentityList2 plmnIdentityList;
                                      };
                                      struct measResult {
                                        int utraRSCP;
                                        int utraEcN0;

                                        ;
                                        AdditionalSIInfor9 additionalSIInfor9;

                                        ;
                                        enum true
                                      } primaryPLMNSuitable {

                                        ;
                                      };
                                    };
                                    ;
                                    SEQU MeasResultListGERAN;
                                    ;
                                    struct MeasResultGERAN {
                                      CarrierFreqGERAN carrierFreq;
                                      PhysCellIdGERAN physCellId;
                                      struct cgiInfo {
                                        CellGlobalIdGERAN cellGlobalId;
                                        std::bitset<8> routingAreaCode;
                                      };
                                      struct measResult {
                                        int rssi;

                                        ;
                                      };
                                    };
                                    ;
                                    struct MeasResultsCDMA2000 {
                                      bool preRegistrationStatusHRPD;
                                      MeasResultListCDMA2000
                                          measResultListCDMA2000;
                                    };
                                    ;
                                    SEQU MeasResultListCDMA2000;
                                    ;
                                    struct MeasResultCDMA2000 {
                                      PhysCellIdCDMA2000 physCellId;
                                      CellGlobalIdCDMA2000 cgiInfo;
                                      struct measResult {
             (0..  int GER      pilotPnPhase;
	 int       pilotStrength;
	
;
                                      };
                                    };
                                    ;
                                    struct MeasResultForECIDr9 {
                                      int ueRxTxTimeDiffResultr9;
                                      std::bitset<10> currentSFNr9;
                                    };
                                    ;
                                    SEQU PLMNIdentityList2;
                                    ;
                                    struct AdditionalSIInfor9 {
                                      , enum member
                                    } csgMemberStatusr9 {
                                      CSGIdentity csgIdentityr9;
                                    };
                                    struct MeasResultForRSSI {
                                      RSSIRange rssiResult;
                                      int channelOccupancy;
                                    };
                                    ;
                                    SEQU ULPDCPDelayResultList;
                                    ;
                                    ;
                                    struct ULPDCPDelayResult {
                                      enum qciId {

                                        qci2,
                                        qci3,
                                        qci4,
                                        spare4,
                                        spare3,
                                        spare2 int excessDelay;
                                      };
                                      ;
                                      ;
                                      struct MeasResultSSTD {
                                        int sfnOffsetResult;
                                        int frameBoundaryOffsetResult;
                                        int subframeBoundaryOffsetResult;
                                      };
                                      ;
                                      ;
                                      enum sfEUTRAcf2
                                    } MeasScaleFactor {
                                      ;
                                      ;
                                      struct QuantityConfig {
                                        //          QuantityConfigEUTRA
                                        //          quantityConfigEUTRA;
                                        //          QuantityConfigUTRA
                                        //          quantityConfigUTRA;
                                        //          QuantityConfigGERAN
                                        //          quantityConfigGERAN;
                                        //         QuantityConfigCDMA2000
                                        //         quantityConfigCDMA2000;

                                        ;
                                        //       QuantityConfigUTRAv1020
                                        //       quantityConfigUTRAv1020;

                                        ;
                                        //       QuantityConfigEUTRAv1250
                                        //       quantityConfigEUTRAv1250;

                                        ;
                                        //       QuantityConfigEUTRAv13xy
                                        //       quantityConfigEUTRAv13xy;

                                        ;
                                      };
                                      ;
                                      struct QuantityConfigEUTRA {
                                        DEFAULT fc4 FilterCoefficient
                                            filterCoefficientRSRP;
                                        DEFAULT fc4 FilterCoefficient
                                            filterCoefficientRSRQ;
                                      };
                                      ;
                                      struct QuantityConfigEUTRAv1250 {
                                        //  Need OR       FilterCoefficient
                                        //  filterCoefficientCSIRSRP;
                                      };
                                      ;
                                      struct QuantityConfigEUTRAv13xy {
                                        DEFAULT fc4 FilterCoefficient
                                            filterCoefficientRSSINR;
                                      };
                                      ;
                                      struct QuantityConfigUTRA {
                                        enum measQuantityUTRAFDD {
                                          enum measQuantityUTRATDD{
                                              DEFAULT fc4 FilterCoefficient
                                                  filterCoefficient;};
                                        ;
                                        struct QuantityConfigUTRAv1020 {
                                          DEFAULT fc4 FilterCoefficient
                                              filterCoefficient2FDDr10;
                                        };
                                        ;
                                        struct QuantityConfigGERAN {
                                          enum measQuantityGERAN {
                                            DEFAULT fc2 FilterCoefficient
                                                filterCoefficient;
                                          };
                                          ;
                                          struct QuantityConfigCDMA2000 {
                                            enum pilotPnPhaseAndPilotStrength
                                          } measQuantityCDMA2000{};
                                          ;
                                          ;
                                          struct ReportConfigEUTRA {
                                            enum triggerType {
                                              struct event{
                                                  enum eventId{struct eventA1{
                                                      ThresholdEUTRA
                                                          a1Threshold;};
                                            struct eventA2 {
                                              ThresholdEUTRA a2Threshold;
                                            };
                                            struct eventA3 {
                                              int a3Offset;
                                              bool reportOnLeave;
                                            };
                                            struct eventA4 {
                                              ThresholdEUTRA a4Threshold;
                                            };
                                            struct eventA5 {
                                              ThresholdEUTRA a5Threshold1;
                                              ThresholdEUTRA a5Threshold2;
                                            };

                                            ;
                                            struct eventA6r10 {
                                              int a6Offsetr10;
                                              bool a6ReportOnLeaver10;
                                            };
                                            struct eventC1 {
                                              ThresholdEUTRAv1250 c1Threshold;
                                              bool c1ReportOnLeave;
                                            };
                                            struct eventC2 {
                                              MeasCSIRSId c2RefCSIRS;
                                              int c2Offset;
                                              bool c2ReportOnLeave;
                                            };
                                          };
                                          Hysteresis hysteresis;
                                          TimeToTrigger timeToTrigger;
                                        };
                                        struct periodical {
                                          enum purpose {
                                            reportStrongestCells reportCGI
                                          };
                                        };
                                      };
                                      enum triggerQuantity {
                                        enum reportQuantity{
                                            int maxReportCells;
                                            ReportInterval reportInterval;
                                            enum reportAmount{

                                                r2, r4, r8, r16, r32, r64

                                                ;
                                                //  Cond reportCGI ,   enum
                                                //  setup}     siRequestForHOr9
                                                {//  Need OR    enum  setup}
                                                 //  ueRxTxTimeDiffPeriodicalr9
                                                 //  {

                                                 ;
                                                 //  Need OR ,   enum  true}
                                                 //  includeLocationInfor10
                                                 {//  Need OR    enum  setup}
                                                  //  reportAddNeighMeasr10    {

                                                  ;
                                                  enum alternativeTimeToTrigger{
                                                      typedef release;
                                                      TimeToTrigger setup;
                                                      //                  };
                                                      //         bool useT312;
                                                      //         bool usePSCell;
                                                      //       RSRQRangeConfig
                                                      //       aNThreshold1v1250;
                                                      //       RSRQRangeConfig
                                                      //       a5Threshold2v1250;
                                                      //        bool
                                                      //        reportStrongestCSIRSs;
                                                      //        bool
                                                      //        reportCRSMeas;
                                                      //         bool
                                                      //         triggerQuantityCSIRS;

                                                      ;
                                                      //          bool
                                                      //          reportSSTDMeas;
                                                      enum triggerQuantityv13xy{
                                                          typedef release;
                                                          enum sinr}
                                      setup {
                                        //                  };
                                        enum aNThresholdSINR {
                                          typedef release; struct setup{
                                              //       ThresholdEUTRAv13xy
                                              //       threshold1;
                                              //      ThresholdEUTRAv13xy
                                              //      threshold2;
                                          };
                                          //  Cond SINR               };
                                          enum reportQuantityv13xy{
                                              typedef release; enum all}
                                        setup {
                                          //                  };
                                          //         bool     useWhiteCellList;
                                          //  Need OR  MeasRSSIReportConfig
                                          //  measRSSIReportConfig;

                                          ;
                                        };
                                        ;
                                        enum RSRQRangeConfig {
                                          typedef release;
                                          RSRQRangev1250 setup;
                                        };
                                        ;
                                        enum ThresholdEUTRA {
                                          RSRPRange thresholdRSRP;
                                          RSRQRange thresholdRSRQ;
                                        };
                                        ;
                                        CSIRSRPRange ThresholdEUTRAv1250;
                                        ;
                                        RSSINRRange ThresholdEUTRAv13xy;
                                        ;
                                        struct MeasRSSIReportConfig {
                                          RSSIRange channelOccupancyThreshold;
                                        };
                                        ;
                                        ;
                                        int ReportConfigId;
                                        ;
                                        ;
                                        struct ReportConfigInterRAT {
                                          enum triggerType {
                                            struct event{enum eventId{
                                                struct eventB1{enum b1Threshold{
                                                    ThresholdUTRA
                                                        b1ThresholdUTRA;
                                                    ThresholdGERAN
                                                        b1ThresholdGERAN;
                                                    ThresholdCDMA2000
                                                        b1ThresholdCDMA2000;};
                                        };
                                        struct eventB2 {
                                          ThresholdEUTRA b2Threshold1;
                                          enum b2Threshold2 {
                                            ThresholdUTRA b2Threshold2UTRA;
                                            ThresholdGERAN b2Threshold2GERAN;
                                            ThresholdCDMA2000
                                                b2Threshold2CDMA2000;
                                          };
                                        };

                                        ;
                                      };
                                      Hysteresis hysteresis;
                                      TimeToTrigger timeToTrigger;
                                    };
                                    struct periodical {
                                      enum purpose {
                                        reportStrongestCells;
                                        reportStrongestCellsForSON;
                                        reportCGI
                                      };
                                    };
                                  };
                                  int maxReportCells;
                                  ReportInterval reportInterval;
                                  enum reportAmount {

                                    r2, r4, r8, r16, r32, r64

                                    ;
                                    //  Cond reportCGI    enum  setup}
                                    //  siRequestForHOr9
                                    {

                                     ;
                                     //  Need OR    enum  both}
                                     //  reportQuantityUTRAFDDr10
                                     {

                                      ;
                                      //          bool includeLocationInfor11;

                                      ; enum b2Threshold1v1250{
                                          typedef release; RSRQRangev1250 setup;
                                          //                   };

                                          ;};
                                  ;
                                  enum ThresholdUTRA {
                                    int utraRSCP;
                                    int utraEcN0;
                                  };
                                  ;
                                  int ThresholdGERAN;
                                  ;
                                  int ThresholdCDMA2000;
                                  ;
                                  ;
                                  SEQU ReportConfigToAddModList;
                                  ;
                                  struct ReportConfigToAddMod {
                                    ReportConfigId reportConfigId;
                                    enum reportConfig {
                                      ReportConfigEUTRA reportConfigEUTRA;
                                      ReportConfigInterRAT reportConfigInterRAT;
                                    };
                                  };
                                  ;
                                  ;
                                  ;
                                  enum ReportInterval {
                                    ms120 ms240 ms480 ms640 ms1024 ms2048 ms5120
                                        ms10240;
                                    min1 min6 min12 min30 min60 spare3 spare2
                                        spare1
                                  };
                                  ;
                                  ;
                                  int RSRPRange;
                                  ;
                                  int RSRPRangeSL;
                                  ;
                                  int RSRPRangeSL2;
                                  ;
                                  int RSRPRangeSL3;
                                  ;
                                  ;
                                  int RSRQRange;
                                  ;
                                  int RSRQRangev1250;
                                  ;
                                  int RSRQRangev13xx;
                                  ;
                                  ;
                                  struct RSRQType {
                                    bool allSymbols;
                                    bool wideBand;
                                  };
                                  ;
                                  ;
                                  int RSSINRRange;
                                  ;
                                  ;
                                  int RSSIRange;
                                  ;
                                  ;
                                  enum TimeToTrigger {
                                    ms0 ms40 ms64 ms80 ms100 ms128 ms160 ms256;
                                    ms320 ms480 ms512 ms640 ms1024 ms1280
                                        ms2560;
                                    ms5120
                                  };
                                  ;
                                  ;
                                  enum ULDelayConfig {
                                    typedef release;
                                    struct setup{enum delayThreshold{
                                        ms30 ms40 ms50 ms60 ms70 ms80;
                                        spare3 spare2 spare1}
                                  ms90 ms100 ms150 ms300 ms500 ms750 spare4;
                                  enum delayReportInterval {
                                    ms1024 ms2048 ms5120 ms10240
                                  };
                                };
                              };
                              ;
                              ;
                              std::bitset<48> AbsoluteTimeInfor10;
                              ;
                              ;
                              enum AreaConfigurationr10 {
                                CellGlobalIdListr10 cellGlobalIdListr10;
                                TrackingAreaCodeListr10 trackingAreaCodeListr10;
                              };
                              ;
                              struct AreaConfigurationv1130 {
                                TrackingAreaCodeListv1130
                                    trackingAreaCodeListv1130;
                              };
                              ;
                              SEQU CellGlobalIdListr10;
                              ;
                              SEQU TrackingAreaCodeListr10;
                              ;
                              struct TrackingAreaCodeListv1130 {
                                SEQU plmnIdentityperTACListr11;
                              };
                              ;
                              ;
                              std::bitset<16> CRNTI;
                              ;
                              ;
                              char T string DedicatedInfoCDMA2000;
                              ;
                              ;
                              char T string DedicatedInfoNAS;
                              ;
                              ;
                              enum FilterCoefficient {
                                fc0 fc1 fc2 fc3 fc4 fc5;
                                fc6 fc7 fc8 fc9 fc11 fc13;
                                fc15 fc17 fc19 spare1
                              };
                              ;
                              ;
                              enum LoggingDurationr10 {
                                min10 min20 min40 min60 min90 min120 spare2
                                    spare1
                              };
                              ;
                              ;
                              enum LoggingIntervalr10 {
                                ms1280 ms2560 ms5120 ms10240 ms20480;
                                ms30720 ms40960 ms61440
                              };
                              ;
                              ;
                              MeasSubframePatternr10 enum {
                                std::bitset<40> subframePatternFDDr10;
                                enum subframePatternTDDr10{
                                    std::bitset<20> subframeConfig15r10;
                                    std::bitset<70> subframeConfig0r10;
                                    std::bitset<60> subframeConfig6r10;

                                    ;};

                              ;
                            };
                            ;
                            ;
                            std::bitset<8> MMEC;
                            ;
                            ;
                            std::bitset<2> NeighCellConfig;
                            ;
                            ;
                            OtherConfigr9 struct {
                              //       ReportProximityConfigr9
                              //       reportProximityConfigr9;

                              ;
                              //          IDCConfigr11     idcConfigr11;
                              //      PowerPrefIndicationConfigr11
                              //      powerPrefIndicationConfigr11;
                              //      ObtainLocationConfigr11
                              //      obtainLocationConfigr11;

                              ;
                            };
                            ;
                            struct IDCConfigr11 {
                              //  Need OR  ,   enum  setup}     idcIndicationr11
                              //  {
                              struct autonomousDenialParametersr11 {
                                enum autonomousDenialSubframesr11 {

                                  n5,
                                  n10 n20 n30 spare2 spare1
                                };
                                enum autonomousDenialValidityr11 {
                                  sf200 sf500 sf1000 sf2000;
                                  spare4 spare3 spare2 spare1
                                };
                                //  Need OR     };

                                ;
                                //  Cond idcInd     enum  setup}
                                //  idcIndicationULCAr11
                                { ; };
                                ;
                                ObtainLocationConfigr11 struct {
                                  //  Need OR       enum  setup}
                                  //  obtainLocationr11   {
                                };
                                ;
                                PowerPrefIndicationConfigr11 enum {
                                  typedef release;
                                  struct setup{enum powerPrefIndicationTimerr11{

                                      s0dot5, s1, s2, s5,
                                      s10 s30 s60 s90 s120 s300 s600 spare3;
                                      spare2 spare1};
                              };
                            };
                            ;
                            ReportProximityConfigr9 struct {
                              //  Need OR  ,    enum  enabled}
                              //  proximityIndicationEUTRAr9   {
                              //  Need OR      enum  enabled}
                              //  proximityIndicationUTRAr9   {
                            };
                            ;
                            ;
                            std::bitset<32> RANDCDMA2000;
                            ;
                            ;
                            enum RATType {
                              eutra utra gerancs geranps cdma20001XRTT;
                              spare3 spare2 spare1
                            };
                            ;
                            ;
                            int RRCTransactionIdentifier;
                            ;
                            ;
                            struct STMSI {
                              MMEC mmec;
                              std::bitset<32> mTMSI;
                            };
                            ;
                            ;
                            struct TraceReferencer10 {
                              PLMNIdentity plmnIdentityr10;
                              char traceIdr10;
                            };
                            ;
                            ;
                            UEC;
                            ;
                            UECapabilityRATContainer struct {
                              RATType ratType;
                              char T string ueCapabilityRATContainer;
                            };
                            ;
                            ;
                            struct UEEUTRACapability {
                              AccessStratumRelease accessStratumRelease;
                              int ueCategory;
                              PDCPParameters pdcpParameters;
                              PhyLayerParameters phyLayerParameters;
                              RFParameters rfParameters;
                              MeasParameters measParameters;
                              std::bitset<32> featureGroupIndicators;
                              struct interRATParameters {
                                IRATParametersUTRAFDD utraFDD;
                                IRATParametersUTRATDD128 utraTDD128;
                                IRATParametersUTRATDD384 utraTDD384;
                                IRATParametersUTRATDD768 utraTDD768;
                                IRATParametersGERAN geran;
                                IRATParametersCDMA2000HRPD cdma2000HRPD;
                                IRATParametersCDMA20001XRTT cdma20001xRTT;
                              };
                              UEEUTRACapabilityv920IEs nonCriticalExtension;
                            };
                            ;
                            //  Late non critical extensions;
                            struct UEEUTRACapabilityv9a0IEs {
                              std::bitset<32> featureGroupIndRel9Addr9;
                              UEEUTRACapabilityAddXDDModer9
                                  fddAddUEEUTRACapabilitiesr9;
                              UEEUTRACapabilityAddXDDModer9
                                  tddAddUEEUTRACapabilitiesr9;
                              UEEUTRACapabilityv9c0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv9c0IEs {
                              IRATParametersUTRAv9c0 interRATParametersUTRAv9c0;
                              UEEUTRACapabilityv9d0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv9d0IEs {
                              PhyLayerParametersv9d0 phyLayerParametersv9d0;
                              UEEUTRACapabilityv9e0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv9e0IEs {
                              RFParametersv9e0 rfParametersv9e0;
                              UEEUTRACapabilityv9h0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv9h0IEs {
                              IRATParametersUTRAv9h0 interRATParametersUTRAv9h0;
                              //  Following field is only to be used for late
                              //  REL9 extensions;
                              char T string lateNonCriticalExtension;
                              UEEUTRACapabilityv10c0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv10c0IEs {
                              OTDOAPositioningCapabilitiesr10
                                  otdoaPositioningCapabilitiesr10;
                              UEEUTRACapabilityv10f0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv10f0IEs {
                              RFParametersv10f0 rfParametersv10f0;
                              UEEUTRACapabilityv10i0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv10i0IEs {
                              RFParametersv10i0 rfParametersv10i0;
                              //  Following field is only to be used for late
                              //  REL10 extensions;
                              char lateNonCriticalExtension;
                              UEEUTRACapabilityv11d0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv10j0IEs {
                              RFParametersv10j0 rfParametersv10j0;
                              struct
                            } nonCriticalExtension{};
                            ;
                            struct UEEUTRACapabilityv11d0IEs {
                              RFParametersv11d0 rfParametersv11d0;
                              OtherParametersv11d0 otherParametersv11d0;
                              //  Following field is only to be used for late
                              //  REL11 extensions;
                              struct
                            } nonCriticalExtension{};
                            ;
                            //  Regular non critical extensions;
                            struct UEEUTRACapabilityv920IEs {
                              PhyLayerParametersv920 phyLayerParametersv920;
                              IRATParametersGERANv920
                                  interRATParametersGERANv920;
                              IRATParametersUTRAv920 interRATParametersUTRAv920;
                              IRATParametersCDMA20001XRTTv920
                                  interRATParametersCDMA2000v920;
                              , enum noBenFromBatConsumpOpt
                            } deviceTyper9 {
                              CSGProximityIndicationParametersr9
                                  csgProximityIndicationParametersr9;
                              NeighCellSIAcquisitionParametersr9
                                  neighCellSIAcquisitionParametersr9;
                              SONParametersr9 sonParametersr9;
                              UEEUTRACapabilityv940IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv940IEs {
                              char lateNonCriticalExtension;
                              ;
                              UEEUTRACapabilityv1020IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv1020IEs {
                              int ueCategoryv1020;
                              PhyLayerParametersv1020 phyLayerParametersv1020;
                              RFParametersv1020 rfParametersv1020;
                              MeasParametersv1020 measParametersv1020;
                              std::bitset<32> featureGroupIndRel10r10;
                              IRATParametersCDMA20001XRTTv1020
                                  interRATParametersCDMA2000v1020;
                              UEBasedNetwPerfMeasParametersr10
                                  ueBasedNetwPerfMeasParametersr10;
                              IRATParametersUTRATDDv1020
                                  interRATParametersUTRATDDv1020;
                              UEEUTRACapabilityv1060IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv1060IEs {
                              UEEUTRACapabilityAddXDDModev1060
                                  fddAddUEEUTRACapabilitiesv1060;
                              UEEUTRACapabilityAddXDDModev1060
                                  tddAddUEEUTRACapabilitiesv1060;
                              RFParametersv1060 rfParametersv1060;
                              UEEUTRACapabilityv1090IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv1090IEs {
                              RFParametersv1090 rfParametersv1090;
                              UEEUTRACapabilityv1130IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv1130IEs {
                              PDCPParametersv1130 pdcpParametersv1130;
                              PhyLayerParametersv1130 phyLayerParametersv1130;
                              RFParametersv1130 rfParametersv1130;
                              MeasParametersv1130 measParametersv1130;
                              IRATParametersCDMA2000v1130
                                  interRATParametersCDMA2000v1130;
                              OtherParametersr11 otherParametersr11;
                              UEEUTRACapabilityAddXDDModev1130
                                  fddAddUEEUTRACapabilitiesv1130;
                              UEEUTRACapabilityAddXDDModev1130
                                  tddAddUEEUTRACapabilitiesv1130;
                              UEEUTRACapabilityv1170IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv1170IEs {
                              PhyLayerParametersv1170 phyLayerParametersv1170;
                              int ueCategoryv1170;
                              UEEUTRACapabilityv1180IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv1180IEs {
                              RFParametersv1180 rfParametersv1180;
                              MBMSParametersr11 mbmsParametersr11;
                              UEEUTRACapabilityAddXDDModev1180
                                  fddAddUEEUTRACapabilitiesv1180;
                              UEEUTRACapabilityAddXDDModev1180
                                  tddAddUEEUTRACapabilitiesv1180;
                              UEEUTRACapabilityv11a0IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv11a0IEs {
                              int ueCategoryv11a0;
                              MeasParametersv11a0 measParametersv11a0;
                              UEEUTRACapabilityv1250IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv1250IEs {
                              PhyLayerParametersv1250 phyLayerParametersv1250;
                              RFParametersv1250 rfParametersv1250;
                              RLCParameters rlcParameters;
                              UEBasedNetwPerfMeasParametersv1250
                                  ueBasedNetwPerfMeasParametersv1250;
                              int ueCategoryDL;
                              int ueCategoryUL;
                              WLANIWParameters wlanIWParameters;
                              MeasParametersv1250 measParametersv1250;
                              DCParameters dcParameters;
                              MBMSParametersv1250 mbmsParametersv1250;
                              MACParameters macParameters;
                              UEEUTRACapabilityAddXDDModev1250
                                  fddAddUEEUTRACapabilitiesv1250;
                              UEEUTRACapabilityAddXDDModev1250
                                  tddAddUEEUTRACapabilitiesv1250;
                              SLParameters slParameters;
                              UEEUTRACapabilityv1260IEs nonCriticalExtension;
                            };
                            ;
                            struct UEEUTRACapabilityv1260IEs {
                              int ueCategoryDLv1260;
                              UEEUTRACapabilityv1270IEs nonCriticalExtension;
                            };
                            ;
                            UEEUTRACapabilityv1270IEs struct {
                              RFParametersv1270 rfParametersv1270;
                              UEEUTRACapabilityv1280IEs nonCriticalExtension;
                            };
                            ;
                            UEEUTRACapabilityv1280IEs struct {
                              PhyLayerParametersv1280 phyLayerParametersv1280;
                              UEEUTRACapabilityv13x0IEs nonCriticalExtension;
                            };
                            ;
                            UEEUTRACapabilityv13x0IEs struct {
                              DCParametersv13x0 dcParametersv13x0;
                              MeasParametersv13xy measParametersv13xy;
                              MACParametersv13x0 macParametersv13x0;
                              PDCPParametersv13x0 pdcpParametersv13x0;
                              PhyLayerParametersv13x0 phyLayerParametersv13x0;
                              RFParametersv13x0 rfParametersv13x0;
                              RLCParametersv13x0 rlcParametersv13x0;
                              int ueCategoryDLv13x0;
                              int ueCategoryULv13x0;
                              SCPTMParametersv13x0 scptmParametersv13x0;
                              SLParameters slParameters;
                              , enum supported
                            } supportOfLAA {
                              struct
                            }
                            nonCriticalExtension{};
                            ;
                            struct UEEUTRACapabilityAddXDDModer9 {
                              PhyLayerParameters phyLayerParametersr9;
                              std::bitset<32> featureGroupIndicatorsr9;
                              std::bitset<32> featureGroupIndRel9Addr9;
                              IRATParametersGERAN interRATParametersGERANr9;
                              IRATParametersUTRAv920 interRATParametersUTRAr9;
                              IRATParametersCDMA20001XRTTv920
                                  interRATParametersCDMA2000r9;
                              NeighCellSIAcquisitionParametersr9
                                  neighCellSIAcquisitionParametersr9;

                              ;
                            };
                            ;
                            struct UEEUTRACapabilityAddXDDModev1060 {
                              PhyLayerParametersv1020 phyLayerParametersv1060;
                              std::bitset<32> featureGroupIndRel10v1060;
                              IRATParametersCDMA20001XRTTv1020
                                  interRATParametersCDMA2000v1060;
                              IRATParametersUTRATDDv1020
                                  interRATParametersUTRATDDv1060;

                              ;
                              OTDOAPositioningCapabilitiesr10
                                  otdoaPositioningCapabilitiesr10;

                              ;
                            };
                            ;
                            struct UEEUTRACapabilityAddXDDModev1130 {
                              PhyLayerParametersv1130 phyLayerParametersv1130;
                              MeasParametersv1130 measParametersv1130;
                              OtherParametersr11 otherParametersr11;

                              ;
                            };
                            ;
                            struct UEEUTRACapabilityAddXDDModev1180 {
                              MBMSParametersr11 mbmsParametersr11;
                            };
                            ;
                            struct UEEUTRACapabilityAddXDDModev1250 {
                              PhyLayerParametersv1250 phyLayerParametersv1250;
                              MeasParametersv1250 measParametersv1250;
                            };
                            ;
                            enum AccessStratumRelease {
                              rel8 rel9 rel10 rel11 rel12 spare3;
                              spare2 spare1
                            };
                            ;
                            struct DCParameters {
                              , enum supported
                            } drbTypeSplit {
                              enum supported
                            }
                            drbTypeSCG{};
                            ;
                            struct DCParametersv13x0 {
                              , enum supported
                            } pdcpTransferSplitUL {
                              enum supported
                            }
                            ueSSTDMeas{};
                            ;
                            struct MACParameters {
                              , enum supported
                            } logicalChannelSRProhibitTimer {
                              enum supported
                            }
                            longDRXCommand{};
                            ;
                            struct MACParametersv13x0 {
                              , enum supported
                            } extendedMACLengthField {
                              enum supported
                            }
                            extendedLongDRX{};
                            ;
                            struct RLCParameters {
                              enum supported
                            } extendedRLCLIField{};
                            ;
                            struct RLCParametersv13x0 {
                              enum supported
                            } extendedRLCSNSOField{};
                            ;
                            struct PDCPParameters {
                              struct supportedROHCProfiles {
                                bool profile0x0001;
                                bool profile0x0002;
                                bool profile0x0003;
                                bool profile0x0004;
                                bool profile0x0006;
                                bool profile0x0101;
                                bool profile0x0102;
                                bool profile0x0103;
                                bool profile0x0104;
                              };
                              enum maxNumberROHCContextSessions {
                                cs2 cs4 cs8 cs12 cs16 cs24 cs32;
                                cs48 cs64 cs128 cs256 cs512 cs1024;
                                DEFAULT cs16 cs16384 spare2 spare1
                              };

                              ;
                            };
                            ;
                            struct PDCPParametersv1130 {
                              , enum supported
                            } pdcpSNExtensionr11 {
                              enum supported
                            }
                            supportRohcContextContinuer11{};
                            ;
                            struct PDCPParametersv13x0 {
                              enum supported
                            } pdcpSNExtension18bits{};
                            ;
                            struct PhyLayerParameters {
                              bool ueTxAntennaSelectionSupported;
                              bool ueSpecificRefSigsSupported;
                            };
                            ;
                            struct PhyLayerParametersv920 {
                              , enum supported
                            } enhancedDualLayerFDDr9 {
                              enum supported
                            }
                            enhancedDualLayerTDDr9{};
                            ;
                            struct PhyLayerParametersv9d0 {
                              , enum supported
                            } tm5FDDr9 {
                              enum supported
                            }
                            tm5TDDr9{};
                            ;
                            struct PhyLayerParametersv1020 {
                              , enum supported
                            } twoAntennaPortsForPUCCHr10 {
                              , enum supported
                            }
                            tm9With8TxFDDr10 { , enum supported }
                            pmiDisablingr10 { , enum supported }
                            crossCarrierSchedulingr10 { , enum supported }
                            simultaneousPUCCHPUSCHr10 { , enum supported }
                            multiClusterPUSCHWithinCCr10 {
                              NonContiguousULRAWithinCCListr10
                                  nonContiguousULRAWithinCCListr10;
                            };
                            ;
                            struct PhyLayerParametersv1130 {
                              , enum supported
                            } crsInterfHandlr11 {
                              , enum supported
                            }
                            ePDCCHr11 { , enum supported }
                            multiACKCSIReportingr11 { , enum supported }
                            ssCCHInterfHandlr11 { , enum supported }
                            tddSpecialSubframer11 { , enum supported }
                            txDivPUCCH1bChSelectr11 { enum supported }
                            ulCoMPr11{};
                            ;
                            struct PhyLayerParametersv1170 {
                              std::bitset<2>
                                  interBandTDDCAWithDifferentConfigr11;
                            };
                            ;
                            struct PhyLayerParametersv1250 {
                              , enum supported
                            } eHARQPatternFDD {
                              , enum supported
                            }
                            enhanced4TxCodebook {
                              std::bitset<2> tddFDDCAPCellDuplex;
                              , enum supported
                            }
                            phyTDDReConfigTDDPCell { , enum supported }
                            phyTDDReConfigFDDPCell { , enum supported }
                            puschFeedbackMode { , enum supported }
                            puschSRSPowerControlSubframeSet { , enum supported }
                            csiSubframeSet { , enum supported }
                            noResourceRestrictionForTTIBundling {
                              , enum supported
                            }
                            discoverySignalsInDeactSCell {
                              NAICSCapabilityList naicsCapabilityList;
                            };
                            ;
                            struct PhyLayerParametersv1280 {
                              enum supported
                            } alternativeTBSIndices{};
                            struct PhyLayerParametersv13x0 {
                              std::bitset<2> codebookHARQACK;
                              , int maxNumberUpdatedCSIProc, enum supported
                            } fddHarqTimingTDD {
                              int supportedBlindDecoding;
                              , enum supported
                            }
                            pucchFormat4 { , enum supported }
                            pucchFormat5 { enum supported }
                            pucchSCell{};
                            ;
                            NonC;
                            ;
                            struct NonContiguousULRAWithinCCr10 {
                              enum supported
                            } nonContiguousULRAWithinCCInfor10{};
                            ;
                            struct RFParameters {
                              SupportedBandListEUTRA supportedBandListEUTRA;
                            };
                            ;
                            struct RFParametersv9e0 {
                              SupportedBandListEUTRAv9e0
                                  supportedBandListEUTRAv9e0;
                            };
                            ;
                            struct RFParametersv1020 {
                              SupportedBandCombinationr10
                                  supportedBandCombinationr10;
                            };
                            ;
                            struct RFParametersv1060 {
                              SupportedBandCombinationExtr10
                                  supportedBandCombinationExtr10;
                            };
                            ;
                            struct RFParametersv1090 {
                              SupportedBandCombinationv1090
                                  supportedBandCombinationv1090;
                            };
                            ;
                            struct RFParametersv10f0 {
                              std::bitset<32> modifiedMPRBehaviorr10;
                            };
                            ;
                            struct RFParametersv10i0 {
                              SupportedBandCombinationv10i0
                                  supportedBandCombinationv10i0;
                            };
                            ;
                            struct RFParametersv10j0 {
                              enum supported
                            } multiNSPmaxr10{};
                            ;
                            struct RFParametersv1130 {
                              SupportedBandCombinationv1130
                                  supportedBandCombinationv1130;
                            };
                            ;
                            struct RFParametersv1180 {
                              , enum supported
                            } freqBandRetrievalr11 {
                              SEQU requestedBandsr11;
                              SupportedBandCombinationAddr11
                                  supportedBandCombinationAddr11;
                            };
                            ;
                            struct RFParametersv11d0 {
                              SupportedBandCombinationAddv11d0
                                  supportedBandCombinationAddv11d0;
                            };
                            ;
                            struct RFParametersv1250 {
                              SupportedBandListEUTRAv1250
                                  supportedBandListEUTRAv1250;
                              SupportedBandCombinationv1250
                                  supportedBandCombinationv1250;
                              SupportedBandCombinationAddv1250
                                  supportedBandCombinationAddv1250;
                              enum supported
                            } freqBandPriorityAdjustment{};
                            ;
                            struct RFParametersv1270 {
                              SupportedBandCombinationv1270
                                  supportedBandCombinationv1270;
                              SupportedBandCombinationAddv1270
                                  supportedBandCombinationAddv1270;
                            };
                            ;
                            struct RFParametersv13x0 {
                              enum requestedMaximumCCs {
                                includedDL includedBoth
                              };
                              , enum included
                            } skipFallbackCombinations {
                              SupportedBandCombinations
                                  supportedBandCombinations;
                              MIMOCapabilityDLr10 supportedMIMOCapabilityDL;
                            };
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            Supp;
                            ;
                            ;
                            ;
                            struct SupportedBandCombinations {
                              BandCombinationList bandCombinationList;
                            };
                            ;
                            Band;
                            ;
                            struct BandCombination {
                              , enum true
                            } additionalFallbackSupported {
                              BandCombinationParametersCommon
                                  bandCombinationParameters;
                            };
                            ;
                            BandCombinationParametersCommon struct {
                              SEQU bandParameterList;
                              SupportedBandwidthCombinationSetr10
                                  supportedBandwidthCombinationSet;
                              , enum supported
                            } multipleTimingAdvance {
                              , enum supported
                            }
                            simultaneousRxTx {
                              BandInfoEUTRA bandInfoEUTRA;
                              struct dcSupport {
                                , enum supported
                              } asynchronous {
                                enum supportedCellGrouping {
                                  std::bitset<3> threeEntries;
                                  std::bitset<7> fourEntries;
                                  std::bitset<15> fiveEntries;
                                };
                              };
                              std::bitset<112> supportedNAICS2CRSAP;
                              std::bitset<1> commSupportedBandsPerBC;
                            };
                            ;
                            ;
                            Band;
                            ;
                            BandCombinationParametersExtr10 struct {
                              SupportedBandwidthCombinationSetr10
                                  supportedBandwidthCombinationSetr10;
                            };
                            ;
                            Band;
                            ;
                            BandCombinationParametersv10i0 struct {
                              SEQU bandParameterListv10i0;
                              BandParametersv10i0;
                            };
                            ;
                            struct BandCombinationParametersv1130 {
                              , enum supported
                            } multipleTimingAdvancer11 {
                              , enum supported
                            }
                            simultaneousRxTxr11 {
                              SEQU bandParameterListr11;

                              ;
                            };
                            ;
                            struct BandCombinationParametersr11 {
                              SEQU bandParameterListr11;
                              BandParametersr11;
                              SupportedBandwidthCombinationSetr10
                                  supportedBandwidthCombinationSetr11;
                              , enum supported
                            } multipleTimingAdvancer11 {
                              , enum supported
                            }
                            simultaneousRxTxr11 {
                              BandInfoEUTRA bandInfoEUTRAr11;

                              ;
                            };
                            ;
                            BandCombinationParametersv1250 struct {
                              struct dcSupport {
                                , enum supported
                              } asynchronous {
                                enum supportedCellGrouping {
                                  std::bitset<3> threeEntries;
                                  std::bitset<7> fourEntries;
                                  std::bitset<15> fiveEntries;
                                };
                              };
                              std::bitset<112> supportedNAICS2CRSAP;
                              std::bitset<1> commSupportedBandsPerBC;

                              ;
                            };
                            ;
                            BandCombinationParametersv1270 struct {
                              SEQU bandParameterListv1270;
                              BandParametersv1270;
                            };
                            ;
                            ;
                            std::bitset<110>
                                SupportedBandwidthCombinationSetr10;
                            ;
                            BandParametersr10 struct {
                              FreqBandIndicator bandEUTRAr10;
                              BandParametersULr10 bandParametersULr10;
                              BandParametersDLr10 bandParametersDLr10;
                            };
                            ;
                            BandParametersv1090 struct {
                              FreqBandIndicatorv9e0 bandEUTRAv1090;

                              ;
                            };
                            ;
                            BandParametersv10i0 struct {
                              SEQU bandParametersDLv10i0;
                            };
                            ;
                            BandParametersv1130 struct {
                              enum n4
                            } supportedCSIProcr11{};
                            ;
                            BandParametersr11 struct {
                              FreqBandIndicatorr11 bandEUTRAr11;
                              BandParametersULr10 bandParametersULr11;
                              BandParametersDLr10 bandParametersDLr11;
                              enum n4
                            } supportedCSIProcr11{};
                            ;
                            BandParametersv1270 struct {
                              SEQU bandParametersDLv1270;
                            };
                            ;
                            BandParameters struct {
                              FreqBandIndicatorr11 bandEUTRA;
                              BandParametersUL bandParametersUL;
                              BandParametersDL bandParametersDL;
                              enum n4
                            } supportedCSIProc{};
                            ;
                            Band;
                            ;
                            BandParametersUL struct OF CAMIMOParametersULr10;
                            ;
                            ;
                            CAMIMOParametersULr10 struct {
                              CABandwidthClassr10 caBandwidthClassULr10;
                              MIMOCapabilityULr10 supportedMIMOCapabilityULr10;
                            };
                            ;
                            Band;
                            ;
                            BandParametersDL struct OF CAMIMOParametersDL;
                            ;
                            CAMIMOParametersDLr10 struct {
                              CABandwidthClassr10 caBandwidthClassDLr10;
                              MIMOCapabilityDLr10 supportedMIMOCapabilityDLr10;
                            };
                            ;
                            CAMIMOParametersDLv10i0 struct {
                              enum supported
                            } fourLayerTM3TM4r10{};
                            ;
                            CAMIMOParametersDLv1270 struct {
                              SEQU intraBandContiguousCCInfoList;
                            };
                            ;
                            CAMIMOParametersDL struct {
                              CABandwidthClassr10 caBandwidthClassDL;
                              MIMOCapabilityDLr10 supportedMIMOCapabilityDL;
                              , enum supported
                            } fourLayerTM3TM4 {
                              SEQU intraBandContiguousCCInfoList;
                            };
                            ;
                            IntraBandContiguousCCInfo struct {
                              , enum supported
                            } fourLayerTM3TM4perCC {
                              MIMOCapabilityDLr10 supportedMIMOCapabilityDL;
                              enum n4
                            }
                            supportedCSIProc{};
                            ;
                            CABandwidthClassr10 enum
                          } {

                            b, c, d, e;
                            MIMOCapabilityULr10 enum fourLayers
                          }
                          {
                            ;
                            MIMOCapabilityDLr10 enum eightLayers
                          }
                          {
                            ;
                            SEQU SupportedBandListEUTRA;
                            ;
                            SEQU SupportedBandListEUTRAv9e0;
                            ;
                            SEQU SupportedBandListEUTRAv1250;
                            ;
                            struct SupportedBandEUTRA {
                              FreqBandIndicator bandEUTRA;
                              bool halfDuplex;
                            };
                            ;
                            struct SupportedBandEUTRAv9e0 {
                              FreqBandIndicatorv9e0 bandEUTRAv9e0;
                            };
                            ;
                            struct SupportedBandEUTRAv1250 {
                              , enum supported
                            } dl256QAM {
                              enum supported
                            }
                            ul64QAM{};
                            ;
                            struct MeasParameters {
                              BandListEUTRA bandListEUTRA;
                            };
                            ;
                            struct MeasParametersv1020 {
                              BandCombinationListEUTRAr10
                                  bandCombinationListEUTRAr10;
                            };
                            ;
                            struct MeasParametersv1130 {
                              enum supported
                            } rsrqMeasWidebandr11{};
                            ;
                            struct MeasParametersv11a0 {
                              enum true
                            } benefitsFromInterruptionr11{};
                            ;
                            struct MeasParametersv1250 {
                              , enum supported
                            } timerT312 {
                              , enum supported
                            }
                            alternativeTimeToTrigger { , enum supported }
                            incMonEUTRA { , enum supported }
                            incMonUTRA { , enum supported }
                            extendedMaxMeasId { , enum supported }
                            extendedRSRQLowerRange { , enum supported }
                            rsrqOnAllSymbols { , enum supported }
                            crsDiscoverySignalsMeas { enum supported }
                            csiRSDiscoverySignalsMeas{};
                            ;
                            struct MeasParametersv13xy {
                              , enum supported
                            } rsSINRMeas {
                              enum supported
                            }
                            whiteCellList{};
                            ;
                            SEQU BandListEUTRA;
                            ;
                            SEQU BandCombinationListEUTRAr10;
                            ;
                            struct BandInfoEUTRA {
                              InterFreqBandList interFreqBandList;
                              InterRATBandList interRATBandList;
                            };
                            ;
                            SEQU InterFreqBandList;
                            ;
                            struct InterFreqBandInfo {
                              bool interFreqNeedForGaps;
                            };
                            ;
                            SEQU InterRATBandList;
                            ;
                            struct InterRATBandInfo {
                              bool interRATNeedForGaps;
                            };
                            ;
                            struct IRATParametersUTRAFDD {
                              SupportedBandListUTRAFDD supportedBandListUTRAFDD;
                            };
                            ;
                            struct IRATParametersUTRAv920 {
                              enum supported
                            } eRedirectionUTRAr9{};
                            ;
                            struct IRATParametersUTRAv9c0 {
                              , enum supported
                            } voiceOverPSHSUTRAFDDr9 {
                              , enum supported
                            }
                            voiceOverPSHSUTRATDD128r9 { , enum supported }
                            srvccFromUTRAFDDToUTRAFDDr9 { , enum supported }
                            srvccFromUTRAFDDToGERANr9 { , enum supported }
                            srvccFromUTRATDD128ToUTRATDD128r9 { enum supported }
                            srvccFromUTRATDD128ToGERANr9{};
                            ;
                            struct IRATParametersUTRAv9h0 {
                              enum supported
                            } mfbiUTRAr9{};
                            ;
                            SEQU SupportedBandListUTRAFDD;
                            ;
                            enum SupportedBandUTRAFDD {
                              bandI bandII bandIII bandIV bandV bandVI;
                              bandVII bandVIII bandIX bandX bandXI;
                              bandXII bandXIII bandXIV bandXV bandXVI;
                              bandXVII8a0 bandXVIII8a0 bandXIX8a0 bandXX8a0;
                              bandXXI8a0 bandXXII8a0 bandXXIII8a0 bandXXIV8a0;
                              bandXXV8a0 bandXXVI8a0 bandXXVII8a0 bandXXVIII8a0;
                              bandXXIX8a0 bandXXX8a0 bandXXXI8a0 bandXXXII8a0
                            };
                            ;
                            struct IRATParametersUTRATDD128 {
                              SupportedBandListUTRATDD128
                                  supportedBandListUTRATDD128;
                            };
                            ;
                            SEQU SupportedBandListUTRATDD128;
                            ;
                            enum SupportedBandUTRATDD128 {
                              a b c d e f g h i j k l m n;
                              o p
                            };
                            ;
                            struct IRATParametersUTRATDD384 {
                              SupportedBandListUTRATDD384
                                  supportedBandListUTRATDD384;
                            };
                            ;
                            SEQU SupportedBandListUTRATDD384;
                            ;
                            enum SupportedBandUTRATDD384 {
                              a b c d e f g h i j k l m n;
                              o p
                            };
                            ;
                            struct IRATParametersUTRATDD768 {
                              SupportedBandListUTRATDD768
                                  supportedBandListUTRATDD768;
                            };
                            ;
                            SEQU SupportedBandListUTRATDD768;
                            ;
                            enum SupportedBandUTRATDD768 {
                              a b c d e f g h i j k l m n;
                              o p
                            };
                            ;
                            struct IRATParametersUTRATDDv1020 {
                              enum supported
                            } eRedirectionUTRATDDr10{};
                            ;
                            struct IRATParametersGERAN {
                              SupportedBandListGERAN supportedBandListGERAN;
                              bool interRATPSHOToGERAN;
                            };
                            ;
                            struct IRATParametersGERANv920 {
                              , enum supported
                            } dtmr9 {
                              enum supported
                            }
                            eRedirectionGERANr9{};
                            ;
                            SEQU SupportedBandListGERAN;
                            ;
                            enum SupportedBandGERAN {
                              gsm450 gsm480 gsm710 gsm750 gsm810 gsm850;
                              gsm900P gsm900E gsm900R gsm1800 gsm1900;
                              spare5 spare4 spare3 spare2 spare1
                            };
                            ;
                            struct IRATParametersCDMA2000HRPD {
                              SupportedBandListHRPD supportedBandListHRPD;
                              enum txConfigHRPD { enum dual } rxConfigHRPD{};
                              ;
                              SEQU SupportedBandListHRPD;
                              ;
                              struct IRATParametersCDMA20001XRTT {
                                SupportedBandList1XRTT supportedBandList1XRTT;
                                enum txConfig1XRTT {
                                  enum dual
                                } rxConfig1XRTT{};
                                ;
                                struct IRATParametersCDMA20001XRTTv920 {
                                  enum eCSFB1XRTTr9 {
                                    enum supported
                                  } eCSFBConcPSMob1XRTTr9{};
                                  ;
                                  struct IRATParametersCDMA20001XRTTv1020 {
                                    enum supported
                                  } eCSFBdual1XRTTr10{};
                                  ;
                                  struct IRATParametersCDMA2000v1130 {
                                    enum supported
                                  } cdma2000NWSharingr11{};
                                  ;
                                  SEQU SupportedBandList1XRTT;
                                  ;
                                  struct CSGProximityIndicationParametersr9 {
                                    , enum supported
                                  } intraFreqProximityIndicationr9 {
                                    , enum supported
                                  }
                                  interFreqProximityIndicationr9 {
                                    enum supported
                                  }
                                  utranProximityIndicationr9{};
                                  ;
                                  struct NeighCellSIAcquisitionParametersr9 {
                                    , enum supported
                                  } intraFreqSIAcquisitionForHOr9 {
                                    , enum supported
                                  }
                                  interFreqSIAcquisitionForHOr9 {
                                    enum supported
                                  }
                                  utranSIAcquisitionForHOr9{};
                                  ;
                                  struct SONParametersr9 {
                                    enum supported
                                  } rachReportr9{};
                                  ;
                                  struct UEBasedNetwPerfMeasParametersr10 {
                                    , enum supported
                                  } loggedMeasurementsIdler10 {
                                    enum supported
                                  }
                                  standaloneGNSSLocationr10{};
                                  ;
                                  struct UEBasedNetwPerfMeasParametersv1250 {
                                    enum supported
                                  } loggedMBSFNMeasurements{};
                                  ;
                                  struct OTDOAPositioningCapabilitiesr10 {
                                    enum otdoaUEAssistedr10 {
                                      enum supported
                                    } interFreqRSTDMeasurementr10{};
                                    ;
                                    struct OtherParametersr11 {
                                      , enum supported
                                    } inDeviceCoexIndr11 {
                                      , enum supported
                                    }
                                    powerPrefIndr11 { enum supported }
                                    ueRxTxTimeDiffMeasurementsr11{};
                                    ;
                                    struct OtherParametersv11d0 {
                                      enum supported
                                    } inDeviceCoexIndULCAr11{};
                                    ;
                                    struct MBMSParametersr11 {
                                      , enum supported
                                    } mbmsSCellr11 {
                                      enum supported
                                    }
                                    mbmsNonServingCellr11{};
                                    ;
                                    struct MBMSParametersv1250 {
                                      enum supported
                                    } mbmsAsyncDC{};
                                    ;
                                    struct SCPTMParametersv13x0 {
                                      enum supported
                                    } scptmParallelReception{};
                                    ;
                                    struct WLANIWParameters {
                                      , enum supported
                                    } wlanIWRANRules {
                                      enum supported
                                    }
                                    wlanIWANDSFPolicies{};
                                    ;
                                    NAIC;
                                    ;
                                    ;
                                    struct NAICSCapabilityEntry {
                                      int numberOfNAICSCapableCC;
                                      enum numberOfAggregatedPRB {
                                        n50 n75 n100 n125 n150 n175;
                                        n200 n225 n250 n275 n300 n350;
                                        n400 n450 n500 spare
                                      };

                                      ;
                                    };
                                    ;
                                    struct SLParameters {
                                      , enum supported
                                    } commSimultaneousTx {
                                      FreqBandIndicatorListEUTRA
                                          commSupportedBands;
                                      SupportedBandInfoList discSupportedBands;
                                      , enum supported
                                    }
                                    discScheduledResourceAlloc {
                                      , enum supported
                                    }
                                    discUESelectedResourceAlloc {
                                      , enum supported
                                    }
                                    discSLSS { enum n400 }
                                    discSupportedProc{};
                                    ;
                                    struct SLParameters {
                                      enum supported
                                    } discSysInfoReporting{};
                                    ;
                                    SEQU SupportedBandInfoList;
                                    ;
                                    struct SupportedBandInfo {
                                      enum supported
                                    } support{};
                                    ;
                                    SEQU FreqBandIndicatorListEUTRA;
                                    ;
                                    ;
                                    struct UERadioPagingInfo {
                                      int ueCategoryv1250;

                                      ;
                                    };
                                    ;
                                    ;
                                    struct UETimersAndConstants {
                                      enum t300 {
                                        ms100 ms200 ms300 ms400 ms600 ms1000
                                            ms1500;
                                        ms2000
                                      };
                                      enum t301 {
                                        ms100 ms200 ms300 ms400 ms600 ms1000
                                            ms1500;
                                        ms2000
                                      };
                                      enum t310 {
                                        ms0 ms50 ms100 ms200 ms500 ms1000 ms2000
                                      };
                                      enum n310 { n1 n2 n3 n4 n6 n8 n10 n20 };
                                      enum t311 {
                                        ms1000 ms3000 ms5000 ms10000 ms15000;
                                        ms20000 ms30000
                                      };
                                      enum n311 { n1 n2 n3 n4 n5 n6 n8 n10 };

                                      ;
                                    };
                                    ;
                                    ;
                                    SEQU VisitedCellInfoList;
                                    ;
                                    struct VisitedCellInfo {
                                      enum visitedCellId {
                                        CellGlobalIdEUTRA cellGlobalId;
                                        struct pciarfcn{
                                            PhysCellId physCellId;
                                            ARFCNValueEUTRAr9 carrierFreq;};
                                    };
                                    int timeSpent;

                                    ;
                                  };
                                  ;
                                  ;
                                  struct WLANOffloadConfig {
                                    struct thresholdRSRP {
                                      RSRPRange thresholdRSRPLow;
                                      RSRPRange thresholdRSRPHigh;
                                      //  Need OR                 };
                                      struct thresholdRSRQ {
                                        RSRQRange thresholdRSRQLow;
                                        RSRQRange thresholdRSRQHigh;
                                        //  Need OR                 };
                                        struct thresholdRSRQOnAllSymbolsWithWB {
                                          RSRQRange
                                              thresholdRSRQOnAllSymbolsWithWBLow;
                                          RSRQRange
                                              thresholdRSRQOnAllSymbolsWithWBHigh;
                                          //                    };
                                          struct thresholdRSRQOnAllSymbols {
                                            RSRQRange
                                                thresholdRSRQOnAllSymbolsLow;
                                            RSRQRange
                                                thresholdRSRQOnAllSymbolsHigh;
                                            //                    };
                                            struct thresholdRSRQWB {
                                              RSRQRange thresholdRSRQWBLow;
                                              RSRQRange thresholdRSRQWBHigh;
                                              //                    };
                                              ;
                                              struct
                                                  thresholdChannelUtilization {
                                                int thresholdChannelUtilizationLow;
                                                int thresholdChannelUtilizationHigh;
                                                //  Need OR                 };
                                                struct
                                                    thresholdBackhaulBandwidth {
                                                  WLANbackhaulRate
                                                      thresholdBackhaulDLBandwidthLow;
                                                  WLANbackhaulRate
                                                      thresholdBackhaulDLBandwidthHigh;
                                                  WLANbackhaulRate
                                                      thresholdBackhaulULBandwidthLow;
                                                  WLANbackhaulRate
                                                      thresholdBackhaulULBandwidthHigh;
                                                  //  Need OR                 };
                                                  struct thresholdBeaconRSSI {
                                                    int thresholdBeaconRSSILow;
                                                    int thresholdBeaconRSSIHigh;
                                                    //  Need OR };
                                                    //  Need OR  std::bitset<16>
                                                    //  offloadPreferenceIndicator;
                                                    //  Need OR    TReselection
                                                    //  tSteeringWLAN;

                                                    ;
                                                  };
                                                  ;
                                                  enum WLANbackhaulRate;
                                                  {

                                                    r4 r8 r16 r32
                                                        r64 8 r256 r1024 r2048
                                                            r4096 r8192 r16384
                                                                r32768
                                                                    r65536 1072;
                                                    r262144 r524288 r1048576
                                                        r2097152 r4194304
                                                            r8388608;
                                                    r16777216 r33554432
                                                        r67108864 4217728 r268435456;
                                                    r536870912 r1073741824
                                                        r2147483648 r4294967296
                                                  };
                                                  ;
                                                  ;
                                                  struct
                                                      MBMSNotificationConfigr9 {
                                                    enum notificationRepetitionCoeffr9 {
                                                      int notificationOffsetr9;
                                                      int notificationSFIndexr9;
                                                    };
                                                    ;
                                                    ;
                                                    SEQU MBMSServiceList;
                                                    ;
                                                    struct MBMSServiceInfo {
                                                      TMGIr9 tmgi;
                                                    };
                                                    ;
                                                    ;
                                                    int MBSFNAreaId;
                                                    ;
                                                    ;
                                                    SEQU MBSFNAreaInfoListr9;
                                                    ;
                                                    struct MBSFNAreaInfor9 {
                                                      MBSFNAreaId mbsfnAreaIdr9;
                                                      enum nonMBSFNregionLength {
                                                        int notificationIndicatorr9;
                                                        struct mcchConfigr9{
                                                            enum mcchRepetitionPeriodr9{

                                                                rf64,
                                                                rf128 int
                                                                    mcchOffsetr9;
                                                                enum mcchModificationPeriodr9{
                                                                    std::bitset<
                                                                        6>
                                                                        sfAllocInfor9;
                                                                    enum n19}
                                                      signallingMCSr9{

                                                          n7};

                                                      ;
                                                    };
                                                    ;
                                                    ;
                                                    struct MBSFNSubframeConfig {
                                                      enum radioframeAllocationPeriod {

                                                        n2, n4, n8,
                                                        n16 int
                                                            radioframeAllocationOffset;
                                                        enum subframeAllocation{
                                                            std::bitset<6>
                                                                oneFrame;
                                                            std::bitset<24>
                                                                fourFrames;};
                                                    };
                                                    ;
                                                    SEQU PMCHInfoListr9;
                                                    ;
                                                    SEQU PMCHInfoListExt;
                                                    ;
                                                    struct PMCHInfor9 {
                                                      PMCHConfigr9 pmchConfigr9;
                                                      MBMSSessionInfoListr9
                                                          mbmsSessionInfoListr9;

                                                      ;
                                                    };
                                                    ;
                                                    struct PMCHInfoExt {
                                                      PMCHConfig pmchConfig;
                                                      MBMSSessionInfoListr9
                                                          mbmsSessionInfoList;

                                                      ;
                                                    };
                                                    ;
                                                    SEQU MBMSSessionInfoListr9;
                                                    ;
                                                    struct MBMSSessionInfor9 {
                                                      TMGIr9 tmgir9;
                                                      //  Need OR     char
                                                      //  sessionIdr9;
                                                      int logicalChannelIdentityr9;

                                                      ;
                                                    };
                                                    ;
                                                    struct PMCHConfigr9 {
                                                      int sfAllocEndr9;
                                                      int dataMCSr9;
                                                      enum mchSchedulingPeriodr9 {
                                                        rf8 rf16 rf32 rf64 rf128
                                                            rf256 rf512 rf1024
                                                      };

                                                      ;
                                                    };
                                                    ;
                                                    struct PMCHConfig {
                                                      int sfAllocEnd;
                                                      enum dataMCS {
                                                        int normal;
                                                        int higerOrder;
                                                      };
                                                      enum mchSchedulingPeriod {
                                                        rf4 rf8 rf16 rf32 rf64
                                                            rf128 rf256 rf512
                                                                rf1024
                                                      };

                                                      ;
                                                    };
                                                    ;
                                                    struct TMGIr9 {
                                                      enum plmnIdr9 {
                                                        int plmnIndexr9;
                                                        PLMNIdentity
                                                            explicitValuer9;
                                                      };
                                                      char serviceIdr9;
                                                    };
                                                    ;
                                                    ;
                                                    ;
                                                    SEQU SCMTCHInfoList;
                                                    ;
                                                    struct SCMTCHInfo {
                                                      MBMSSessionInfo
                                                          mbmsSessionInfo;
                                                      CRNTI gRNTI;
                                                      SCMTCHSchedulingInfo
                                                          scmtchschedulingInfo;
                                                      std::bitset<13>
                                                          scmtchneighbourCell;

                                                      ;
                                                    };
                                                    ;
                                                    struct MBMSSessionInfo {
                                                      TMGIr9 tmgi;
                                                      //  Need OR    char
                                                      //  sessionId;
                                                    };
                                                    ;
                                                    struct
                                                        SCMTCHSchedulingInfo {
                                                      enum onDurationTimerSCPTM {
                                                        psf1 psf2 psf3 psf4 psf5
                                                            psf6;
                                                        psf8 psf10 psf20 psf30
                                                            psf40;
                                                        psf50 psf60 psf80
                                                            psf100;
                                                        psf200
                                                      };
                                                      enum drxInactivityTimerSCPTM {
                                                        psf0 psf1 psf2 psf4
                                                            psf8;
                                                        psf10 psf20 psf40;
                                                        psf80 psf160 ps320;
                                                        psf640 psf960;
                                                        psf1280 psf1920 psf2560
                                                      };
                                                      enum schedulingPeriodStartOffsetSCPTM {
                                                        int sf10;
                                                        int sf20;
                                                        int sf32;
                                                        int sf40;
                                                        int sf64;
                                                        int sf80;
                                                        int sf128;
                                                        int sf160;
                                                        int sf256;
                                                        int sf320;
                                                        int sf512;
                                                        int sf640;
                                                        int sf1024;
                                                      };

                                                      ;
                                                    };
                                                    ;
                                                    ;
                                                    SEQU SCPTMNeighbourCellList;
                                                    ;
                                                    ;
                                                    struct SLCommConfig {
                                                      enum commTxResources {
                                                        typedef release;
                                                        enum setup{struct scheduled{
                                                            CRNTI slRNTI;
                                                            MACMainConfigSL
                                                                macMainConfig;
                                                            SLCommResourcePool
                                                                scCommTxConfig;
                                                            //         int mcs;
                                                        };
                                                      struct ueSelected {
                                                        //  Pool for normal
                                                        //  usage;
                                                        struct
                                                            commTxPoolNormalDedicated {
                                                          //    SLTxPoolToReleaseList
                                                          //    poolToReleaseList;
                                                          //    SLCommTxPoolToAddModList
                                                          //    poolToAddModList;
                                                        };
                                                      };
                                                    };
                                                    //                       };

                                                    ;
                                                    enum scheduledx0 {
                                                      typedef release;
                                                      struct setup{
                                                          LogicalChGroupInfoList
                                                              logicalChGroupInfoList;
                                                          bool
                                                              multipleTxAllowed;};
                                                    //                      };
                                                    struct ueSelectedx0 {
                                                      struct
                                                          commTxPoolNormalDedicatedExt {
                                                        //    SLTxPoolToReleaseListExt
                                                        //    poolToReleaseListExt;
                                                        //     SLCommTxPoolToAddModListExt
                                                        //     poolToAddModListExt;
                                                      };
                                                      //                     };
                                                      //        bool
                                                      //        commTxAllowRelayDedicated;
                                                    };
                                                    ;
                                                    SEQU LogicalChGroupInfoList;
                                                    ;
                                                    SEQU
                                                        SLCommTxPoolToAddModList;
                                                    ;
                                                    SEQU
                                                        SLCommTxPoolToAddModListExt;
                                                    ;
                                                    struct
                                                        SLCommTxPoolToAddMod {
                                                      SLTxPoolIdentity
                                                          poolIdentity;
                                                      SLCommResourcePool pool;
                                                    };
                                                    ;
                                                    struct
                                                        SLCommTxPoolToAddModExt {
                                                      SLCommTxPoolIdentityv13x0
                                                          poolIdentityv13x0;
                                                      SLCommResourcePool pool;
                                                    };
                                                    ;
                                                    struct MACMainConfigSL {
                                                      //       PeriodicBSRTimer
                                                      //       periodicBSRTimerSL;
                                                      RetxBSRTimer
                                                          retxBSRTimerSL;
                                                    };
                                                    ;
                                                    ;
                                                    SEQU SLCommTxPoolList;
                                                    ;
                                                    SEQU SLCommTxPoolListExt;
                                                    ;
                                                    SEQU SLCommRxPoolList;
                                                    ;
                                                    struct SLCommResourcePool {
                                                      SLCPLen scCPLen;
                                                      SLPeriodComm scPeriod;
                                                      SLTFResourceConfig
                                                          scTFResourceConfig;
                                                      SLCPLen dataCPLen;
                                                      SLHoppingConfigComm
                                                          dataHoppingConfig;
                                                      struct
                                                          ueSelectedResourceConfig {
                                                        SLTFResourceConfig
                                                            dataTFResourceConfig;
                                                        //     SLTRPTSubset
                                                        //     trptSubset;
                                                        //  Need OR };
                                                        struct
                                                            rxParametersNCell {
                                                          //          TDDConfig
                                                          //          tddConfig;
                                                          int syncConfigIndex;
                                                          //  Need OR };
                                                          struct txParameters {
                                                            SLTxParameters
                                                                scTxParameters;
                                                            SLTxParameters
                                                                dataTxParameters;
                                                            //  Cond Tx };

                                                            ;
                                                            //  Cond Tx
                                                            //  SLPriorityList
                                                            //  priorityList;

                                                            ;
                                                            ;
                                                          };
                                                          ;
                                                          std::bitset<35>
                                                              SLTRPTSubset;
                                                          ;
                                                          ;
                                                          enum extended
                                                        } SLCPLen {
                                                          ;
                                                          ;
                                                          struct SLDiscConfig {
                                                            enum discTxResources {
                                                              typedef release;
                                                              enum setup{struct scheduled{
                                                                  //    SLDiscResourcePool
                                                                  //    discTxConfig;
                                                                  //    SLTFIndexPairList
                                                                  //    discTFIndexList;
                                                                  SLHoppingConfigDisc
                                                                      discHoppingConfig;
                                                                  // ;
                                                              };
                                                            struct ueSelected {
                                                              struct
                                                                  discTxPoolDedicated {
                                                                //    SLTxPoolToReleaseList
                                                                //    poolToReleaseList;
                                                                //    SLDiscTxPoolToAddModList
                                                                //    poolToAddModList;
                                                                //                 };
                                                              };
                                                            };
                                                            //                     };

                                                            ;
                                                            enum discTFIndexListv1260 {
                                                              typedef release;
                                                              struct setup{
                                                                  SLTFIndexPairListb
                                                                      discTFIndexListb;};
                                                            //                   };

                                                            ;
                                                            enum discTxResourcesPS {
                                                              typedef release;
                                                              enum setup{
                                                                  SLDiscTxConfigScheduled
                                                                      scheduled;
                                                                  struct
                                                                  ueSelected{
                                                                      SLDiscTxPoolDedicated
                                                                          discTxPoolPSDedicated;};
                                                          };
                                                          //                    };
                                                          enum discTxInterFreqInfo {
                                                            typedef release;
                                                            struct setup{
                                                                //  Need OR
                                                                //  ARFCNValueEUTRAr9
                                                                //  discTxCarrierFreq;
                                                                //  Need OR
                                                                //  SLDiscTxRefCarrierDedicated
                                                                //  discTxRefCarrierDedicated;
                                                                //     SLDiscTxInfoInterFreqListExt
                                                                //     discTxInfoInterFreqListExt;
                                                            };
                                                            //                    };
                                                            //    ,  enum
                                                            //    true}
                                                            //    gapRequestsAllowedDedicated
                                                            //    {
                                                            enum discRxGapConfig{
                                                                typedef release;
                                                                SLGapConfig
                                                                    setup;
                                                                //                    };
                                                                enum discTxGapConfig{
                                                                    typedef release;
                                                                    SLGapConfig
                                                                        setup;
                                                                    //                    };
                                                                    enum discSysInfoReportConfig{
                                                                        typedef release;
                                                                        SLDiscSysInfoReportFreqList
                                                                            setup;
                                                                        //                   };

                                                                        ;};
                                                          ;
                                                          SLD;
                                                          ;
                                                          struct
                                                              SLDiscTxInfoInterFreqListExt {
                                                            //      SEQU
                                                            //      discTxFreqToAddModList;
                                                            //     SEQU
                                                            //     discTxFreqToReleaseList;
                                                          };
                                                          ;
                                                          struct
                                                              SLDiscTxResourceInfoPerFreq {
                                                            ARFCNValueEUTRAr9
                                                                discTxCarrierFreq;
                                                            //  Need OR
                                                            //  SLDiscTxResource
                                                            //  discTxResources;
                                                            //  Need OR
                                                            //  SLDiscTxResource
                                                            //  discTxResourcesPS;
                                                            //  Need OR
                                                            //  SLDiscTxRefCarrierDedicated
                                                            //  discTxRefCarrierDedicated;
                                                            //  Need OR
                                                            //  CellSelectionInfoNFreq
                                                            //  cellSelectionInfo;
                                                          };
                                                          ;
                                                          enum SLDiscTxResource {
                                                            typedef release;
                                                            enum setup{struct scheduled{
                                                                //    SLDiscResourcePool
                                                                //    discTxConfig;
                                                                //    SLTFIndexPairListb
                                                                //    discTFIndexList;
                                                                SLHoppingConfigDisc
                                                                    discHoppingConfig;
                                                                // ;
                                                            };
                                                          struct ueSelected {
                                                            struct
                                                                discTxPoolDedicated {
                                                              //    SLTxPoolToReleaseList
                                                              //    poolToReleaseList;
                                                              //    SLDiscTxPoolToAddModList
                                                              //    poolToAddModList;
                                                              //                 };
                                                            };
                                                          };
                                                        };
                                                        ;
                                                        SEQU
                                                            SLDiscTxPoolToAddModList;
                                                        ;
                                                        struct
                                                            SLDiscTxPoolToAddMod {
                                                          SLTxPoolIdentity
                                                              poolIdentity;
                                                          SLDiscResourcePool
                                                              pool;
                                                        };
                                                        ;
                                                        struct
                                                            SLDiscTxConfigScheduled {
                                                          //    SLDiscResourcePool
                                                          //    discTxConfig;
                                                          //    SLTFIndexPairList
                                                          //    discTFIndexList;
                                                          SLHoppingConfigDisc
                                                              discHoppingConfig;
                                                        };
                                                        ;
                                                        struct
                                                            SLDiscTxPoolDedicated {
                                                          //    SLTxPoolToReleaseList
                                                          //    poolToReleaseList;
                                                          //    SLDiscTxPoolToAddModList
                                                          //    poolToAddModList;
                                                        };
                                                        ;
                                                        SEQU SLTFIndexPairList;
                                                        ;
                                                        struct SLTFIndexPair {
                                                          //        int
                                                          //        discSFIndex;
                                                          //       int
                                                          //       discPRBIndex;
                                                        };
                                                        ;
                                                        SEQU SLTFIndexPairListb;
                                                        ;
                                                        struct SLTFIndexPairb {
                                                          //        int
                                                          //        discSFIndexb;
                                                          //        int
                                                          //        discPRBIndexb;
                                                        };
                                                        ;
                                                        enum SLDiscTxRefCarrierDedicated {
                                                          typedef pCell;
                                                          SCellIndexr10 sCell;
                                                        };
                                                        ;
                                                        ;
                                                        SEQU SLDiscTxPoolList;
                                                        ;
                                                        SEQU SLDiscRxPoolList;
                                                        ;
                                                        struct
                                                            SLDiscResourcePool {
                                                          SLCPLen cpLen;
                                                          enum discPeriod {

                                                            rf64 rf256 rf512
                                                                rf1024 rf16v13x0
                                                                    spare
                                                          };
                                                          int numRetx;
                                                          int numRepetition;
                                                          SLTFResourceConfig
                                                              tfResourceConfig;
                                                          struct txParameters {
                                                            SLTxParameters
                                                                txParametersGeneral;
                                                            struct
                                                                ueSelectedResourceConfig {
                                                              enum poolSelection {
                                                                SLPoolSelectionConfig
                                                                    rsrpBased;
                                                                typedef random;
                                                              };
                                                              enum p100
                                                            } txProbability {

                                                              p50
                                                                  //  Need OR };
                                                                  //  Cond Tx };
                                                                  struct
                                                                  rxParameters {
                                                                //  Need OR
                                                                //  TDDConfig
                                                                //  tddConfig;
                                                                int syncConfigIndex;
                                                                //  Need OR };

                                                                ;
                                                                enum discPeriodv13x0 {
                                                                  typedef release;
                                                                  enum setup{

                                                                      rf7, rf8,
                                                                      rf14 spare3 spare2
                                                                          spare};
                                                                  //                   };
                                                                  //  N;
                                                                  //  field to
                                                                  //  spare
                                                                  //  value to
                                                                  //  ensure
                                                                  //  legacy UEs
                                                                  //  ignore the
                                                                  //  concerned
                                                                  //  entry;
                                                                  struct
                                                                  rxParamsAddNeighFreq{
                                                                      PhysCellId
                                                                          physCellId;
                                                                      //                    };
                                                                      struct
                                                                      txParamsAddNeighFreq{
                                                                          PhysCellId
                                                                              physCellId;
                                                                          //          PMax       pMax;
                                                                          //  Need
                                                                          //  OR
                                                                          //  TDDConfig
                                                                          //  tddConfig;
                                                                          //  Cond
                                                                          //  TDDOR
                                                                          //  TDDConfigv1130
                                                                          //  tddConfigv1130;
                                                                          struct
                                                                          freqInfo{
                                                                              //      ARFCNValueEUTRA      ulCarrierFreq;
                                                                              enum n100} ulBandwidth{

                                                                              n15,
                                                                              n25,
                                                                              n50
                                                                              // ;
                                                                              AdditionalSpectrumEmission
                                                                                  additionalSpectrumEmission;};
                                                                int referenceSignalPower;
                                                                //  Need OR
                                                                //  int
                                                                //  syncConfigIndex;
                                                                //                   };

                                                                ;
                                                              };
                                                              ;
                                                              struct
                                                                  SLPoolSelectionConfig {
                                                                RSRPRangeSL2
                                                                    threshLow;
                                                                RSRPRangeSL2
                                                                    threshHigh;
                                                              };
                                                              ;
                                                              ;
                                                              SEQU
                                                                  SLDiscTxPowerInfoList;
                                                              ;
                                                              struct
                                                                  SLDiscTxPowerInfo {
                                                                PMax
                                                                    discMaxTxPower;

                                                                ;
                                                              };
                                                              ;
                                                              ;
                                                              struct
                                                                  SLGapConfig {
                                                                SLGapPatternList
                                                                    gapPatternList;
                                                              };
                                                              ;
                                                              SEQU
                                                                  SLGapPatternList;
                                                              ;
                                                              struct
                                                                  SLGapPattern {
                                                                enum gapPeriod {

                                                                  rf7,
                                                                  rf8,
                                                                  rf14,
                                                                  rf16,
                                                                  rf28 rf64 rf128
                                                                      rf256 rf512
                                                                          rf1024
                                                                              spare
                                                                };
                                                                SLOffsetIndicator
                                                                    gapOffset;
                                                                std::bitset<
                                                                    110240>
                                                                    gapSubframeBitmap;
                                                              };
                                                              ;
                                                              ;
                                                              SEQU SLGapRequest;
                                                              ;
                                                              struct
                                                                  SLGapFreqInfo {
                                                                ARFCNValueEUTRAr9
                                                                    carrierFreq;
                                                                SLGapPatternList
                                                                    gapPatternList;
                                                              };
                                                              ;
                                                              ;
                                                              struct
                                                                  SLHoppingConfigComm {
                                                                int hoppingParameter;
                                                                enum numSubbands {

                                                                  ns2 int
                                                                      rbOffset;
                                                                };
                                                                ;
                                                                struct
                                                                    SLHoppingConfigDisc {
                                                                  int a;
                                                                  int b;
                                                                  enum n5
                                                                } c{};
                                                                ;
                                                                ;
                                                                enum SLOffsetIndicator {
                                                                  int small;
                                                                  int large;
                                                                };
                                                                ;
                                                                int SLOffsetIndicatorSync;
                                                                ;
                                                                ;
                                                                enum SLPeriodComm {

                                                                  sf60,
                                                                  sf70,
                                                                  sf80,
                                                                  sf120 sf160 sf240
                                                                      sf280 sf320 spare6
                                                                          spare5;
                                                                  spare4 spare3
                                                                      spare2
                                                                          spare
                                                                };
                                                                ;
                                                                ;
                                                                SEQU
                                                                    SLPriorityList;
                                                                ;
                                                                int SLPriority;
                                                                ;
                                                                ;
                                                                int SLSSID;
                                                                ;
                                                                ;
                                                                SEQU
                                                                    SLSyncConfigList;
                                                                ;
                                                                struct
                                                                    SLSyncConfig {
                                                                  SLCPLen
                                                                      syncCPLen;
                                                                  SLOffsetIndicatorSync
                                                                      syncOffsetIndicator;
                                                                  SLSSID slssid;
                                                                  struct
                                                                      txParameters {
                                                                    SLTxParameters
                                                                        syncTxParameters;
                                                                    RSRPRangeSL
                                                                        syncTxThreshIC;
                                                                    //  Need OR
                                                                    //  std::bitset<19>
                                                                    //  syncInfoReserved;
                                                                    //  Need OR
                                                                    //  };
                                                                    struct
                                                                        rxParamsNCell {
                                                                      PhysCellId
                                                                          physCellId;
                                                                      enum w2
                                                                    } discSyncWindow {
                                                                      //  Need
                                                                      //  OR };

                                                                      ;
                                                                      //  Need
                                                                      //  OR
                                                                      //  enum
                                                                      //  true}
                                                                      //  syncTxPeriodic
                                                                      { ; };
                                                                      ;
                                                                      SEQU
                                                                          SLSyncConfigListNFreq;
                                                                      ;
                                                                      struct
                                                                          SLSyncConfigNFreq {
                                                                        struct
                                                                            asyncParameters {
                                                                          SLCPLen
                                                                              syncCPLen;
                                                                          SLOffsetIndicatorSync
                                                                              syncOffsetIndicator;
                                                                          SLSSID
                                                                              slssid;
                                                                          //  Need
                                                                          //  OR
                                                                          //  };
                                                                          struct
                                                                              txParameters {
                                                                            SLTxParameters
                                                                                syncTxParameters;
                                                                            RSRPRangeSL
                                                                                syncTxThreshIC;
                                                                            //  Need OR   std::bitset<19>    syncInfoReserved;
                                                                            //  Need OR    enum  true}     syncTxPeriodic    {
                                                                            //  Need OR                  };
                                                                            struct
                                                                                rxParametersr1s {
                                                                              enum w2
                                                                            } discSyncWindow {
                                                                              //  Need OR                   };

                                                                              ;
                                                                            };
                                                                            ;
                                                                            struct
                                                                                SLSysInfoReport {
                                                                              PLMNIdentityList
                                                                                  plmnIdentityList;
                                                                              CellIdentity
                                                                                  cellIdentity13;
                                                                              ARFCNValueEUTRAr9
                                                                                  carrierFreqInfo13;
                                                                              SLDiscRxPoolList
                                                                                  discRxResources;
                                                                              SLDiscTxPoolList
                                                                                  discTxPoolCommon;
                                                                              SLDiscTxPowerInfoList
                                                                                  discTxPowerInfo;
                                                                              struct
                                                                                  discSyncConfig {
                                                                                struct
                                                                                    asyncParameters {
                                                                                  SLCPLen
                                                                                      syncCPLen;
                                                                                  SLOffsetIndicatorSync
                                                                                      syncOffsetIndicator;
                                                                                  SLSSID
                                                                                      slssid;
                                                                                };
                                                                                struct
                                                                                    txParameters {
                                                                                  SLTxParameters
                                                                                      syncTxParameters;
                                                                                  RSRPRangeSL
                                                                                      syncTxThreshIC;
                                                                                  std::bitset<
                                                                                      19>
                                                                                      syncInfoReserved;
                                                                                  enum true
                                                                                } syncTxPeriodic{};
                                                                              };
                                                                              struct
                                                                                  cellSelectionInfo {
                                                                                QRxLevMin
                                                                                    qRxLevMin;
                                                                                int qRxLevMinOffset;
                                                                              };
                                                                              enum qHyst {
                                                                                dB0 dB1 dB2 dB3
                                                                                    dB4 dB5 dB6
                                                                                        dB8 dB10;
                                                                                dB12 dB14 dB16
                                                                                    dB18 dB20
                                                                                        dB22
                                                                                            dB24
                                                                              };
                                                                              ;
                                                                              QRxLevMin
                                                                                  qRxLevMin;
                                                                              TReselection
                                                                                  tReselectionEUTRA;
                                                                              TDDConfig
                                                                                  tddConfig;
                                                                              struct
                                                                                  freqInfo {
                                                                                ARFCNValueEUTRA
                                                                                    ulCarrierFreq;
                                                                                enum n100
                                                                              } ulBandwidth {

                                                                                n15,
                                                                                    n25,
                                                                                    n50;
                                                                                AdditionalSpectrumEmission
                                                                                    additionalSpectrumEmission;
                                                                              };
                                                                              PMax
                                                                                  pMax;
                                                                              int referenceSignalPower;
                                                                            };
                                                                            ;
                                                                            ;
                                                                            struct
                                                                                SLTFResourceConfig {
                                                                              int prbNum;
                                                                              int prbStart;
                                                                              int prbEnd;
                                                                              SLOffsetIndicator
                                                                                  offsetIndicator;
                                                                              SubframeBitmapSL
                                                                                  subframeBitmap;
                                                                            };
                                                                            ;
                                                                            enum SubframeBitmapSL {
                                                                              std::bitset<
                                                                                  4>
                                                                                  bs4;
                                                                              std::bitset<
                                                                                  8>
                                                                                  bs8;
                                                                              std::bitset<
                                                                                  12>
                                                                                  bs12;
                                                                              std::bitset<
                                                                                  16>
                                                                                  bs16;
                                                                              std::bitset<
                                                                                  30>
                                                                                  bs30;
                                                                              std::bitset<
                                                                                  40>
                                                                                  bs40;
                                                                              std::bitset<
                                                                                  42>
                                                                                  bs42;
                                                                            };
                                                                            ;
                                                                            ;
                                                                            struct
                                                                                SLTxParameters {
                                                                              Alpha
                                                                                  alpha;
                                                                              P0SL
                                                                                  p0;
                                                                            };
                                                                            ;
                                                                            int P0SL;
                                                                            ;
                                                                            ;
                                                                            int SLTxPoolIdentity;
                                                                            ;
                                                                            int SLCommTxPoolIdentityv13x0;
                                                                            ;
                                                                            int SLCommTxPoolIdentity;
                                                                            ;
                                                                            ;
                                                                            SEQU
                                                                                SLTxPoolToReleaseList;
                                                                            ;
                                                                            SEQU
                                                                                SLTxPoolToReleaseListExt;
                                                                            ;
                                                                    //  M 16
                                                                    //  int GER
                                                                    //  maxACDCCat;
                                                                    //  Maximum
                                                                    //  number
                                                                    //  of band
                                                                    //  combinations.
                                                                    //  128  int
                                                                    //  GER
                                                                    //  maxBandCombr10;
                                                                    //  Maximum
                                                                    //  number
                                                                    //  of
                                                                    //  additional
                                                                    //  band
                                                                    //  combinations.
                                                                    //  256  int
                                                                    //  GER
                                                                    //  maxBandCombr11;
                                                                    384 //  Maximum
                                                                        //  number
                                                                        //  of
                                                                        //  band
                                                                        //  combinations
                                                                        //  in
                                                                        //  Rel13
                                                                        //  int
                                                                        //  GER
                                                                        //  maxBandComb;
//  Maximum number of bands listed in EUTRA UE caps  int GER   64     maxBands;
//  Maximum number of supported CA BW classes per band 16  int GER
//  maxBandwidthClassr10;
//  Maximum number of bandwidth combination sets per 32  int GER
//  maxBandwidthCombSetr10;
//  supported band combination;
//  Maximum value of the CDMA band classes  int GER   32   maxCDMABandClass;
//  Maximum number of blacklisted physical cell identity  int GER   16
//  maxCellBlack;
//  ranges listed in SIB type 4 and 5;
//  Maximum number of visited EUTRA cells reported  int GER   16 maxCellHistory;
//  Maximum number of GERAN cells for which system in 32  int GER
//  maxCellInfoGERANr9;
//  formation can be provided as redirection assistance;
//  Maximum number of UTRA cells for which system 16  int GER maxCellInfoUTRAr9;
//  information can be provided as redirection;
//  assistance;
//  Maximum number of reported UL CA combinations  int GER   128 maxCombIDCr11;
//  Maximum number of CSIIM configurations  int GER   3    maxCSIIMr11;
//  (;
//  Maximum number of CSIIM configurations  int GER   4    maxCSIIM;
//  (;
//  M  int GER   4    maxCSIProcr11;
//   frequency);
//  Maximum number of CSI RS resource  int GER   3   maxCSIRSNZPr11;
//   configurations using nonzero Tx power;
// ;
//  Maximum number of CSI RS resource  int GER   4   maxCSIRSZPr11;
// ;
//   frequency);
//  Maximum number of additional periodic CQI  int GER   3   maxCQIProcExtr11;
//  c;
//  Maximum number of UTRA TDD carrier frequencies for 6  int GER
//  maxFreqUTRATDDr10;
//  which system information can be provided as;
//  redirection assistance;
